{"ast":null,"code":"import Vue from 'vue';\nimport Vuex from 'vuex';\nVue.use(Vuex);\nexport default new Vuex.Store({\n  state: {\n    isRunning: false,\n    currentTime: '00:00:00',\n    seconds: 0\n  },\n  mutations: {\n    SET_RUNNING(state, isRunning) {\n      state.isRunning = isRunning;\n    },\n    SET_CURRENT_TIME(state, time) {\n      state.currentTime = time;\n    },\n    INCREMENT_SECONDS(state) {\n      state.seconds++;\n    },\n    RESET_CLOCK(state) {\n      state.seconds = 0;\n      state.currentTime = '00:00:00';\n    }\n  },\n  actions: {\n    startClock({\n      commit,\n      dispatch\n    }) {\n      commit('SET_RUNNING', true);\n      const timer = setInterval(() => {\n        commit('INCREMENT_SECONDS');\n        const hours = Math.floor(this.state.seconds / 3600);\n        const minutes = Math.floor(this.state.seconds % 3600 / 60);\n        const secs = this.state.seconds % 60;\n        const time = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n        commit('SET_CURRENT_TIME', time);\n      }, 1000);\n      // 存储 timer ID 以便后续清除\n      commit('SET_TIMER', timer);\n    },\n    pauseClock({\n      commit,\n      state\n    }) {\n      commit('SET_RUNNING', false);\n      if (state.timer) {\n        clearInterval(state.timer);\n      }\n    },\n    toggleClock({\n      dispatch,\n      state\n    }) {\n      if (state.isRunning) {\n        dispatch('pauseClock');\n      } else {\n        dispatch('startClock');\n      }\n    }\n  },\n  getters: {\n    isClockRunning: state => state.isRunning,\n    currentTime: state => state.currentTime\n  }\n});","map":{"version":3,"names":["Vue","Vuex","use","Store","state","isRunning","currentTime","seconds","mutations","SET_RUNNING","SET_CURRENT_TIME","time","INCREMENT_SECONDS","RESET_CLOCK","actions","startClock","commit","dispatch","timer","setInterval","hours","Math","floor","minutes","secs","String","padStart","pauseClock","clearInterval","toggleClock","getters","isClockRunning"],"sources":["D:/git_project/MyOS/frontend/src/store/index.js"],"sourcesContent":["import Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\nexport default new Vuex.Store({\r\n  state: {\r\n    isRunning: false,\r\n    currentTime: '00:00:00',\r\n    seconds: 0\r\n  },\r\n  mutations: {\r\n    SET_RUNNING(state, isRunning) {\r\n      state.isRunning = isRunning\r\n    },\r\n    SET_CURRENT_TIME(state, time) {\r\n      state.currentTime = time\r\n    },\r\n    INCREMENT_SECONDS(state) {\r\n      state.seconds++\r\n    },\r\n    RESET_CLOCK(state) {\r\n      state.seconds = 0\r\n      state.currentTime = '00:00:00'\r\n    }\r\n  },\r\n  actions: {\r\n    startClock({ commit, dispatch }) {\r\n      commit('SET_RUNNING', true)\r\n      const timer = setInterval(() => {\r\n        commit('INCREMENT_SECONDS')\r\n        const hours = Math.floor(this.state.seconds / 3600)\r\n        const minutes = Math.floor((this.state.seconds % 3600) / 60)\r\n        const secs = this.state.seconds % 60\r\n        const time = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`\r\n        commit('SET_CURRENT_TIME', time)\r\n      }, 1000)\r\n      // 存储 timer ID 以便后续清除\r\n      commit('SET_TIMER', timer)\r\n    },\r\n    pauseClock({ commit, state }) {\r\n      commit('SET_RUNNING', false)\r\n      if (state.timer) {\r\n        clearInterval(state.timer)\r\n      }\r\n    },\r\n    toggleClock({ dispatch, state }) {\r\n      if (state.isRunning) {\r\n        dispatch('pauseClock')\r\n      } else {\r\n        dispatch('startClock')\r\n      }\r\n    }\r\n  },\r\n  getters: {\r\n    isClockRunning: state => state.isRunning,\r\n    currentTime: state => state.currentTime\r\n  }\r\n}) "],"mappings":"AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,IAAI,MAAM,MAAM;AAEvBD,GAAG,CAACE,GAAG,CAACD,IAAI,CAAC;AAEb,eAAe,IAAIA,IAAI,CAACE,KAAK,CAAC;EAC5BC,KAAK,EAAE;IACLC,SAAS,EAAE,KAAK;IAChBC,WAAW,EAAE,UAAU;IACvBC,OAAO,EAAE;EACX,CAAC;EACDC,SAAS,EAAE;IACTC,WAAWA,CAACL,KAAK,EAAEC,SAAS,EAAE;MAC5BD,KAAK,CAACC,SAAS,GAAGA,SAAS;IAC7B,CAAC;IACDK,gBAAgBA,CAACN,KAAK,EAAEO,IAAI,EAAE;MAC5BP,KAAK,CAACE,WAAW,GAAGK,IAAI;IAC1B,CAAC;IACDC,iBAAiBA,CAACR,KAAK,EAAE;MACvBA,KAAK,CAACG,OAAO,EAAE;IACjB,CAAC;IACDM,WAAWA,CAACT,KAAK,EAAE;MACjBA,KAAK,CAACG,OAAO,GAAG,CAAC;MACjBH,KAAK,CAACE,WAAW,GAAG,UAAU;IAChC;EACF,CAAC;EACDQ,OAAO,EAAE;IACPC,UAAUA,CAAC;MAAEC,MAAM;MAAEC;IAAS,CAAC,EAAE;MAC/BD,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAC3B,MAAME,KAAK,GAAGC,WAAW,CAAC,MAAM;QAC9BH,MAAM,CAAC,mBAAmB,CAAC;QAC3B,MAAMI,KAAK,GAAGC,IAAI,CAACC,KAAK,CAAC,IAAI,CAAClB,KAAK,CAACG,OAAO,GAAG,IAAI,CAAC;QACnD,MAAMgB,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAE,IAAI,CAAClB,KAAK,CAACG,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;QAC5D,MAAMiB,IAAI,GAAG,IAAI,CAACpB,KAAK,CAACG,OAAO,GAAG,EAAE;QACpC,MAAMI,IAAI,GAAG,GAAGc,MAAM,CAACL,KAAK,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAID,MAAM,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAID,MAAM,CAACD,IAAI,CAAC,CAACE,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;QACrHV,MAAM,CAAC,kBAAkB,EAAEL,IAAI,CAAC;MAClC,CAAC,EAAE,IAAI,CAAC;MACR;MACAK,MAAM,CAAC,WAAW,EAAEE,KAAK,CAAC;IAC5B,CAAC;IACDS,UAAUA,CAAC;MAAEX,MAAM;MAAEZ;IAAM,CAAC,EAAE;MAC5BY,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;MAC5B,IAAIZ,KAAK,CAACc,KAAK,EAAE;QACfU,aAAa,CAACxB,KAAK,CAACc,KAAK,CAAC;MAC5B;IACF,CAAC;IACDW,WAAWA,CAAC;MAAEZ,QAAQ;MAAEb;IAAM,CAAC,EAAE;MAC/B,IAAIA,KAAK,CAACC,SAAS,EAAE;QACnBY,QAAQ,CAAC,YAAY,CAAC;MACxB,CAAC,MAAM;QACLA,QAAQ,CAAC,YAAY,CAAC;MACxB;IACF;EACF,CAAC;EACDa,OAAO,EAAE;IACPC,cAAc,EAAE3B,KAAK,IAAIA,KAAK,CAACC,SAAS;IACxCC,WAAW,EAAEF,KAAK,IAAIA,KAAK,CAACE;EAC9B;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}