{"ast":null,"code":"export default {\n  name: 'MemoryManagement',\n  data() {\n    return {\n      totalMemory: 1024,\n      // 总内存大小（MB）\n      usedMemory: 0,\n      freeMemory: 1024,\n      blockSize: 4,\n      // 每个块的大小（MB）\n      memoryRows: [],\n      blocksPerRow: 16\n    };\n  },\n  computed: {\n    memoryUsagePercentage() {\n      return Math.round(this.usedMemory / this.totalMemory * 100);\n    },\n    memoryUsageColor() {\n      const percentage = this.memoryUsagePercentage;\n      if (percentage < 60) return '#67C23A';\n      if (percentage < 80) return '#E6A23C';\n      return '#F56C6C';\n    }\n  },\n  created() {\n    this.initializeMemory();\n  },\n  methods: {\n    initializeMemory() {\n      const totalBlocks = Math.ceil(this.totalMemory / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n      this.memoryRows = Array(rows).fill().map(() => Array(this.blocksPerRow).fill().map(() => ({\n        status: 'FREE',\n        processId: null,\n        size: this.blockSize\n      })));\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `进程ID: ${block.processId}\\n大小: ${block.size}MB`;\n      }\n      return '空闲块';\n    },\n    allocateMemory(processId, size) {\n      const blocksNeeded = Math.ceil(size / this.blockSize);\n      let allocatedBlocks = 0;\n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED';\n            block.processId = processId;\n            allocatedBlocks++;\n            if (allocatedBlocks === blocksNeeded) {\n              this.usedMemory += size;\n              this.freeMemory -= size;\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    freeMemory(processId) {\n      let freedSize = 0;\n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.processId === processId) {\n            block.status = 'FREE';\n            block.processId = null;\n            freedSize += block.size;\n          }\n        }\n      }\n      this.usedMemory -= freedSize;\n      this.freeMemory += freedSize;\n    }\n  }\n};","map":{"version":3,"names":["name","data","totalMemory","usedMemory","freeMemory","blockSize","memoryRows","blocksPerRow","computed","memoryUsagePercentage","Math","round","memoryUsageColor","percentage","created","initializeMemory","methods","totalBlocks","ceil","rows","Array","fill","map","status","processId","size","getBlockTooltip","block","allocateMemory","blocksNeeded","allocatedBlocks","row","freedSize"],"sources":["src/components/MemoryManagement.vue"],"sourcesContent":["<template>\n  <div class=\"memory-management\">\n    <h2>内存管理</h2>\n    <div class=\"memory-info\">\n      <div class=\"info-item\">总内存: {{ totalMemory }}MB</div>\n      <div class=\"info-item\">已用内存: {{ usedMemory }}MB</div>\n      <div class=\"info-item\">空闲内存: {{ freeMemory }}MB</div>\n      <div class=\"memory-usage\">\n        <div class=\"usage-label\">内存利用率: {{ memoryUsagePercentage }}%</div>\n        <el-progress \n          :percentage=\"memoryUsagePercentage\"\n          :color=\"memoryUsageColor\"\n          :stroke-width=\"15\"\n          :show-text=\"false\"\n        ></el-progress>\n      </div>\n    </div>\n    \n    <div class=\"memory-blocks\">\n      <div v-for=\"(row, rowIndex) in memoryRows\" :key=\"rowIndex\" class=\"memory-row\">\n        <div\n          v-for=\"(block, blockIndex) in row\"\n          :key=\"blockIndex\"\n          class=\"memory-block\"\n          :class=\"{\n            'allocated': block.status === 'ALLOCATED',\n            'free': block.status === 'FREE'\n          }\"\n          :title=\"getBlockTooltip(block)\"\n        ></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'MemoryManagement',\n  data() {\n    return {\n      totalMemory: 1024, // 总内存大小（MB）\n      usedMemory: 0,\n      freeMemory: 1024,\n      blockSize: 4, // 每个块的大小（MB）\n      memoryRows: [],\n      blocksPerRow: 16\n    }\n  },\n  computed: {\n    memoryUsagePercentage() {\n      return Math.round((this.usedMemory / this.totalMemory) * 100)\n    },\n    memoryUsageColor() {\n      const percentage = this.memoryUsagePercentage\n      if (percentage < 60) return '#67C23A'\n      if (percentage < 80) return '#E6A23C'\n      return '#F56C6C'\n    }\n  },\n  created() {\n    this.initializeMemory()\n  },\n  methods: {\n    initializeMemory() {\n      const totalBlocks = Math.ceil(this.totalMemory / this.blockSize)\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\n      \n      this.memoryRows = Array(rows).fill().map(() => \n        Array(this.blocksPerRow).fill().map(() => ({\n          status: 'FREE',\n          processId: null,\n          size: this.blockSize\n        }))\n      )\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `进程ID: ${block.processId}\\n大小: ${block.size}MB`\n      }\n      return '空闲块'\n    },\n    allocateMemory(processId, size) {\n      const blocksNeeded = Math.ceil(size / this.blockSize)\n      let allocatedBlocks = 0\n      \n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED'\n            block.processId = processId\n            allocatedBlocks++\n            \n            if (allocatedBlocks === blocksNeeded) {\n              this.usedMemory += size\n              this.freeMemory -= size\n              return true\n            }\n          }\n        }\n      }\n      return false\n    },\n    freeMemory(processId) {\n      let freedSize = 0\n      \n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.processId === processId) {\n            block.status = 'FREE'\n            block.processId = null\n            freedSize += block.size\n          }\n        }\n      }\n      \n      this.usedMemory -= freedSize\n      this.freeMemory += freedSize\n    }\n  }\n}\n</script>\n\n<style scoped>\n.memory-management {\n  padding: 20px;\n}\n\n.memory-info {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 20px;\n  flex-wrap: nowrap;\n}\n\n.info-item {\n  white-space: nowrap;\n}\n\n.memory-blocks {\n  border: 1px solid #dcdfe6;\n  padding: 10px;\n  background-color: #f5f7fa;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 600px;\n  margin: 0 auto;\n}\n\n.memory-row {\n  display: flex;\n  gap: 2px;\n  margin-bottom: 2px;\n  justify-content: center;\n  width: 100%;\n}\n\n.memory-block {\n  width: 25px;\n  height: 25px;\n  border: 1px solid #dcdfe6;\n  cursor: pointer;\n}\n\n.memory-block.allocated {\n  background-color: #409eff;\n}\n\n.memory-block.free {\n  background-color: #f0f9eb;\n}\n\n.memory-usage {\n  flex: 1;\n  min-width: 200px;\n  margin-left: 20px;\n}\n\n.usage-label {\n  margin-bottom: 5px;\n  font-weight: bold;\n  white-space: nowrap;\n}\n</style> "],"mappings":"AAoCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,UAAA;MACAC,UAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MACAC,YAAA;IACA;EACA;EACAC,QAAA;IACAC,sBAAA;MACA,OAAAC,IAAA,CAAAC,KAAA,MAAAR,UAAA,QAAAD,WAAA;IACA;IACAU,iBAAA;MACA,MAAAC,UAAA,QAAAJ,qBAAA;MACA,IAAAI,UAAA;MACA,IAAAA,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;EACA;EACAC,OAAA;IACAD,iBAAA;MACA,MAAAE,WAAA,GAAAP,IAAA,CAAAQ,IAAA,MAAAhB,WAAA,QAAAG,SAAA;MACA,MAAAc,IAAA,GAAAT,IAAA,CAAAQ,IAAA,CAAAD,WAAA,QAAAV,YAAA;MAEA,KAAAD,UAAA,GAAAc,KAAA,CAAAD,IAAA,EAAAE,IAAA,GAAAC,GAAA,OACAF,KAAA,MAAAb,YAAA,EAAAc,IAAA,GAAAC,GAAA;QACAC,MAAA;QACAC,SAAA;QACAC,IAAA,OAAApB;MACA,GACA;IACA;IACAqB,gBAAAC,KAAA;MACA,IAAAA,KAAA,CAAAJ,MAAA;QACA,gBAAAI,KAAA,CAAAH,SAAA,SAAAG,KAAA,CAAAF,IAAA;MACA;MACA;IACA;IACAG,eAAAJ,SAAA,EAAAC,IAAA;MACA,MAAAI,YAAA,GAAAnB,IAAA,CAAAQ,IAAA,CAAAO,IAAA,QAAApB,SAAA;MACA,IAAAyB,eAAA;MAEA,SAAAC,GAAA,SAAAzB,UAAA;QACA,SAAAqB,KAAA,IAAAI,GAAA;UACA,IAAAJ,KAAA,CAAAJ,MAAA;YACAI,KAAA,CAAAJ,MAAA;YACAI,KAAA,CAAAH,SAAA,GAAAA,SAAA;YACAM,eAAA;YAEA,IAAAA,eAAA,KAAAD,YAAA;cACA,KAAA1B,UAAA,IAAAsB,IAAA;cACA,KAAArB,UAAA,IAAAqB,IAAA;cACA;YACA;UACA;QACA;MACA;MACA;IACA;IACArB,WAAAoB,SAAA;MACA,IAAAQ,SAAA;MAEA,SAAAD,GAAA,SAAAzB,UAAA;QACA,SAAAqB,KAAA,IAAAI,GAAA;UACA,IAAAJ,KAAA,CAAAJ,MAAA,oBAAAI,KAAA,CAAAH,SAAA,KAAAA,SAAA;YACAG,KAAA,CAAAJ,MAAA;YACAI,KAAA,CAAAH,SAAA;YACAQ,SAAA,IAAAL,KAAA,CAAAF,IAAA;UACA;QACA;MACA;MAEA,KAAAtB,UAAA,IAAA6B,SAAA;MACA,KAAA5B,UAAA,IAAA4B,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}