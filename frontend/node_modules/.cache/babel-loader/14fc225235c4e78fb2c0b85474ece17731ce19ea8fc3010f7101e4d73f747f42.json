{"ast":null,"code":"import { getCurrentTime } from '@/api/clock';\nexport default {\n  name: 'SystemClock',\n  data() {\n    return {\n      currentTime: 0,\n      timer: null\n    };\n  },\n  methods: {\n    formatTime(seconds) {\n      const hours = Math.floor(seconds / 3600);\n      const minutes = Math.floor(seconds % 3600 / 60);\n      const secs = seconds % 60;\n      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n    },\n    async updateTime() {\n      try {\n        const response = await getCurrentTime();\n        this.currentTime = response.currentTime;\n      } catch (error) {\n        console.error('获取时间失败:', error);\n      }\n    },\n    startTimer() {\n      this.updateTime();\n      this.timer = setInterval(this.updateTime, 1000);\n    },\n    clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    }\n  },\n  created() {\n    this.startTimer();\n  },\n  beforeDestroy() {\n    this.clearTimer();\n  }\n};","map":{"version":3,"names":["getCurrentTime","name","data","currentTime","timer","methods","formatTime","seconds","hours","Math","floor","minutes","secs","String","padStart","updateTime","response","error","console","startTimer","setInterval","clearTimer","clearInterval","created","beforeDestroy"],"sources":["src/components/SystemClock.vue"],"sourcesContent":["<template>\r\n  <div class=\"system-clock\">\r\n    <span class=\"clock-display\">{{ formatTime(currentTime) }} / {{currentTime }}</span>\r\n  </div></span>\r\n</template>\r\n\r\n<script>\r\nimport { getCurrentTime } from '@/api/clock'\r\n\r\nexport default {\r\n  name: 'SystemClock',\r\n  data() {\r\n    return {\r\n      currentTime: 0,\r\n      timer: null\r\n    }\r\n  },\r\n  methods: {\r\n    formatTime(seconds) {\r\n      const hours = Math.floor(seconds / 3600)\r\n      const minutes = Math.floor((seconds % 3600) / 60)\r\n      const secs = seconds % 60\r\n      return `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`\r\n    },\r\n    async updateTime() {\r\n      try {\r\n        const response = await getCurrentTime()\r\n        this.currentTime = response.currentTime\r\n      } catch (error) {\r\n        console.error('获取时间失败:', error)\r\n      }\r\n    },\r\n    startTimer() {\r\n      this.updateTime()\r\n      this.timer = setInterval(this.updateTime, 1000)\r\n    },\r\n    clearTimer() {\r\n      if (this.timer) {\r\n        clearInterval(this.timer)\r\n        this.timer = null\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.startTimer()\r\n  },\r\n  beforeDestroy() {\r\n    this.clearTimer()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.system-clock {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  z-index: 1;\r\n}\r\n\r\n.clock-display {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-family: monospace;\r\n}\r\n</style> "],"mappings":"AAOA,SAAAA,cAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,KAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAAC,OAAA;MACA,MAAAC,KAAA,GAAAC,IAAA,CAAAC,KAAA,CAAAH,OAAA;MACA,MAAAI,OAAA,GAAAF,IAAA,CAAAC,KAAA,CAAAH,OAAA;MACA,MAAAK,IAAA,GAAAL,OAAA;MACA,UAAAM,MAAA,CAAAL,KAAA,EAAAM,QAAA,YAAAD,MAAA,CAAAF,OAAA,EAAAG,QAAA,YAAAD,MAAA,CAAAD,IAAA,EAAAE,QAAA;IACA;IACA,MAAAC,WAAA;MACA;QACA,MAAAC,QAAA,SAAAhB,cAAA;QACA,KAAAG,WAAA,GAAAa,QAAA,CAAAb,WAAA;MACA,SAAAc,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;MACA;IACA;IACAE,WAAA;MACA,KAAAJ,UAAA;MACA,KAAAX,KAAA,GAAAgB,WAAA,MAAAL,UAAA;IACA;IACAM,WAAA;MACA,SAAAjB,KAAA;QACAkB,aAAA,MAAAlB,KAAA;QACA,KAAAA,KAAA;MACA;IACA;EACA;EACAmB,QAAA;IACA,KAAAJ,UAAA;EACA;EACAK,cAAA;IACA,KAAAH,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}