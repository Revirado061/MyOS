{"ast":null,"code":"export default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 256\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: []\n    };\n  },\n  methods: {\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        };\n\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n\n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data);\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error);\n        this.$message.error('创建进程失败，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","methods","createProcess","newProcess","id","Date","now","state","response","push","$message","success","error","console"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"process-management\">\r\n    <div class=\"process-control\">\r\n      <el-form :model=\"processForm\" label-width=\"100px\">\r\n        <el-form-item label=\"进程名称\">\r\n          <el-input v-model=\"processForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"优先级\">\r\n          <el-select v-model=\"processForm.priority\">\r\n            <el-option label=\"高\" :value=\"1\"></el-option>\r\n            <el-option label=\"中\" :value=\"2\"></el-option>\r\n            <el-option label=\"低\" :value=\"3\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"内存大小(MB)\">\r\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n\r\n    <div class=\"process-queues\">\r\n      <div class=\"queue-container\">\r\n        <h3>就绪队列</h3>\r\n        <div class=\"queue ready-queue\">\r\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"queue-container\">\r\n        <h3>运行队列</h3>\r\n        <div class=\"queue running-queue\">\r\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"queue-container\">\r\n        <h3>阻塞队列</h3>\r\n        <div class=\"queue blocked-queue\">\r\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"queue-container\">\r\n        <h3>终止队列</h3>\r\n        <div class=\"queue terminated-queue\">\r\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'ProcessManagement',\r\n  data() {\r\n    return {\r\n      processForm: {\r\n        name: '',\r\n        priority: 2,\r\n        memorySize: 256\r\n      },\r\n      readyQueue: [],\r\n      runningQueue: [],\r\n      blockedQueue: [],\r\n      terminatedQueue: []\r\n    }\r\n  },\r\n  methods: {\r\n    async createProcess() {\r\n      try {\r\n        const newProcess = {\r\n          id: Date.now(),\r\n          name: this.processForm.name,\r\n          priority: this.processForm.priority,\r\n          memorySize: this.processForm.memorySize,\r\n          state: 'NEW'\r\n        }\r\n        \r\n        // 调用后端 API 创建进程\r\n        const response = await createProcess(newProcess)\r\n        \r\n        // 如果创建成功，将进程添加到就绪队列\r\n        if (response.data) {\r\n          this.readyQueue.push(response.data)\r\n          this.processForm.name = ''\r\n          this.$message.success('进程创建成功')\r\n        }\r\n      } catch (error) {\r\n        console.error('创建进程失败:', error)\r\n        this.$message.error('创建进程失败，请重试')\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.process-management {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.process-control {\r\n  width: 300px;\r\n}\r\n\r\n.process-queues {\r\n  flex: 1;\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 20px;\r\n}\r\n\r\n.queue-container {\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n}\r\n\r\n.queue {\r\n  min-height: 100px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  background-color: #f5f7fa;\r\n  border-radius: 4px;\r\n}\r\n\r\n.process-tag {\r\n  margin: 5px;\r\n}\r\n</style> "],"mappings":"AAgEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAF,IAAA;QACAG,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,eAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,cAAA;MACA;QACA,MAAAC,UAAA;UACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;UACAd,IAAA,OAAAE,WAAA,CAAAF,IAAA;UACAG,QAAA,OAAAD,WAAA,CAAAC,QAAA;UACAC,UAAA,OAAAF,WAAA,CAAAE,UAAA;UACAW,KAAA;QACA;;QAEA;QACA,MAAAC,QAAA,SAAAN,aAAA,CAAAC,UAAA;;QAEA;QACA,IAAAK,QAAA,CAAAf,IAAA;UACA,KAAAI,UAAA,CAAAY,IAAA,CAAAD,QAAA,CAAAf,IAAA;UACA,KAAAC,WAAA,CAAAF,IAAA;UACA,KAAAkB,QAAA,CAAAC,OAAA;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAF,QAAA,CAAAE,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}