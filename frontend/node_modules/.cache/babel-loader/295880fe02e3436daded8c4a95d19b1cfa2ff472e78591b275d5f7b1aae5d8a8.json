{"ast":null,"code":"import { mapGetters, mapActions } from 'vuex';\nimport { startSystemClock, stopSystemClock, getCurrentTime } from '@/api/clock';\nexport default {\n  name: 'SystemClock',\n  data() {\n    return {\n      timer: null,\n      localTime: '00:00:00'\n    };\n  },\n  computed: {\n    ...mapGetters(['isClockRunning', 'currentTime']),\n    isRunning() {\n      return this.isClockRunning;\n    }\n  },\n  created() {\n    this.updateTime();\n  },\n  methods: {\n    ...mapActions(['startClock', 'pauseClock']),\n    async toggleClock() {\n      try {\n        if (this.isRunning) {\n          await stopSystemClock();\n          this.pauseClock();\n          this.clearTimer();\n        } else {\n          await startSystemClock();\n          this.startClock();\n          this.startTimer();\n        }\n      } catch (error) {\n        console.error('时钟操作失败:', error);\n        this.$message.error('时钟操作失败');\n      }\n    },\n    async startTimer() {\n      this.clearTimer();\n      await this.updateTime();\n      this.timer = setInterval(this.updateTime, 1000);\n    },\n    clearTimer() {\n      if (this.timer) {\n        clearInterval(this.timer);\n        this.timer = null;\n      }\n    },\n    async updateTime() {\n      try {\n        const response = await getCurrentTime();\n        this.localTime = response.currentTime;\n        console.log('localTime', this.localTime);\n      } catch (error) {\n        console.error('获取时间失败:', error);\n      }\n    }\n  },\n  beforeDestroy() {\n    this.clearTimer();\n  }\n};","map":{"version":3,"names":["mapGetters","mapActions","startSystemClock","stopSystemClock","getCurrentTime","name","data","timer","localTime","computed","isRunning","isClockRunning","created","updateTime","methods","toggleClock","pauseClock","clearTimer","startClock","startTimer","error","console","$message","setInterval","clearInterval","response","currentTime","log","beforeDestroy"],"sources":["src/components/SystemClock.vue"],"sourcesContent":["<template>\r\n  <div class=\"system-clock\">\r\n    <el-button type=\"primary\" @click=\"toggleClock\">\r\n      {{ isRunning ? '暂停' : '启动' }}\r\n    </el-button>\r\n    <span class=\"clock-display\">{{ currentTime }}</span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { mapGetters, mapActions } from 'vuex'\r\nimport { startSystemClock, stopSystemClock, getCurrentTime } from '@/api/clock'\r\n\r\nexport default {\r\n  name: 'SystemClock',\r\n  data() {\r\n    return {\r\n      timer: null,\r\n      localTime: '00:00:00'\r\n    }\r\n  },\r\n  computed: {\r\n    ...mapGetters([\r\n      'isClockRunning',\r\n      'currentTime'\r\n    ]),\r\n    isRunning() {\r\n      return this.isClockRunning\r\n    }\r\n  },\r\n  created() {\r\n    this.updateTime()\r\n  },\r\n  methods: {\r\n    ...mapActions([\r\n      'startClock',\r\n      'pauseClock'\r\n    ]),\r\n    async toggleClock() {\r\n      try {\r\n        if (this.isRunning) {\r\n          await stopSystemClock()\r\n          this.pauseClock()\r\n          this.clearTimer()\r\n        } else {\r\n          await startSystemClock()\r\n          this.startClock()\r\n          this.startTimer()\r\n        }\r\n      } catch (error) {\r\n        console.error('时钟操作失败:', error)\r\n        this.$message.error('时钟操作失败')\r\n      }\r\n    },\r\n    async startTimer() {\r\n      this.clearTimer()\r\n      await this.updateTime()\r\n      this.timer = setInterval(this.updateTime, 1000)\r\n    },\r\n    clearTimer() {\r\n      if (this.timer) {\r\n        clearInterval(this.timer)\r\n        this.timer = null\r\n      }\r\n    },\r\n    async updateTime() {\r\n      try {\r\n        const response = await getCurrentTime()\r\n        this.localTime = response.currentTime\r\n        console.log('localTime', this.localTime)\r\n      } catch (error) {\r\n        console.error('获取时间失败:', error)\r\n      }\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    this.clearTimer()\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.system-clock {\r\n  position: absolute;\r\n  top: 10px;\r\n  right: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n  z-index: 1;\r\n}\r\n\r\n.clock-display {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-family: monospace;\r\n}\r\n</style> "],"mappings":"AAUA,SAAAA,UAAA,EAAAC,UAAA;AACA,SAAAC,gBAAA,EAAAC,eAAA,EAAAC,cAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,SAAA;IACA;EACA;EACAC,QAAA;IACA,GAAAT,UAAA,EACA,kBACA,cACA;IACAU,UAAA;MACA,YAAAC,cAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACA,GAAAb,UAAA,EACA,cACA,aACA;IACA,MAAAc,YAAA;MACA;QACA,SAAAL,SAAA;UACA,MAAAP,eAAA;UACA,KAAAa,UAAA;UACA,KAAAC,UAAA;QACA;UACA,MAAAf,gBAAA;UACA,KAAAgB,UAAA;UACA,KAAAC,UAAA;QACA;MACA,SAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAD,WAAA;MACA,KAAAF,UAAA;MACA,WAAAJ,UAAA;MACA,KAAAN,KAAA,GAAAgB,WAAA,MAAAV,UAAA;IACA;IACAI,WAAA;MACA,SAAAV,KAAA;QACAiB,aAAA,MAAAjB,KAAA;QACA,KAAAA,KAAA;MACA;IACA;IACA,MAAAM,WAAA;MACA;QACA,MAAAY,QAAA,SAAArB,cAAA;QACA,KAAAI,SAAA,GAAAiB,QAAA,CAAAC,WAAA;QACAL,OAAA,CAAAM,GAAA,mBAAAnB,SAAA;MACA,SAAAY,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;MACA;IACA;EACA;EACAQ,cAAA;IACA,KAAAX,UAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}