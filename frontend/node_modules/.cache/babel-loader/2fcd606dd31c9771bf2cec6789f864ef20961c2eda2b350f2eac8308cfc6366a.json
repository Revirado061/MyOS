{"ast":null,"code":"export default {\n  name: 'Memory',\n  data() {\n    return {\n      totalMemory: 1024,\n      memoryBlocks: [],\n      dialogVisible: false,\n      memoryForm: {\n        processId: 1,\n        size: 100\n      }\n    };\n  },\n  computed: {\n    usedMemory() {\n      return this.memoryBlocks.reduce((sum, block) => sum + block.size, 0);\n    },\n    freeMemory() {\n      return this.totalMemory - this.usedMemory;\n    }\n  },\n  methods: {\n    allocateMemory() {\n      this.dialogVisible = true;\n    },\n    freeMemory() {\n      this.$message.success('执行内存释放');\n    },\n    handleFree(row) {\n      this.$confirm('确认释放该内存块?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.memoryBlocks.findIndex(block => block.id === row.id);\n        if (index !== -1) {\n          this.memoryBlocks.splice(index, 1);\n          this.$message.success('内存释放成功');\n        }\n      }).catch(() => {});\n    },\n    submitAllocation() {\n      if (this.memoryForm.size > this.freeMemory) {\n        this.$message.error('内存不足');\n        return;\n      }\n      const newBlock = {\n        id: this.memoryBlocks.length + 1,\n        processId: this.memoryForm.processId,\n        size: this.memoryForm.size,\n        startAddress: this.calculateStartAddress(),\n        status: '已分配'\n      };\n      this.memoryBlocks.push(newBlock);\n      this.dialogVisible = false;\n      this.$message.success('内存分配成功');\n    },\n    calculateStartAddress() {\n      if (this.memoryBlocks.length === 0) {\n        return '0x0000';\n      }\n      const lastBlock = this.memoryBlocks[this.memoryBlocks.length - 1];\n      const lastAddress = parseInt(lastBlock.startAddress, 16);\n      const newAddress = lastAddress + lastBlock.size;\n      return '0x' + newAddress.toString(16).padStart(4, '0');\n    }\n  }\n};","map":{"version":3,"names":["name","data","totalMemory","memoryBlocks","dialogVisible","memoryForm","processId","size","computed","usedMemory","reduce","sum","block","freeMemory","methods","allocateMemory","$message","success","handleFree","row","$confirm","confirmButtonText","cancelButtonText","type","then","index","findIndex","id","splice","catch","submitAllocation","error","newBlock","length","startAddress","calculateStartAddress","status","push","lastBlock","lastAddress","parseInt","newAddress","toString","padStart"],"sources":["src/views/Memory.vue"],"sourcesContent":["<template>\n  <div class=\"memory-container\">\n    <h2>内存管理</h2>\n\n    <!-- 内存状态概览 -->\n    <el-row :gutter=\"20\" class=\"memory-overview\">\n      <el-col :span=\"8\">\n        <el-card>\n          <div slot=\"header\">总内存</div>\n          <div class=\"memory-value\">1024 MB</div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card>\n          <div slot=\"header\">已使用</div>\n          <div class=\"memory-value\">{{ usedMemory }} MB</div>\n        </el-card>\n      </el-col>\n      <el-col :span=\"8\">\n        <el-card>\n          <div slot=\"header\">可用内存</div>\n          <div class=\"memory-value\">{{ freeMemory }} MB</div>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <!-- 内存分配操作 -->\n    <div class=\"memory-operations\">\n      <el-button type=\"primary\" @click=\"allocateMemory\">分配内存</el-button>\n      <el-button type=\"danger\" @click=\"freeMemory\">释放内存</el-button>\n    </div>\n\n    <!-- 内存使用情况表格 -->\n    <el-table :data=\"memoryBlocks\" style=\"width: 100%; margin-top: 20px\">\n      <el-table-column prop=\"id\" label=\"块ID\" width=\"100\"></el-table-column>\n      <el-table-column prop=\"processId\" label=\"进程ID\" width=\"100\"></el-table-column>\n      <el-table-column prop=\"size\" label=\"大小(MB)\" width=\"120\"></el-table-column>\n      <el-table-column prop=\"startAddress\" label=\"起始地址\" width=\"150\"></el-table-column>\n      <el-table-column prop=\"status\" label=\"状态\" width=\"120\"></el-table-column>\n      <el-table-column label=\"操作\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleFree(scope.row)\">释放</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 分配内存对话框 -->\n    <el-dialog title=\"分配内存\" :visible.sync=\"dialogVisible\" width=\"30%\">\n      <el-form :model=\"memoryForm\" label-width=\"100px\">\n        <el-form-item label=\"进程ID\">\n          <el-input-number v-model=\"memoryForm.processId\" :min=\"1\"></el-input-number>\n        </el-form-item>\n        <el-form-item label=\"内存大小(MB)\">\n          <el-input-number v-model=\"memoryForm.size\" :min=\"1\" :max=\"freeMemory\"></el-input-number>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"submitAllocation\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Memory',\n  data() {\n    return {\n      totalMemory: 1024,\n      memoryBlocks: [],\n      dialogVisible: false,\n      memoryForm: {\n        processId: 1,\n        size: 100\n      }\n    }\n  },\n  computed: {\n    usedMemory() {\n      return this.memoryBlocks.reduce((sum, block) => sum + block.size, 0)\n    },\n    freeMemory() {\n      return this.totalMemory - this.usedMemory\n    }\n  },\n  methods: {\n    allocateMemory() {\n      this.dialogVisible = true\n    },\n    freeMemory() {\n      this.$message.success('执行内存释放')\n    },\n    handleFree(row) {\n      this.$confirm('确认释放该内存块?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const index = this.memoryBlocks.findIndex(block => block.id === row.id)\n        if (index !== -1) {\n          this.memoryBlocks.splice(index, 1)\n          this.$message.success('内存释放成功')\n        }\n      }).catch(() => {})\n    },\n    submitAllocation() {\n      if (this.memoryForm.size > this.freeMemory) {\n        this.$message.error('内存不足')\n        return\n      }\n\n      const newBlock = {\n        id: this.memoryBlocks.length + 1,\n        processId: this.memoryForm.processId,\n        size: this.memoryForm.size,\n        startAddress: this.calculateStartAddress(),\n        status: '已分配'\n      }\n\n      this.memoryBlocks.push(newBlock)\n      this.dialogVisible = false\n      this.$message.success('内存分配成功')\n    },\n    calculateStartAddress() {\n      if (this.memoryBlocks.length === 0) {\n        return '0x0000'\n      }\n      const lastBlock = this.memoryBlocks[this.memoryBlocks.length - 1]\n      const lastAddress = parseInt(lastBlock.startAddress, 16)\n      const newAddress = lastAddress + lastBlock.size\n      return '0x' + newAddress.toString(16).padStart(4, '0')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.memory-container {\n  padding: 20px;\n}\n\n.memory-overview {\n  margin-bottom: 20px;\n}\n\n.memory-value {\n  font-size: 24px;\n  font-weight: bold;\n  color: #409EFF;\n  text-align: center;\n}\n\n.memory-operations {\n  margin: 20px 0;\n}\n\n.memory-operations .el-button {\n  margin-right: 10px;\n}\n</style> "],"mappings":"AAiEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,aAAA;MACAC,UAAA;QACAC,SAAA;QACAC,IAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,YAAAN,YAAA,CAAAO,MAAA,EAAAC,GAAA,EAAAC,KAAA,KAAAD,GAAA,GAAAC,KAAA,CAAAL,IAAA;IACA;IACAM,WAAA;MACA,YAAAX,WAAA,QAAAO,UAAA;IACA;EACA;EACAK,OAAA;IACAC,eAAA;MACA,KAAAX,aAAA;IACA;IACAS,WAAA;MACA,KAAAG,QAAA,CAAAC,OAAA;IACA;IACAC,WAAAC,GAAA;MACA,KAAAC,QAAA;QACAC,iBAAA;QACAC,gBAAA;QACAC,IAAA;MACA,GAAAC,IAAA;QACA,MAAAC,KAAA,QAAAtB,YAAA,CAAAuB,SAAA,CAAAd,KAAA,IAAAA,KAAA,CAAAe,EAAA,KAAAR,GAAA,CAAAQ,EAAA;QACA,IAAAF,KAAA;UACA,KAAAtB,YAAA,CAAAyB,MAAA,CAAAH,KAAA;UACA,KAAAT,QAAA,CAAAC,OAAA;QACA;MACA,GAAAY,KAAA;IACA;IACAC,iBAAA;MACA,SAAAzB,UAAA,CAAAE,IAAA,QAAAM,UAAA;QACA,KAAAG,QAAA,CAAAe,KAAA;QACA;MACA;MAEA,MAAAC,QAAA;QACAL,EAAA,OAAAxB,YAAA,CAAA8B,MAAA;QACA3B,SAAA,OAAAD,UAAA,CAAAC,SAAA;QACAC,IAAA,OAAAF,UAAA,CAAAE,IAAA;QACA2B,YAAA,OAAAC,qBAAA;QACAC,MAAA;MACA;MAEA,KAAAjC,YAAA,CAAAkC,IAAA,CAAAL,QAAA;MACA,KAAA5B,aAAA;MACA,KAAAY,QAAA,CAAAC,OAAA;IACA;IACAkB,sBAAA;MACA,SAAAhC,YAAA,CAAA8B,MAAA;QACA;MACA;MACA,MAAAK,SAAA,QAAAnC,YAAA,MAAAA,YAAA,CAAA8B,MAAA;MACA,MAAAM,WAAA,GAAAC,QAAA,CAAAF,SAAA,CAAAJ,YAAA;MACA,MAAAO,UAAA,GAAAF,WAAA,GAAAD,SAAA,CAAA/B,IAAA;MACA,cAAAkC,UAAA,CAAAC,QAAA,KAAAC,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}