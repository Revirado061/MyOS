{"ast":null,"code":"import { getCurrentPath, createDirectory, changeDirectory, listDirectory, getDirectoryContent, deleteDirectory, createFile, openFile, closeFile, getFileContent, writeFileContent, deleteFile } from '@/api/file';\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [{\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      totalSpace: 8192,\n      usedSpace: 0,\n      freeSpace: 8192,\n      blockSize: 32,\n      diskRows: [],\n      blocksPerRow: 32,\n      currentPath: '/',\n      loading: false\n    };\n  },\n  created() {\n    this.initializeDisk();\n    this.loadDirectoryContent();\n  },\n  methods: {\n    async loadDirectoryContent() {\n      try {\n        this.loading = true;\n        // 获取当前路径\n        const pathRes = await getCurrentPath();\n        this.currentPath = pathRes.data;\n\n        // 获取目录内容\n        const contentRes = await getDirectoryContent();\n        if (contentRes.success) {\n          const {\n            files,\n            directories\n          } = contentRes.content;\n\n          // 更新文件树\n          this.fileTree[0].children = [...directories.map(dir => ({\n            label: dir,\n            type: 'directory',\n            children: []\n          })), ...files.map(file => ({\n            label: file.name,\n            type: 'file',\n            size: file.size,\n            isOpen: file.isOpen,\n            isAllocated: file.isAllocated\n          }))];\n\n          // 更新磁盘使用情况\n          this.usedSpace = files.reduce((sum, file) => sum + file.size, 0);\n          this.freeSpace = this.totalSpace - this.usedSpace;\n        }\n      } catch (error) {\n        this.$message.error('加载目录内容失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async createFileOrDir() {\n      try {\n        this.loading = true;\n        if (this.fileForm.type === 'directory') {\n          const res = await createDirectory({\n            name: this.fileForm.name\n          });\n          if (res.success) {\n            this.$message.success('目录创建成功');\n            await this.loadDirectoryContent();\n          }\n        } else {\n          const res = await createFile({\n            name: this.fileForm.name\n          });\n          if (res.success) {\n            this.$message.success('文件创建成功');\n            await this.loadDirectoryContent();\n          }\n        }\n        this.fileForm.name = '';\n      } catch (error) {\n        this.$message.error('创建失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    async handleNodeClick(data) {\n      if (data.type === 'directory') {\n        try {\n          this.loading = true;\n          const res = await changeDirectory({\n            path: data.label\n          });\n          if (res.success) {\n            await this.loadDirectoryContent();\n          }\n        } catch (error) {\n          this.$message.error('切换目录失败：' + error.message);\n        } finally {\n          this.loading = false;\n        }\n      } else if (data.type === 'file') {\n        try {\n          this.loading = true;\n          const res = await openFile({\n            name: data.label\n          });\n          if (res.success) {\n            const contentRes = await getFileContent({\n              name: data.label\n            });\n            if (contentRes.success) {\n              this.$message.success('文件内容：' + contentRes.content);\n            }\n            await closeFile({\n              name: data.label\n            });\n          }\n        } catch (error) {\n          this.$message.error('读取文件失败：' + error.message);\n        } finally {\n          this.loading = false;\n        }\n      }\n    },\n    async deleteNode(node, data) {\n      try {\n        this.loading = true;\n        if (data.type === 'directory') {\n          const res = await deleteDirectory({\n            name: data.label\n          });\n          if (res.success) {\n            this.$message.success('目录删除成功');\n            await this.loadDirectoryContent();\n          }\n        } else {\n          const res = await deleteFile({\n            name: data.label\n          });\n          if (res.success) {\n            this.$message.success('文件删除成功');\n            await this.loadDirectoryContent();\n          }\n        }\n      } catch (error) {\n        this.$message.error('删除失败：' + error.message);\n      } finally {\n        this.loading = false;\n      }\n    },\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n      this.diskRows = Array(rows).fill().map(() => Array(this.blocksPerRow).fill().map(() => ({\n        status: 'FREE',\n        fileId: null,\n        size: this.blockSize\n      })));\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}MB`;\n      }\n      return '空闲块';\n    }\n  }\n};","map":{"version":3,"names":["getCurrentPath","createDirectory","changeDirectory","listDirectory","getDirectoryContent","deleteDirectory","createFile","openFile","closeFile","getFileContent","writeFileContent","deleteFile","name","data","fileForm","type","size","fileTree","label","children","defaultProps","totalSpace","usedSpace","freeSpace","blockSize","diskRows","blocksPerRow","currentPath","loading","created","initializeDisk","loadDirectoryContent","methods","pathRes","contentRes","success","files","directories","content","map","dir","file","isOpen","isAllocated","reduce","sum","error","$message","message","createFileOrDir","res","handleNodeClick","path","deleteNode","node","totalBlocks","Math","ceil","rows","Array","fill","status","fileId","getBlockTooltip","block"],"sources":["src/components/FileSystem.vue"],"sourcesContent":["<template>\n  <div class=\"file-system\">\n    <div class=\"file-control\">\n      <el-form :model=\"fileForm\" label-width=\"100px\">\n        <el-form-item label=\"名称\">\n          <el-input v-model=\"fileForm.name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"类型\">\n          <el-radio-group v-model=\"fileForm.type\">\n            <el-radio label=\"file\">文件</el-radio>\n            <el-radio label=\"directory\">目录</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item v-if=\"fileForm.type === 'file'\" label=\"文件大小(MB)\" label-width=\"165px\">\n          <el-input-number v-model=\"fileForm.size\" :min=\"1\" :max=\"1024\"></el-input-number>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createFileOrDir\">创建</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"file-tree\">\n        <h3>文件系统结构</h3>\n        <el-tree\n          :data=\"fileTree\"\n          :props=\"defaultProps\"\n          @node-click=\"handleNodeClick\"\n        >\n          <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n            <span>\n              <i :class=\"data.type === 'directory' ? 'el-icon-folder' : 'el-icon-document'\"></i>\n              {{ node.label }}\n            </span>\n            <span>\n              <el-button\n                type=\"text\"\n                size=\"mini\"\n                @click=\"() => deleteNode(node, data)\">\n                删除\n              </el-button>\n            </span>\n          </span>\n        </el-tree>\n      </div>\n    </div>\n\n    <div class=\"disk-blocks\">\n      <h2>磁盘空间分配</h2>\n      <div class=\"disk-info\">\n        <div>总空间: {{ totalSpace }}MB</div>\n        <div>已用空间: {{ usedSpace }}MB</div>\n        <div>空闲空间: {{ freeSpace }}MB</div>\n      </div>\n      \n      <div class=\"disk-blocks-grid\">\n        <div v-for=\"(row, rowIndex) in diskRows\" :key=\"rowIndex\" class=\"disk-row\">\n          <div\n            v-for=\"(block, blockIndex) in row\"\n            :key=\"blockIndex\"\n            class=\"disk-block\"\n            :class=\"{\n              'allocated': block.status === 'ALLOCATED',\n              'free': block.status === 'FREE'\n            }\"\n            :title=\"getBlockTooltip(block)\"\n          ></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport {\n  getCurrentPath,\n  createDirectory,\n  changeDirectory,\n  listDirectory,\n  getDirectoryContent,\n  deleteDirectory,\n  createFile,\n  openFile,\n  closeFile,\n  getFileContent,\n  writeFileContent,\n  deleteFile\n} from '@/api/file'\n\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [{\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      totalSpace: 8192,\n      usedSpace: 0,\n      freeSpace: 8192,\n      blockSize: 32,\n      diskRows: [],\n      blocksPerRow: 32,\n      currentPath: '/',\n      loading: false\n    }\n  },\n  created() {\n    this.initializeDisk()\n    this.loadDirectoryContent()\n  },\n  methods: {\n    async loadDirectoryContent() {\n      try {\n        this.loading = true\n        // 获取当前路径\n        const pathRes = await getCurrentPath()\n        this.currentPath = pathRes.data\n\n        // 获取目录内容\n        const contentRes = await getDirectoryContent()\n        if (contentRes.success) {\n          const { files, directories } = contentRes.content\n          \n          // 更新文件树\n          this.fileTree[0].children = [\n            ...directories.map(dir => ({\n              label: dir,\n              type: 'directory',\n              children: []\n            })),\n            ...files.map(file => ({\n              label: file.name,\n              type: 'file',\n              size: file.size,\n              isOpen: file.isOpen,\n              isAllocated: file.isAllocated\n            }))\n          ]\n\n          // 更新磁盘使用情况\n          this.usedSpace = files.reduce((sum, file) => sum + file.size, 0)\n          this.freeSpace = this.totalSpace - this.usedSpace\n        }\n      } catch (error) {\n        this.$message.error('加载目录内容失败：' + error.message)\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async createFileOrDir() {\n      try {\n        this.loading = true\n        if (this.fileForm.type === 'directory') {\n          const res = await createDirectory({ name: this.fileForm.name })\n          if (res.success) {\n            this.$message.success('目录创建成功')\n            await this.loadDirectoryContent()\n          }\n        } else {\n          const res = await createFile({ name: this.fileForm.name })\n          if (res.success) {\n            this.$message.success('文件创建成功')\n            await this.loadDirectoryContent()\n          }\n        }\n        this.fileForm.name = ''\n      } catch (error) {\n        this.$message.error('创建失败：' + error.message)\n      } finally {\n        this.loading = false\n      }\n    },\n\n    async handleNodeClick(data) {\n      if (data.type === 'directory') {\n        try {\n          this.loading = true\n          const res = await changeDirectory({ path: data.label })\n          if (res.success) {\n            await this.loadDirectoryContent()\n          }\n        } catch (error) {\n          this.$message.error('切换目录失败：' + error.message)\n        } finally {\n          this.loading = false\n        }\n      } else if (data.type === 'file') {\n        try {\n          this.loading = true\n          const res = await openFile({ name: data.label })\n          if (res.success) {\n            const contentRes = await getFileContent({ name: data.label })\n            if (contentRes.success) {\n              this.$message.success('文件内容：' + contentRes.content)\n            }\n            await closeFile({ name: data.label })\n          }\n        } catch (error) {\n          this.$message.error('读取文件失败：' + error.message)\n        } finally {\n          this.loading = false\n        }\n      }\n    },\n\n    async deleteNode(node, data) {\n      try {\n        this.loading = true\n        if (data.type === 'directory') {\n          const res = await deleteDirectory({ name: data.label })\n          if (res.success) {\n            this.$message.success('目录删除成功')\n            await this.loadDirectoryContent()\n          }\n        } else {\n          const res = await deleteFile({ name: data.label })\n          if (res.success) {\n            this.$message.success('文件删除成功')\n            await this.loadDirectoryContent()\n          }\n        }\n      } catch (error) {\n        this.$message.error('删除失败：' + error.message)\n      } finally {\n        this.loading = false\n      }\n    },\n\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize)\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\n      \n      this.diskRows = Array(rows).fill().map(() => \n        Array(this.blocksPerRow).fill().map(() => ({\n          status: 'FREE',\n          fileId: null,\n          size: this.blockSize\n        }))\n      )\n    },\n\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}MB`\n      }\n      return '空闲块'\n    }\n  }\n}\n</script>\n\n<style scoped>\n.file-system {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  height: calc(100vh - 120px); /* 减去头部和padding的高度 */\n}\n\n.file-control {\n  flex: 4;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid #dcdfe6;\n  padding-right: 20px;\n  font-size: 16px;\n}\n\n/* 添加表单相关样式 */\n:deep(.el-form-item__label) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input__inner) {\n  font-size: 16px !important;\n}\n\n:deep(.el-radio__label) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input-number__decrease),\n:deep(.el-input-number__increase) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input-number__input) {\n  font-size: 16px !important;\n}\n\n:deep(.el-button) {\n  font-size: 16px !important;\n}\n\n.file-tree {\n  margin-top: 20px;\n  flex: 1;\n  overflow-y: auto;\n}\n\n.disk-blocks {\n  flex: 6;\n  display: flex;\n  flex-direction: column;\n}\n\n.disk-info {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 15px;\n  font-size: 16px;\n}\n\n.disk-blocks-grid {\n  border: 1px solid #dcdfe6;\n  padding: 15px;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow-y: auto;\n  max-height: calc(100vh - 250px);\n}\n\n.disk-row {\n  display: flex;\n  gap: 2px;\n  margin-bottom: 2px;\n  justify-content: center;\n}\n\n.disk-block {\n  width: 28px;\n  height: 28px;\n  border: 1px solid #dcdfe6;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.disk-block:hover {\n  transform: scale(1.1);\n  z-index: 1;\n}\n\n.disk-block.allocated {\n  background-color: #409eff;\n}\n\n.disk-block.free {\n  background-color: #f0f9eb;\n}\n\n.custom-tree-node {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  padding-right: 8px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}