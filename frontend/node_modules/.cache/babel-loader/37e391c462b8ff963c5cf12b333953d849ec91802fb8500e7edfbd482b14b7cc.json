{"ast":null,"code":"export default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [{\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      totalSpace: 1024,\n      usedSpace: 0,\n      freeSpace: 1024,\n      blockSize: 4,\n      diskRows: [],\n      blocksPerRow: 16\n    };\n  },\n  created() {\n    this.initializeDisk();\n  },\n  methods: {\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n      this.diskRows = Array(rows).fill().map(() => Array(this.blocksPerRow).fill().map(() => ({\n        status: 'FREE',\n        fileId: null,\n        size: this.blockSize\n      })));\n    },\n    createFileOrDir() {\n      const newNode = {\n        label: this.fileForm.name,\n        type: this.fileForm.type,\n        children: this.fileForm.type === 'directory' ? [] : undefined,\n        size: this.fileForm.type === 'file' ? this.fileForm.size : 0\n      };\n      if (this.fileForm.type === 'file') {\n        this.allocateDiskSpace(newNode);\n      }\n      this.fileTree[0].children.push(newNode);\n      this.fileForm.name = '';\n    },\n    deleteNode(node, data) {\n      if (data.type === 'file') {\n        this.freeDiskSpace(data);\n      }\n      const parent = node.parent;\n      const children = parent.data.children || parent.data;\n      const index = children.findIndex(d => d.label === data.label);\n      children.splice(index, 1);\n    },\n    handleNodeClick(data) {\n      console.log(data);\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}KB`;\n      }\n      return '空闲块';\n    },\n    allocateDiskSpace(file) {\n      const blocksNeeded = Math.ceil(file.size / this.blockSize);\n      let allocatedBlocks = 0;\n      for (let row of this.diskRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED';\n            block.fileId = file.label;\n            allocatedBlocks++;\n            if (allocatedBlocks === blocksNeeded) {\n              this.usedSpace += file.size;\n              this.freeSpace -= file.size;\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    freeDiskSpace(file) {\n      let freedSize = 0;\n      for (let row of this.diskRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.fileId === file.label) {\n            block.status = 'FREE';\n            block.fileId = null;\n            freedSize += block.size;\n          }\n        }\n      }\n      this.usedSpace -= freedSize;\n      this.freeSpace += freedSize;\n    }\n  }\n};","map":{"version":3,"names":["name","data","fileForm","type","size","fileTree","label","children","defaultProps","totalSpace","usedSpace","freeSpace","blockSize","diskRows","blocksPerRow","created","initializeDisk","methods","totalBlocks","Math","ceil","rows","Array","fill","map","status","fileId","createFileOrDir","newNode","undefined","allocateDiskSpace","push","deleteNode","node","freeDiskSpace","parent","index","findIndex","d","splice","handleNodeClick","console","log","getBlockTooltip","block","file","blocksNeeded","allocatedBlocks","row","freedSize"],"sources":["src/components/FileSystem.vue"],"sourcesContent":["<template>\r\n  <div class=\"file-system\">\r\n    <div class=\"file-control\">\r\n      <el-form :model=\"fileForm\" label-width=\"100px\">\r\n        <el-form-item label=\"名称\">\r\n          <el-input v-model=\"fileForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\">\r\n          <el-radio-group v-model=\"fileForm.type\">\r\n            <el-radio label=\"file\">文件</el-radio>\r\n            <el-radio label=\"directory\">目录</el-radio>\r\n          </el-radio-group>\r\n        </el-form-item>\r\n        <el-form-item v-if=\"fileForm.type === 'file'\" label=\"文件大小(KB)\">\r\n          <el-input-number v-model=\"fileForm.size\" :min=\"1\" :max=\"1024\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"createFileOrDir\">创建</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div class=\"file-tree\">\r\n        <h3>文件系统结构</h3>\r\n        <el-tree\r\n          :data=\"fileTree\"\r\n          :props=\"defaultProps\"\r\n          @node-click=\"handleNodeClick\"\r\n        >\r\n          <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n            <span>\r\n              <i :class=\"data.type === 'directory' ? 'el-icon-folder' : 'el-icon-document'\"></i>\r\n              {{ node.label }}\r\n            </span>\r\n            <span>\r\n              <el-button\r\n                type=\"text\"\r\n                size=\"mini\"\r\n                @click=\"() => deleteNode(node, data)\">\r\n                删除\r\n              </el-button>\r\n            </span>\r\n          </span>\r\n        </el-tree>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"disk-blocks\">\r\n      <h3>磁盘空间分配</h3>\r\n      <div class=\"disk-info\">\r\n        <div>总空间: {{ totalSpace }}KB</div>\r\n        <div>已用空间: {{ usedSpace }}KB</div>\r\n        <div>空闲空间: {{ freeSpace }}KB</div>\r\n      </div>\r\n      \r\n      <div class=\"disk-blocks-grid\">\r\n        <div v-for=\"(row, rowIndex) in diskRows\" :key=\"rowIndex\" class=\"disk-row\">\r\n          <div\r\n            v-for=\"(block, blockIndex) in row\"\r\n            :key=\"blockIndex\"\r\n            class=\"disk-block\"\r\n            :class=\"{\r\n              'allocated': block.status === 'ALLOCATED',\r\n              'free': block.status === 'FREE'\r\n            }\"\r\n            :title=\"getBlockTooltip(block)\"\r\n          ></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'FileSystem',\r\n  data() {\r\n    return {\r\n      fileForm: {\r\n        name: '',\r\n        type: 'file',\r\n        size: 1\r\n      },\r\n      fileTree: [{\r\n        label: '根目录',\r\n        type: 'directory',\r\n        children: []\r\n      }],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'label'\r\n      },\r\n      totalSpace: 1024,\r\n      usedSpace: 0,\r\n      freeSpace: 1024,\r\n      blockSize: 4,\r\n      diskRows: [],\r\n      blocksPerRow: 16\r\n    }\r\n  },\r\n  created() {\r\n    this.initializeDisk()\r\n  },\r\n  methods: {\r\n    initializeDisk() {\r\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize)\r\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\r\n      \r\n      this.diskRows = Array(rows).fill().map(() => \r\n        Array(this.blocksPerRow).fill().map(() => ({\r\n          status: 'FREE',\r\n          fileId: null,\r\n          size: this.blockSize\r\n        }))\r\n      )\r\n    },\r\n    createFileOrDir() {\r\n      const newNode = {\r\n        label: this.fileForm.name,\r\n        type: this.fileForm.type,\r\n        children: this.fileForm.type === 'directory' ? [] : undefined,\r\n        size: this.fileForm.type === 'file' ? this.fileForm.size : 0\r\n      }\r\n      \r\n      if (this.fileForm.type === 'file') {\r\n        this.allocateDiskSpace(newNode)\r\n      }\r\n      \r\n      this.fileTree[0].children.push(newNode)\r\n      this.fileForm.name = ''\r\n    },\r\n    deleteNode(node, data) {\r\n      if (data.type === 'file') {\r\n        this.freeDiskSpace(data)\r\n      }\r\n      const parent = node.parent\r\n      const children = parent.data.children || parent.data\r\n      const index = children.findIndex(d => d.label === data.label)\r\n      children.splice(index, 1)\r\n    },\r\n    handleNodeClick(data) {\r\n      console.log(data)\r\n    },\r\n    getBlockTooltip(block) {\r\n      if (block.status === 'ALLOCATED') {\r\n        return `文件: ${block.fileId}\\n大小: ${block.size}KB`\r\n      }\r\n      return '空闲块'\r\n    },\r\n    allocateDiskSpace(file) {\r\n      const blocksNeeded = Math.ceil(file.size / this.blockSize)\r\n      let allocatedBlocks = 0\r\n      \r\n      for (let row of this.diskRows) {\r\n        for (let block of row) {\r\n          if (block.status === 'FREE') {\r\n            block.status = 'ALLOCATED'\r\n            block.fileId = file.label\r\n            allocatedBlocks++\r\n            \r\n            if (allocatedBlocks === blocksNeeded) {\r\n              this.usedSpace += file.size\r\n              this.freeSpace -= file.size\r\n              return true\r\n            }\r\n          }\r\n        }\r\n      }\r\n      return false\r\n    },\r\n    freeDiskSpace(file) {\r\n      let freedSize = 0\r\n      \r\n      for (let row of this.diskRows) {\r\n        for (let block of row) {\r\n          if (block.status === 'ALLOCATED' && block.fileId === file.label) {\r\n            block.status = 'FREE'\r\n            block.fileId = null\r\n            freedSize += block.size\r\n          }\r\n        }\r\n      }\r\n      \r\n      this.usedSpace -= freedSize\r\n      this.freeSpace += freedSize\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.file-system {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.file-control {\r\n  width: 300px;\r\n}\r\n\r\n.file-tree {\r\n  margin-top: 20px;\r\n}\r\n\r\n.disk-blocks {\r\n  flex: 1;\r\n}\r\n\r\n.disk-info {\r\n  display: flex;\r\n  gap: 20px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.disk-blocks-grid {\r\n  border: 1px solid #dcdfe6;\r\n  padding: 10px;\r\n  background-color: #f5f7fa;\r\n}\r\n\r\n.disk-row {\r\n  display: flex;\r\n  gap: 2px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.disk-block {\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid #dcdfe6;\r\n  cursor: pointer;\r\n}\r\n\r\n.disk-block.allocated {\r\n  background-color: #67c23a;\r\n}\r\n\r\n.disk-block.free {\r\n  background-color: #f0f9eb;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 8px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}