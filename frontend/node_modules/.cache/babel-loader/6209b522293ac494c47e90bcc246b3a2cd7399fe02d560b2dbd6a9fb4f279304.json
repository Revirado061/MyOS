{"ast":null,"code":"export default {\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      interrupts: [],\n      timer: null\n    };\n  },\n  computed: {\n    queueMap() {\n      return {\n        '就绪队列': this.readyQueue,\n        '运行队列': this.runningQueue,\n        '阻塞队列': this.blockedQueue,\n        '终止队列': this.terminatedQueue\n      };\n    }\n  },\n  methods: {\n    async createProcess() {\n      // ...\n    },\n    async fetchProcesses() {\n      // ...\n    },\n    getInterruptType(type) {\n      switch (type) {\n        case 'INFO':\n          return 'info';\n        case 'WARNING':\n          return 'warning';\n        case 'ERROR':\n          return 'danger';\n        default:\n          return '';\n      }\n    },\n    tagType(queueName) {\n      return {\n        '就绪队列': '',\n        '运行队列': 'success',\n        '阻塞队列': 'warning',\n        '终止队列': 'info'\n      }[queueName] || '';\n    }\n  },\n  created() {\n    this.fetchProcesses();\n    this.timer = setInterval(this.fetchProcesses, 1000);\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"names":["data","processForm","name","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","interrupts","timer","computed","queueMap","methods","createProcess","fetchProcesses","getInterruptType","type","tagType","queueName","created","setInterval","beforeDestroy","clearInterval"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <!-- 左侧 6 -->\n    <div class=\"left-panel\">\n      <!-- 表单区域 -->\n      <el-form :model=\"processForm\" label-width=\"100px\" class=\"process-form\">\n        <el-row :gutter=\"20\">\n          <el-col :span=\"6\">\n            <el-form-item label=\"进程名称\">\n              <el-input v-model=\"processForm.name\" placeholder=\"请输入\"></el-input>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"6\">\n            <el-form-item label=\"优先级\">\n              <el-select v-model=\"processForm.priority\">\n                <el-option label=\"高\" :value=\"1\"></el-option>\n                <el-option label=\"中\" :value=\"2\"></el-option>\n                <el-option label=\"低\" :value=\"3\"></el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"6\">\n            <el-form-item label=\"内存大小\">\n              <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\"></el-input-number>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"6\">\n            <el-button type=\"primary\" @click=\"createProcess\" style=\"margin-top: 32px;\">创建进程</el-button>\n          </el-col>\n        </el-row>\n      </el-form>\n\n      <!-- 四个队列 -->\n      <el-row :gutter=\"20\" class=\"queue-row\">\n        <el-col :span=\"12\" v-for=\"(queue, title) in queueMap\" :key=\"title\">\n          <div class=\"queue-container\">\n            <h3>{{ title }}</h3>\n            <div class=\"queue\">\n              <el-tag\n                v-for=\"process in queue\"\n                :key=\"process.id\"\n                class=\"process-tag\"\n                :type=\"tagType(title)\">\n                {{ process.name }}\n              </el-tag>\n            </div>\n          </div>\n        </el-col>\n      </el-row>\n\n      <!-- 滚动列表（可根据需要替换为表格或详细信息） -->\n      <div class=\"process-list\">\n        <h3>进程列表</h3>\n        <div class=\"scroll-box\">\n          <p v-for=\"process in [...readyQueue, ...runningQueue, ...blockedQueue, ...terminatedQueue]\" :key=\"process.id\">\n            {{ process.name }} - 状态：{{ process.state }}\n          </p>\n        </div>\n      </div>\n    </div>\n\n    <!-- 右侧 4 -->\n    <div class=\"right-panel\">\n      <!-- 内存管理视图 -->\n      <div class=\"memory-view\">\n        <h3>内存管理</h3>\n        <div class=\"memory-grid\">\n          <!-- 模拟 10x24+16 块状布局 -->\n          <div\n            v-for=\"i in 256\"\n            :key=\"i\"\n            class=\"memory-block\"\n          ></div>\n        </div>\n      </div>\n\n      <!-- 中断处理 -->\n      <div class=\"interrupt-handling\">\n        <h3>中断处理</h3>\n        <div class=\"interrupt-list\">\n          <el-timeline>\n            <el-timeline-item\n              v-for=\"(interrupt, index) in interrupts\"\n              :key=\"index\"\n              :type=\"getInterruptType(interrupt.type)\"\n              :timestamp=\"interrupt.time\">\n              {{ interrupt.message }}\n            </el-timeline-item>\n          </el-timeline>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      interrupts: [],\n      timer: null\n    }\n  },\n  computed: {\n    queueMap() {\n      return {\n        '就绪队列': this.readyQueue,\n        '运行队列': this.runningQueue,\n        '阻塞队列': this.blockedQueue,\n        '终止队列': this.terminatedQueue\n      }\n    }\n  },\n  methods: {\n    async createProcess() {\n      // ...\n    },\n    async fetchProcesses() {\n      // ...\n    },\n    getInterruptType(type) {\n      switch (type) {\n        case 'INFO': return 'info'\n        case 'WARNING': return 'warning'\n        case 'ERROR': return 'danger'\n        default: return ''\n      }\n    },\n    tagType(queueName) {\n      return {\n        '就绪队列': '',\n        '运行队列': 'success',\n        '阻塞队列': 'warning',\n        '终止队列': 'info'\n      }[queueName] || ''\n    }\n  },\n  created() {\n    this.fetchProcesses()\n    this.timer = setInterval(this.fetchProcesses, 1000)\n  },\n  beforeDestroy() {\n    clearInterval(this.timer)\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  height: 100%;\n}\n\n/* 左侧 6份 */\n.left-panel {\n  flex: 6;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n/* 右侧 4份 */\n.right-panel {\n  flex: 4;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.process-form {\n  background: #fff;\n  padding: 10px;\n  border: 1px solid #ebeef5;\n  border-radius: 4px;\n}\n\n.queue-row {\n  margin-top: 10px;\n}\n\n.queue-container {\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  padding: 10px;\n  background: #f9f9f9;\n}\n\n.queue {\n  min-height: 60px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 8px;\n}\n\n.process-tag {\n  margin: 2px;\n}\n\n.process-list {\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 10px;\n  background: #fff;\n  flex-grow: 1;\n}\n\n.scroll-box {\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n/* 内存管理视图样式 */\n.memory-view {\n  border: 1px solid #ccc;\n  padding: 10px;\n  border-radius: 4px;\n  background: #fff;\n}\n\n.memory-grid {\n  display: grid;\n  grid-template-columns: repeat(24, 1fr);\n  gap: 2px;\n  margin-top: 10px;\n}\n\n.memory-block {\n  width: 100%;\n  aspect-ratio: 1;\n  background-color: #d3d3d3;\n  border: 1px solid #aaa;\n}\n\n/* 中断处理 */\n.interrupt-handling {\n  border: 1px solid #ccc;\n  padding: 10px;\n  border-radius: 4px;\n  background: #fff;\n}\n\n.interrupt-list {\n  max-height: 200px;\n  overflow-y: auto;\n}\n</style>\n"],"mappings":"AAgGA;EACAA,KAAA;IACA;MACAC,WAAA;QACAC,IAAA;QACAC,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,eAAA;MACAC,UAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACAC,SAAA;MACA;QACA,aAAAP,UAAA;QACA,aAAAC,YAAA;QACA,aAAAC,YAAA;QACA,aAAAC;MACA;IACA;EACA;EACAK,OAAA;IACA,MAAAC,cAAA;MACA;IAAA,CACA;IACA,MAAAC,eAAA;MACA;IAAA,CACA;IACAC,iBAAAC,IAAA;MACA,QAAAA,IAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;QACA;UAAA;MACA;IACA;IACAC,QAAAC,SAAA;MACA;QACA;QACA;QACA;QACA;MACA,EAAAA,SAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAL,cAAA;IACA,KAAAL,KAAA,GAAAW,WAAA,MAAAN,cAAA;EACA;EACAO,cAAA;IACAC,aAAA,MAAAb,KAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}