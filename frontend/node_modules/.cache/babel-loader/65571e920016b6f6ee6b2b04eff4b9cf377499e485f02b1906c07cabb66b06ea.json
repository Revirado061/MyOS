{"ast":null,"code":"export default {\n  name: 'SystemClock',\n  data() {\n    return {\n      isRunning: false,\n      currentTime: '00:00:00',\n      timer: null,\n      seconds: 0\n    };\n  },\n  methods: {\n    toggleClock() {\n      if (this.isRunning) {\n        this.pauseClock();\n      } else {\n        this.startClock();\n      }\n    },\n    startClock() {\n      this.isRunning = true;\n      this.timer = setInterval(() => {\n        this.seconds++;\n        this.updateDisplay();\n      }, 1000);\n    },\n    pauseClock() {\n      this.isRunning = false;\n      clearInterval(this.timer);\n    },\n    updateDisplay() {\n      const hours = Math.floor(this.seconds / 3600);\n      const minutes = Math.floor(this.seconds % 3600 / 60);\n      const secs = this.seconds % 60;\n      this.currentTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`;\n    }\n  },\n  beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n};","map":{"version":3,"names":["name","data","isRunning","currentTime","timer","seconds","methods","toggleClock","pauseClock","startClock","setInterval","updateDisplay","clearInterval","hours","Math","floor","minutes","secs","String","padStart","beforeDestroy"],"sources":["src/components/SystemClock.vue"],"sourcesContent":["<template>\r\n  <div class=\"system-clock\">\r\n    <el-button type=\"primary\" @click=\"toggleClock\">\r\n      {{ isRunning ? '暂停' : '启动' }}\r\n    </el-button>\r\n    <span class=\"clock-display\">{{ currentTime }}</span>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'SystemClock',\r\n  data() {\r\n    return {\r\n      isRunning: false,\r\n      currentTime: '00:00:00',\r\n      timer: null,\r\n      seconds: 0\r\n    }\r\n  },\r\n  methods: {\r\n    toggleClock() {\r\n      if (this.isRunning) {\r\n        this.pauseClock()\r\n      } else {\r\n        this.startClock()\r\n      }\r\n    },\r\n    startClock() {\r\n      this.isRunning = true\r\n      this.timer = setInterval(() => {\r\n        this.seconds++\r\n        this.updateDisplay()\r\n      }, 1000)\r\n    },\r\n    pauseClock() {\r\n      this.isRunning = false\r\n      clearInterval(this.timer)\r\n    },\r\n    updateDisplay() {\r\n      const hours = Math.floor(this.seconds / 3600)\r\n      const minutes = Math.floor((this.seconds % 3600) / 60)\r\n      const secs = this.seconds % 60\r\n      this.currentTime = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(secs).padStart(2, '0')}`\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer)\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.system-clock {\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 10px;\r\n}\r\n\r\n.clock-display {\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  font-family: monospace;\r\n}\r\n</style> "],"mappings":"AAUA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,SAAA;MACAC,WAAA;MACAC,KAAA;MACAC,OAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA;MACA,SAAAL,SAAA;QACA,KAAAM,UAAA;MACA;QACA,KAAAC,UAAA;MACA;IACA;IACAA,WAAA;MACA,KAAAP,SAAA;MACA,KAAAE,KAAA,GAAAM,WAAA;QACA,KAAAL,OAAA;QACA,KAAAM,aAAA;MACA;IACA;IACAH,WAAA;MACA,KAAAN,SAAA;MACAU,aAAA,MAAAR,KAAA;IACA;IACAO,cAAA;MACA,MAAAE,KAAA,GAAAC,IAAA,CAAAC,KAAA,MAAAV,OAAA;MACA,MAAAW,OAAA,GAAAF,IAAA,CAAAC,KAAA,MAAAV,OAAA;MACA,MAAAY,IAAA,QAAAZ,OAAA;MACA,KAAAF,WAAA,MAAAe,MAAA,CAAAL,KAAA,EAAAM,QAAA,YAAAD,MAAA,CAAAF,OAAA,EAAAG,QAAA,YAAAD,MAAA,CAAAD,IAAA,EAAAE,QAAA;IACA;EACA;EACAC,cAAA;IACA,SAAAhB,KAAA;MACAQ,aAAA,MAAAR,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}