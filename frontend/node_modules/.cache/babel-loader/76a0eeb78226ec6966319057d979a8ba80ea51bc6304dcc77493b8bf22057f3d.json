{"ast":null,"code":"import { processApi } from '@/api';\nexport default {\n  name: 'Process',\n  data() {\n    return {\n      processList: [],\n      dialogVisible: false,\n      processForm: {\n        name: '',\n        priority: 'medium',\n        memorySize: 100\n      },\n      currentProcess: null\n    };\n  },\n  created() {\n    this.fetchProcesses();\n    this.fetchCurrentProcess();\n  },\n  methods: {\n    async fetchProcesses() {\n      try {\n        const response = await processApi.getAllProcesses();\n        this.processList = response;\n      } catch (error) {\n        this.$message.error('获取进程列表失败');\n      }\n    },\n    async fetchCurrentProcess() {\n      try {\n        const response = await processApi.getCurrentProcess();\n        this.currentProcess = response;\n      } catch (error) {\n        this.$message.error('获取当前进程失败');\n      }\n    },\n    createProcess() {\n      this.dialogVisible = true;\n    },\n    scheduleProcess() {\n      this.$message.success('执行进程调度');\n    },\n    blockProcess() {\n      this.$message.warning('执行进程阻塞');\n    },\n    wakeupProcess() {\n      this.$message.info('执行进程唤醒');\n    },\n    synchronizeProcess() {\n      this.$message.success('执行进程同步');\n    },\n    handleEdit(row) {\n      console.log('编辑进程', row);\n    },\n    async handleDelete(row) {\n      try {\n        await this.$confirm('确认删除该进程?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        // 这里需要添加删除进程的API调用\n        this.$message.success('删除成功');\n        this.fetchProcesses();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败');\n        }\n      }\n    },\n    async submitProcess() {\n      try {\n        const processData = {\n          name: this.processForm.name,\n          priority: this.getPriorityValue(this.processForm.priority),\n          memorySize: this.processForm.memorySize\n        };\n        await processApi.createProcess(processData);\n        this.$message.success('创建进程成功');\n        this.dialogVisible = false;\n        this.fetchProcesses();\n        this.resetForm();\n      } catch (error) {\n        this.$message.error('创建进程失败');\n      }\n    },\n    getPriorityValue(priority) {\n      const priorityMap = {\n        'high': 1,\n        'medium': 2,\n        'low': 3\n      };\n      return priorityMap[priority];\n    },\n    resetForm() {\n      this.processForm = {\n        name: '',\n        priority: 'medium',\n        memorySize: 100\n      };\n    }\n  }\n};","map":{"version":3,"names":["processApi","name","data","processList","dialogVisible","processForm","priority","memorySize","currentProcess","created","fetchProcesses","fetchCurrentProcess","methods","response","getAllProcesses","error","$message","getCurrentProcess","createProcess","scheduleProcess","success","blockProcess","warning","wakeupProcess","info","synchronizeProcess","handleEdit","row","console","log","handleDelete","$confirm","confirmButtonText","cancelButtonText","type","submitProcess","processData","getPriorityValue","resetForm","priorityMap"],"sources":["src/views/Process.vue"],"sourcesContent":["<template>\r\n  <div class=\"process-container\">\r\n    <h2>进程管理</h2>\r\n\r\n    <!-- 进程操作按钮 -->\r\n    <div class=\"operation-buttons\">\r\n      <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\r\n      <el-button type=\"success\" @click=\"scheduleProcess\">进程调度</el-button>\r\n      <el-button type=\"warning\" @click=\"blockProcess\">进程阻塞</el-button>\r\n      <el-button type=\"info\" @click=\"wakeupProcess\">进程唤醒</el-button>\r\n      <el-button type=\"danger\" @click=\"synchronizeProcess\">进程同步</el-button>\r\n    </div>\r\n\r\n    <!-- 进程列表 -->\r\n    <el-table :data=\"processList\" style=\"width: 100%; margin-top: 20px\">\r\n      <el-table-column prop=\"pid\" label=\"进程ID\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"name\" label=\"进程名称\" width=\"150\"></el-table-column>\r\n      <el-table-column prop=\"status\" label=\"状态\" width=\"120\"></el-table-column>\r\n      <el-table-column prop=\"priority\" label=\"优先级\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"memory\" label=\"内存占用\" width=\"120\"></el-table-column>\r\n      <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\"></el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"mini\" @click=\"handleEdit(scope.row)\">编辑</el-button>\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(scope.row)\">删除</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 创建进程对话框 -->\r\n    <el-dialog title=\"创建新进程\" :visible.sync=\"dialogVisible\" width=\"30%\">\r\n      <el-form :model=\"processForm\" label-width=\"100px\">\r\n        <el-form-item label=\"进程名称\">\r\n          <el-input v-model=\"processForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"优先级\">\r\n          <el-select v-model=\"processForm.priority\" placeholder=\"请选择优先级\">\r\n            <el-option label=\"1\" value=\"high\"></el-option>\r\n            <el-option label=\"2\" value=\"medium\"></el-option>\r\n            <el-option label=\"3\" value=\"low\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"内存需求\">\r\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1000\"></el-input-number>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitProcess\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { processApi } from '@/api'\r\n\r\nexport default {\r\n  name: 'Process',\r\n  data() {\r\n    return {\r\n      processList: [],\r\n      dialogVisible: false,\r\n      processForm: {\r\n        name: '',\r\n        priority: 'medium',\r\n        memorySize: 100\r\n      },\r\n      currentProcess: null\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchProcesses()\r\n    this.fetchCurrentProcess()\r\n  },\r\n  methods: {\r\n    async fetchProcesses() {\r\n      try {\r\n        const response = await processApi.getAllProcesses()\r\n        this.processList = response\r\n      } catch (error) {\r\n        this.$message.error('获取进程列表失败')\r\n      }\r\n    },\r\n    async fetchCurrentProcess() {\r\n      try {\r\n        const response = await processApi.getCurrentProcess()\r\n        this.currentProcess = response\r\n      } catch (error) {\r\n        this.$message.error('获取当前进程失败')\r\n      }\r\n    },\r\n    createProcess() {\r\n      this.dialogVisible = true\r\n    },\r\n    scheduleProcess() {\r\n      this.$message.success('执行进程调度')\r\n    },\r\n    blockProcess() {\r\n      this.$message.warning('执行进程阻塞')\r\n    },\r\n    wakeupProcess() {\r\n      this.$message.info('执行进程唤醒')\r\n    },\r\n    synchronizeProcess() {\r\n      this.$message.success('执行进程同步')\r\n    },\r\n    handleEdit(row) {\r\n      console.log('编辑进程', row)\r\n    },\r\n    async handleDelete(row) {\r\n      try {\r\n        await this.$confirm('确认删除该进程?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        // 这里需要添加删除进程的API调用\r\n        this.$message.success('删除成功')\r\n        this.fetchProcesses()\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败')\r\n        }\r\n      }\r\n    },\r\n    async submitProcess() {\r\n      try {\r\n        const processData = {\r\n          name: this.processForm.name,\r\n          priority: this.getPriorityValue(this.processForm.priority),\r\n          memorySize: this.processForm.memorySize\r\n        }\r\n        await processApi.createProcess(processData)\r\n        this.$message.success('创建进程成功')\r\n        this.dialogVisible = false\r\n        this.fetchProcesses()\r\n        this.resetForm()\r\n      } catch (error) {\r\n        this.$message.error('创建进程失败')\r\n      }\r\n    },\r\n    getPriorityValue(priority) {\r\n      const priorityMap = {\r\n        'high': 1,\r\n        'medium': 2,\r\n        'low': 3\r\n      }\r\n      return priorityMap[priority]\r\n    },\r\n    resetForm() {\r\n      this.processForm = {\r\n        name: '',\r\n        priority: 'medium',\r\n        memorySize: 100\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.process-container {\r\n  padding: 20px;\r\n}\r\n\r\n.operation-buttons {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.operation-buttons .el-button {\r\n  margin-right: 10px;\r\n}\r\n</style>\r\n"],"mappings":"AAuDA,SAAAA,UAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,aAAA;MACAC,WAAA;QACAJ,IAAA;QACAK,QAAA;QACAC,UAAA;MACA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,cAAA;IACA,KAAAC,mBAAA;EACA;EACAC,OAAA;IACA,MAAAF,eAAA;MACA;QACA,MAAAG,QAAA,SAAAb,UAAA,CAAAc,eAAA;QACA,KAAAX,WAAA,GAAAU,QAAA;MACA,SAAAE,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACA,MAAAJ,oBAAA;MACA;QACA,MAAAE,QAAA,SAAAb,UAAA,CAAAiB,iBAAA;QACA,KAAAT,cAAA,GAAAK,QAAA;MACA,SAAAE,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAG,cAAA;MACA,KAAAd,aAAA;IACA;IACAe,gBAAA;MACA,KAAAH,QAAA,CAAAI,OAAA;IACA;IACAC,aAAA;MACA,KAAAL,QAAA,CAAAM,OAAA;IACA;IACAC,cAAA;MACA,KAAAP,QAAA,CAAAQ,IAAA;IACA;IACAC,mBAAA;MACA,KAAAT,QAAA,CAAAI,OAAA;IACA;IACAM,WAAAC,GAAA;MACAC,OAAA,CAAAC,GAAA,SAAAF,GAAA;IACA;IACA,MAAAG,aAAAH,GAAA;MACA;QACA,WAAAI,QAAA;UACAC,iBAAA;UACAC,gBAAA;UACAC,IAAA;QACA;QACA;QACA,KAAAlB,QAAA,CAAAI,OAAA;QACA,KAAAV,cAAA;MACA,SAAAK,KAAA;QACA,IAAAA,KAAA;UACA,KAAAC,QAAA,CAAAD,KAAA;QACA;MACA;IACA;IACA,MAAAoB,cAAA;MACA;QACA,MAAAC,WAAA;UACAnC,IAAA,OAAAI,WAAA,CAAAJ,IAAA;UACAK,QAAA,OAAA+B,gBAAA,MAAAhC,WAAA,CAAAC,QAAA;UACAC,UAAA,OAAAF,WAAA,CAAAE;QACA;QACA,MAAAP,UAAA,CAAAkB,aAAA,CAAAkB,WAAA;QACA,KAAApB,QAAA,CAAAI,OAAA;QACA,KAAAhB,aAAA;QACA,KAAAM,cAAA;QACA,KAAA4B,SAAA;MACA,SAAAvB,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAsB,iBAAA/B,QAAA;MACA,MAAAiC,WAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,WAAA,CAAAjC,QAAA;IACA;IACAgC,UAAA;MACA,KAAAjC,WAAA;QACAJ,IAAA;QACAK,QAAA;QACAC,UAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}