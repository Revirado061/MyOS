{"ast":null,"code":"import { processApi, deviceApi, interruptApi } from '@/api/process_interrupt_device';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null,\n      // 设备管理相关\n      devices: [],\n      // 设备列表\n      deviceDialogVisible: false,\n      // 控制设备管理弹窗显示\n      allocateDialogVisible: false,\n      selectedDevice: null,\n      // 当前选中用于分配的设备\n      allocateForm: {\n        timeout: 5\n      }\n    };\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses();\n    // 设置定时器，每30秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 30000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  methods: {\n    // 处理前端显示细节\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      };\n      return types[priority] || 'info';\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      };\n      return types[state] || 'info';\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      };\n      return texts[state] || state;\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-';\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    // 进程操作相关方法\n    async handleTerminate(process) {\n      try {\n        const response = await processApi.terminateProcess(process.id);\n        if (response.success) {\n          this.$message.success(`进程 ${process.name} 已终止`);\n          await this.fetchProcesses();\n        } else {\n          this.$message.error(response.message || '终止进程失败');\n        }\n      } catch (error) {\n        this.$message.error('终止进程失败');\n      }\n    },\n    // 获取特定状态的进程\n    async getProcessesByState(state) {\n      try {\n        const response = await processApi.getProcessesByState(state);\n        return response.data || [];\n      } catch (error) {\n        console.error(`获取${state}状态进程失败:`, error);\n        return [];\n      }\n    },\n    // 更新后的fetchProcesses方法\n    async fetchProcesses() {\n      try {\n        // 获取所有进程\n        const allResponse = await processApi.getAllProcesses();\n        this.allProcesses = allResponse.data || [];\n\n        // 获取各状态进程\n        this.readyQueue = await this.getProcessesByState('ready');\n        this.runningQueue = await this.getProcessesByState('running');\n        this.blockedQueue = await this.getProcessesByState('waiting');\n        this.terminatedQueue = await this.getProcessesByState('terminated');\n      } catch (error) {\n        console.error('获取进程数据失败:', error);\n        this.$message.error('获取进程数据失败');\n        // 清空所有队列\n        this.readyQueue = [];\n        this.runningQueue = [];\n        this.blockedQueue = [];\n        this.terminatedQueue = [];\n        this.allProcesses = [];\n      }\n    },\n    async createProcess() {\n      try {\n        const response = await processApi.createProcess({\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize\n        });\n        if (response.success) {\n          this.$message.success('进程创建成功');\n          this.processForm.name = '';\n          await this.fetchProcesses();\n        } else {\n          this.$message.error(response.message || '创建进程失败');\n        }\n      } catch (error) {\n        this.$message.error('创建进程失败，请重试');\n      }\n    },\n    // 设备管理相关方法\n    async handleEnableDevice(row) {\n      try {\n        await this.fetchDevices();\n        this.deviceDialogVisible = true;\n      } catch (error) {\n        this.$message.error('获取设备列表失败');\n      }\n    },\n    async fetchDevices() {\n      try {\n        // 这里需要添加获取设备列表的API调用\n        // const response = await deviceApi.getDevices()\n        // this.devices = response.data || []\n        this.devices = []; // 临时使用空数组，等待设备API实现\n      } catch (error) {\n        this.$message.error('获取设备列表失败');\n        this.devices = [];\n      }\n    },\n    // 获取状态标签类型\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',\n        'BUSY': 'warning',\n        'ERROR': 'danger'\n      };\n      return types[status] || 'info';\n    },\n    // 弹出设备分配对话框\n    showAllocateDialog(device) {\n      this.selectedDevice = device;\n      this.allocateForm.timeout = 5;\n      this.allocateDialogVisible = true;\n    },\n    // 确认分配设备\n    async handleAllocate() {\n      if (!this.selectedDevice) return;\n      try {\n        const response = await deviceApi.requestDevice(this.selectedDevice.id, this.selectedDevice.type);\n        if (response.success) {\n          this.$message.success('设备分配成功');\n          this.allocateDialogVisible = false;\n          await this.fetchDevices();\n        } else {\n          this.$message.error(response.message || '设备分配失败');\n        }\n      } catch (error) {\n        this.$message.error('设备分配失败');\n      }\n    },\n    // 释放设备\n    async handleRelease(device) {\n      try {\n        const response = await deviceApi.releaseDevice(device.id, device.type);\n        if (response.success) {\n          this.$message.success('设备释放成功');\n          await this.fetchDevices();\n        } else {\n          this.$message.error(response.message || '设备释放失败');\n        }\n      } catch (error) {\n        this.$message.error('设备释放失败');\n      }\n    }\n  }\n};","map":{"version":3,"names":["processApi","deviceApi","interruptApi","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","allProcesses","timer","devices","deviceDialogVisible","allocateDialogVisible","selectedDevice","allocateForm","timeout","created","fetchProcesses","setInterval","beforeDestroy","clearInterval","methods","getPriorityType","types","getStateType","state","getStateText","texts","formatTime","timestamp","date","Date","toLocaleString","handleTerminate","process","response","terminateProcess","id","success","$message","error","message","getProcessesByState","console","allResponse","getAllProcesses","createProcess","handleEnableDevice","row","fetchDevices","getStatusType","status","showAllocateDialog","device","handleAllocate","requestDevice","type","handleRelease","releaseDevice"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"process-control\">\n      <el-form class=\"input-form\" :model=\"processForm\" label-width=\"80px\" inline>\n        <el-form-item label=\"进程名称\">\n          <el-input v-model=\"processForm.name\" placeholder=\"请输入进程名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"优先级\">\n          <el-select v-model=\"processForm.priority\" placeholder=\"请选择\">\n            <el-option label=\"高\" :value=\"1\"></el-option>\n            <el-option label=\"中\" :value=\"2\"></el-option>\n            <el-option label=\"低\" :value=\"3\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内存大小\">\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\" :step=\"64\"></el-input-number>\n          <span class=\"unit\">MB</span>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <div class=\"process-queues\">\n      <div class=\"queue-container\">\n        <h3>就绪队列</h3>\n        <div class=\"queue ready-queue\">\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>运行队列</h3>\n        <div class=\"queue running-queue\">\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>阻塞队列</h3>\n        <div class=\"queue blocked-queue\">\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>终止队列</h3>\n        <div class=\"queue terminated-queue\">\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"process-list\">\n      <h3>进程列表</h3>\n      <el-table \n        :data=\"allProcesses\" \n        style=\"width: 100%\" \n        border\n        height=\"280\"\n      >\n        <el-table-column prop=\"id\" label=\"进程ID\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"name\" label=\"进程名称\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"priority\" label=\"优先级\" width=\"80\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getPriorityType(scope.row.priority)\">\n              P{{ scope.row.priority }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"memorySize\" label=\"内存大小\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ scope.row.memorySize }}MB\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"state\" label=\"状态\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStateType(scope.row.state)\">\n              {{ getStateText(scope.row.state) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ formatTime(scope.row.createTime) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" align=\"center\" width=\"200\">\n          <template slot-scope=\"scope\">\n            <el-button\n              size=\"mini\"\n              type=\"primary\"\n              @click=\"handleEnableDevice(scope.row)\"\n              :disabled=\"scope.row.state === 'TERMINATED'\"\n              style=\"margin-left: 10px;\"\n            >启用设备</el-button> <!-- 添加启用设备按钮 -->\n            <el-button\n              size=\"mini\"\n              type=\"danger\"\n              @click=\"handleTerminate(scope.row)\"\n              :disabled=\"scope.row.state === 'TERMINATED'\"\n            >终止</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 进程相关内容 -->\n    <el-dialog\n      title=\"设备管理\"\n      :visible.sync=\"deviceDialogVisible\"\n      width=\"80%\"\n      :close-on-click-modal=\"false\">\n      <div class=\"device-control\">\n        <el-table :data=\"devices\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"设备ID\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"name\" label=\"设备名称\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"type\" label=\"设备类型\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"status\" label=\"状态\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row.status)\">\n                {{ scope.row.status }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"currentProcessId\" label=\"当前进程\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.currentProcessId || '无' }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"remainingTime\" label=\"剩余时间\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.remainingTime || 0 }}秒\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"180\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-button\n                size=\"mini\"\n                type=\"primary\"\n                @click=\"showAllocateDialog(scope.row)\"\n                :disabled=\"scope.row.status !== 'IDLE'\">\n                分配\n              </el-button>\n              <el-button\n                size=\"mini\"\n                type=\"danger\"\n                @click=\"handleRelease(scope.row)\"\n                :disabled=\"scope.row.status === 'IDLE'\">\n                释放\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </el-dialog>\n\n    <!-- 分配设备对话框 -->\n    <el-dialog\n      title=\"分配设备\"\n      :visible.sync=\"allocateDialogVisible\"\n      width=\"30%\"\n      :close-on-click-modal=\"false\">\n      <el-form :model=\"allocateForm\" label-width=\"100px\">\n        <el-form-item label=\"设备名称\">\n          <span>{{ selectedDevice ? selectedDevice.name : '' }}</span>\n        </el-form-item>\n        <el-form-item label=\"运行时间\">\n          <el-input-number \n            v-model=\"allocateForm.timeout\" \n            :min=\"1\" \n            :max=\"60\"\n            label=\"秒\">\n          </el-input-number>\n          <span class=\"unit\" style=\"margin-left: 10px;\">秒</span>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"allocateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleAllocate\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { processApi, deviceApi, interruptApi } from '@/api/process_interrupt_device'\n\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null,\n\n      // 设备管理相关\n      devices: [],                 // 设备列表\n      deviceDialogVisible: false, // 控制设备管理弹窗显示\n      allocateDialogVisible: false,\n      selectedDevice: null,        // 当前选中用于分配的设备\n      allocateForm: {\n        timeout: 5\n      },\n    }\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses()\n    // 设置定时器，每30秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 30000)\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  },\n  methods: {\n    // 处理前端显示细节\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      }\n      return types[priority] || 'info'\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      }\n      return types[state] || 'info'\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      }\n      return texts[state] || state\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-'\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n\n    // 进程操作相关方法\n    async handleTerminate(process) {\n      try {\n        const response = await processApi.terminateProcess(process.id)\n        if (response.success) {\n          this.$message.success(`进程 ${process.name} 已终止`)\n          await this.fetchProcesses()\n        } else {\n          this.$message.error(response.message || '终止进程失败')\n        }\n      } catch (error) {\n        this.$message.error('终止进程失败')\n      }\n    },\n\n    // 获取特定状态的进程\n    async getProcessesByState(state) {\n      try {\n        const response = await processApi.getProcessesByState(state)\n        return response.data || []\n      } catch (error) {\n        console.error(`获取${state}状态进程失败:`, error)\n        return []\n      }\n    },\n\n    // 更新后的fetchProcesses方法\n    async fetchProcesses() {\n      try {\n        // 获取所有进程\n        const allResponse = await processApi.getAllProcesses()\n        this.allProcesses = allResponse.data || []\n\n        // 获取各状态进程\n        this.readyQueue = await this.getProcessesByState('ready')\n        this.runningQueue = await this.getProcessesByState('running')\n        this.blockedQueue = await this.getProcessesByState('waiting')\n        this.terminatedQueue = await this.getProcessesByState('terminated')\n      } catch (error) {\n        console.error('获取进程数据失败:', error)\n        this.$message.error('获取进程数据失败')\n        // 清空所有队列\n        this.readyQueue = []\n        this.runningQueue = []\n        this.blockedQueue = []\n        this.terminatedQueue = []\n        this.allProcesses = []\n      }\n    },\n\n    async createProcess() {\n      try {\n        const response = await processApi.createProcess({\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n        })\n        \n        if (response.success) {\n          this.$message.success('进程创建成功')\n          this.processForm.name = ''\n          await this.fetchProcesses()\n        } else {\n          this.$message.error(response.message || '创建进程失败')\n        }\n      } catch (error) {\n        this.$message.error('创建进程失败，请重试')\n      }\n    },\n    \n    // 设备管理相关方法\n    async handleEnableDevice(row) {\n      try {\n        await this.fetchDevices()\n        this.deviceDialogVisible = true\n      } catch (error) {\n        this.$message.error('获取设备列表失败')\n      }\n    },\n\n    async fetchDevices() {\n      try {\n        // 这里需要添加获取设备列表的API调用\n        // const response = await deviceApi.getDevices()\n        // this.devices = response.data || []\n        this.devices = [] // 临时使用空数组，等待设备API实现\n      } catch (error) {\n        this.$message.error('获取设备列表失败')\n        this.devices = []\n      }\n    },\n\n    // 获取状态标签类型\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',\n        'BUSY': 'warning',\n        'ERROR': 'danger'\n      }\n      return types[status] || 'info'\n    },\n\n    // 弹出设备分配对话框\n    showAllocateDialog(device) {\n      this.selectedDevice = device\n      this.allocateForm.timeout = 5\n      this.allocateDialogVisible = true\n    },\n\n    // 确认分配设备\n    async handleAllocate() {\n      if (!this.selectedDevice) return\n\n      try {\n        const response = await deviceApi.requestDevice(\n          this.selectedDevice.id,\n          this.selectedDevice.type\n        )\n        \n        if (response.success) {\n          this.$message.success('设备分配成功')\n          this.allocateDialogVisible = false\n          await this.fetchDevices()\n        } else {\n          this.$message.error(response.message || '设备分配失败')\n        }\n      } catch (error) {\n        this.$message.error('设备分配失败')\n      }\n    },\n\n    // 释放设备\n    async handleRelease(device) {\n      try {\n        const response = await deviceApi.releaseDevice(\n          device.id,\n          device.type\n        )\n        \n        if (response.success) {\n          this.$message.success('设备释放成功')\n          await this.fetchDevices()\n        } else {\n          this.$message.error(response.message || '设备释放失败')\n        }\n      } catch (error) {\n        this.$message.error('设备释放失败')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 900px;\n  padding: 20px;\n  gap: 20px;\n}\n\n.process-control {\n  background-color: #fff;\n  padding: 20px 0 20px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.process-control .el-form {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-right: 10px;\n}\n\n.process-control .el-form-item {\n  margin-bottom: 0;\n  margin-right: 0;\n}\n\n.process-control .el-form-item__label {\n  padding-right: 8px;\n}\n\n.process-control .el-input {\n  width: 150px;\n}\n\n.process-control .el-select {\n  width: 120px;\n}\n\n.process-control .el-input-number {\n  width: 150px;\n}\n\n.process-control .unit {\n  margin-left: 5px;\n  color: #606266;\n}\n\n.process-control .el-button {\n  margin-left: 10px;\n}\n\n.process-queues {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.queue-container {\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  display: flex;\n  flex-direction: column;\n  height: 240px;\n}\n\n.queue-container h3 {\n  margin: 0;\n  padding: 10px 15px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #f5f7fa;\n  border-radius: 4px 4px 0 0;\n  font-size: 14px;\n}\n\n.queue {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.queue::-webkit-scrollbar {\n  width: 6px;\n}\n\n.queue::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.queue::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n\n.process-tag {\n  margin: 0;\n  padding: 6px 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 13px;\n}\n\n.process-tag .process-info {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.process-tag .el-tag {\n  margin: 0;\n}\n\n.process-tag .el-tag--small {\n  height: 20px;\n  line-height: 18px;\n  padding: 0 6px;\n  font-size: 12px;\n}\n\n.process-list {\n  margin-bottom: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  height: 350px;\n  overflow: hidden;\n}\n\n.process-list h3 {\n  margin: 0;\n  padding: 10px;\n  border-bottom: 1px solid #ebeef5;\n  color: #303133;\n  font-size: 16px;\n}\n.process-list el-table {\n  margin-bottom: 10px;\n}\n/* 自定义表格滚动条样式 */\n.process-list .el-table__body-wrapper::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}