{"ast":null,"code":"import { createProcess, getAllProcesses, getCurrentProcess } from '../api/process';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: []\n    };\n  },\n  methods: {\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        };\n        console.log(newProcess);\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n\n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data);\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error);\n        this.$message.error('创建进程失败，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["createProcess","getAllProcesses","getCurrentProcess","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","methods","newProcess","id","Date","now","state","console","log","response","push","$message","success","error"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"process-control\">\n      <el-form :model=\"processForm\" label-width=\"100px\">\n        <el-form-item label=\"进程名称\">\n          <el-input v-model=\"processForm.name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"优先级\">\n          <el-select v-model=\"processForm.priority\">\n            <el-option label=\"高\" :value=\"1\"></el-option>\n            <el-option label=\"中\" :value=\"2\"></el-option>\n            <el-option label=\"低\" :value=\"3\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内存大小(MB)\">\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\"></el-input-number>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <div class=\"process-queues\">\n      <div class=\"queue-container\">\n        <h3>就绪队列</h3>\n        <div class=\"queue ready-queue\">\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n            {{ process.name }}\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>运行队列</h3>\n        <div class=\"queue running-queue\">\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n            {{ process.name }}\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>阻塞队列</h3>\n        <div class=\"queue blocked-queue\">\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n            {{ process.name }}\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>终止队列</h3>\n        <div class=\"queue terminated-queue\">\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n            {{ process.name }}\n          </el-tag>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createProcess,getAllProcesses,getCurrentProcess } from '../api/process'\n\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: []\n    }\n  },\n  methods: {\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        }\n        console.log(newProcess)\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess)\n        \n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data)\n          this.processForm.name = ''\n          this.$message.success('进程创建成功')\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error)\n        this.$message.error('创建进程失败，请重试')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n}\n\n.process-control {\n  width: 300px;\n}\n\n.process-queues {\n  flex: 1;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n}\n\n.queue-container {\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  padding: 10px;\n}\n\n.queue {\n  min-height: 100px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 10px;\n  background-color: #f5f7fa;\n  border-radius: 4px;\n}\n\n.process-tag {\n  margin: 5px;\n}\n</style> "],"mappings":"AAgEA,SAAAA,aAAA,EAAAC,eAAA,EAAAC,iBAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAF,IAAA;QACAG,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,eAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAZ,cAAA;MACA;QACA,MAAAa,UAAA;UACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;UACAb,IAAA,OAAAE,WAAA,CAAAF,IAAA;UACAG,QAAA,OAAAD,WAAA,CAAAC,QAAA;UACAC,UAAA,OAAAF,WAAA,CAAAE,UAAA;UACAU,KAAA;QACA;QACAC,OAAA,CAAAC,GAAA,CAAAN,UAAA;QACA;QACA,MAAAO,QAAA,SAAApB,aAAA,CAAAa,UAAA;;QAEA;QACA,IAAAO,QAAA,CAAAhB,IAAA;UACA,KAAAI,UAAA,CAAAa,IAAA,CAAAD,QAAA,CAAAhB,IAAA;UACA,KAAAC,WAAA,CAAAF,IAAA;UACA,KAAAmB,QAAA,CAAAC,OAAA;QACA;MACA,SAAAC,KAAA;QACAN,OAAA,CAAAM,KAAA,YAAAA,KAAA;QACA,KAAAF,QAAA,CAAAE,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}