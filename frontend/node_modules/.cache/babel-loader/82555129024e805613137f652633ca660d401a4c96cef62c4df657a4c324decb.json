{"ast":null,"code":"import { createProcess, getAllProcesses, getCurrentProcess } from '../api/process';\nimport { wsService } from '../api/websocket';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 256\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: []\n    };\n  },\n  created() {\n    // 获取初始数据\n    this.fetchProcesses();\n    // 订阅 WebSocket 更新\n    this.unsubscribe = wsService.subscribe(this.handleProcessUpdate);\n    // 确保 WebSocket 连接已建立\n    wsService.connect();\n  },\n  beforeDestroy() {\n    // 取消订阅\n    if (this.unsubscribe) {\n      this.unsubscribe();\n    }\n    // 断开 WebSocket 连接\n    wsService.disconnect();\n  },\n  methods: {\n    handleProcessUpdate(processes) {\n      // 清空所有队列\n      this.readyQueue = [];\n      this.runningQueue = [];\n      this.blockedQueue = [];\n      this.terminatedQueue = [];\n\n      // 根据进程状态分配到对应队列\n      processes.forEach(process => {\n        switch (process.state) {\n          case 'READY':\n            this.readyQueue.push(process);\n            break;\n          case 'RUNNING':\n            this.runningQueue.push(process);\n            break;\n          case 'BLOCKED':\n            this.blockedQueue.push(process);\n            break;\n          case 'TERMINATED':\n            this.terminatedQueue.push(process);\n            break;\n        }\n      });\n    },\n    async fetchProcesses() {\n      try {\n        const response = await getAllProcesses();\n        if (response.data) {\n          this.handleProcessUpdate(response.data);\n        }\n      } catch (error) {\n        console.error('获取进程状态失败:', error);\n        this.$message.error('获取进程状态失败');\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        };\n        console.log(newProcess);\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n\n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data);\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error);\n        this.$message.error('创建进程失败，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["createProcess","getAllProcesses","getCurrentProcess","wsService","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","created","fetchProcesses","unsubscribe","subscribe","handleProcessUpdate","connect","beforeDestroy","disconnect","methods","processes","forEach","process","state","push","response","error","console","$message","newProcess","id","Date","now","log","success"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"process-management\">\r\n    <div class=\"process-control\">\r\n      <el-form :model=\"processForm\" label-width=\"100px\">\r\n        <el-form-item label=\"进程名称\">\r\n          <el-input v-model=\"processForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"优先级\">\r\n          <el-select v-model=\"processForm.priority\">\r\n            <el-option label=\"高\" :value=\"1\"></el-option>\r\n            <el-option label=\"中\" :value=\"2\"></el-option>\r\n            <el-option label=\"低\" :value=\"3\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"内存大小(MB)\">\r\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item>\r\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\r\n        </el-form-item>\r\n      </el-form>\r\n    </div>\r\n\r\n    <div class=\"process-queues\">\r\n      <div class=\"queue-container\">\r\n        <h3>就绪队列</h3>\r\n        <div class=\"queue ready-queue\">\r\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"queue-container\">\r\n        <h3>运行队列</h3>\r\n        <div class=\"queue running-queue\">\r\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"queue-container\">\r\n        <h3>阻塞队列</h3>\r\n        <div class=\"queue blocked-queue\">\r\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"queue-container\">\r\n        <h3>终止队列</h3>\r\n        <div class=\"queue terminated-queue\">\r\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\r\n            {{ process.name }}\r\n          </el-tag>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { createProcess, getAllProcesses, getCurrentProcess } from '../api/process'\r\nimport { wsService } from '../api/websocket'\r\n\r\nexport default {\r\n  name: 'ProcessManagement',\r\n  data() {\r\n    return {\r\n      processForm: {\r\n        name: '',\r\n        priority: 2,\r\n        memorySize: 256\r\n      },\r\n      readyQueue: [],\r\n      runningQueue: [],\r\n      blockedQueue: [],\r\n      terminatedQueue: []\r\n    }\r\n  },\r\n  created() {\r\n    // 获取初始数据\r\n    this.fetchProcesses()\r\n    // 订阅 WebSocket 更新\r\n    this.unsubscribe = wsService.subscribe(this.handleProcessUpdate)\r\n    // 确保 WebSocket 连接已建立\r\n    wsService.connect()\r\n  },\r\n  beforeDestroy() {\r\n    // 取消订阅\r\n    if (this.unsubscribe) {\r\n      this.unsubscribe()\r\n    }\r\n    // 断开 WebSocket 连接\r\n    wsService.disconnect()\r\n  },\r\n  methods: {\r\n    handleProcessUpdate(processes) {\r\n      // 清空所有队列\r\n      this.readyQueue = []\r\n      this.runningQueue = []\r\n      this.blockedQueue = []\r\n      this.terminatedQueue = []\r\n      \r\n      // 根据进程状态分配到对应队列\r\n      processes.forEach(process => {\r\n        switch (process.state) {\r\n          case 'READY':\r\n            this.readyQueue.push(process)\r\n            break\r\n          case 'RUNNING':\r\n            this.runningQueue.push(process)\r\n            break\r\n          case 'BLOCKED':\r\n            this.blockedQueue.push(process)\r\n            break\r\n          case 'TERMINATED':\r\n            this.terminatedQueue.push(process)\r\n            break\r\n        }\r\n      })\r\n    },\r\n    async fetchProcesses() {\r\n      try {\r\n        const response = await getAllProcesses()\r\n        if (response.data) {\r\n          this.handleProcessUpdate(response.data)\r\n        }\r\n      } catch (error) {\r\n        console.error('获取进程状态失败:', error)\r\n        this.$message.error('获取进程状态失败')\r\n      }\r\n    },\r\n    async createProcess() {\r\n      try {\r\n        const newProcess = {\r\n          id: Date.now(),\r\n          name: this.processForm.name,\r\n          priority: this.processForm.priority,\r\n          memorySize: this.processForm.memorySize,\r\n          state: 'NEW'\r\n        }\r\n        console.log(newProcess)\r\n        // 调用后端 API 创建进程\r\n        const response = await createProcess(newProcess)\r\n        \r\n        // 如果创建成功，将进程添加到就绪队列\r\n        if (response.data) {\r\n          this.readyQueue.push(response.data)\r\n          this.processForm.name = ''\r\n          this.$message.success('进程创建成功')\r\n        }\r\n      } catch (error) {\r\n        console.error('创建进程失败:', error)\r\n        this.$message.error('创建进程失败，请重试')\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.process-management {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.process-control {\r\n  width: 300px;\r\n}\r\n\r\n.process-queues {\r\n  flex: 1;\r\n  display: grid;\r\n  grid-template-columns: repeat(2, 1fr);\r\n  gap: 20px;\r\n}\r\n\r\n.queue-container {\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  padding: 10px;\r\n}\r\n\r\n.queue {\r\n  min-height: 100px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  background-color: #f5f7fa;\r\n  border-radius: 4px;\r\n}\r\n\r\n.process-tag {\r\n  margin: 5px;\r\n}\r\n</style> "],"mappings":"AAgEA,SAAAA,aAAA,EAAAC,eAAA,EAAAC,iBAAA;AACA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAF,IAAA;QACAG,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,eAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,cAAA;IACA;IACA,KAAAC,WAAA,GAAAZ,SAAA,CAAAa,SAAA,MAAAC,mBAAA;IACA;IACAd,SAAA,CAAAe,OAAA;EACA;EACAC,cAAA;IACA;IACA,SAAAJ,WAAA;MACA,KAAAA,WAAA;IACA;IACA;IACAZ,SAAA,CAAAiB,UAAA;EACA;EACAC,OAAA;IACAJ,oBAAAK,SAAA;MACA;MACA,KAAAb,UAAA;MACA,KAAAC,YAAA;MACA,KAAAC,YAAA;MACA,KAAAC,eAAA;;MAEA;MACAU,SAAA,CAAAC,OAAA,CAAAC,OAAA;QACA,QAAAA,OAAA,CAAAC,KAAA;UACA;YACA,KAAAhB,UAAA,CAAAiB,IAAA,CAAAF,OAAA;YACA;UACA;YACA,KAAAd,YAAA,CAAAgB,IAAA,CAAAF,OAAA;YACA;UACA;YACA,KAAAb,YAAA,CAAAe,IAAA,CAAAF,OAAA;YACA;UACA;YACA,KAAAZ,eAAA,CAAAc,IAAA,CAAAF,OAAA;YACA;QACA;MACA;IACA;IACA,MAAAV,eAAA;MACA;QACA,MAAAa,QAAA,SAAA1B,eAAA;QACA,IAAA0B,QAAA,CAAAtB,IAAA;UACA,KAAAY,mBAAA,CAAAU,QAAA,CAAAtB,IAAA;QACA;MACA,SAAAuB,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAA5B,cAAA;MACA;QACA,MAAA+B,UAAA;UACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;UACA9B,IAAA,OAAAE,WAAA,CAAAF,IAAA;UACAG,QAAA,OAAAD,WAAA,CAAAC,QAAA;UACAC,UAAA,OAAAF,WAAA,CAAAE,UAAA;UACAiB,KAAA;QACA;QACAI,OAAA,CAAAM,GAAA,CAAAJ,UAAA;QACA;QACA,MAAAJ,QAAA,SAAA3B,aAAA,CAAA+B,UAAA;;QAEA;QACA,IAAAJ,QAAA,CAAAtB,IAAA;UACA,KAAAI,UAAA,CAAAiB,IAAA,CAAAC,QAAA,CAAAtB,IAAA;UACA,KAAAC,WAAA,CAAAF,IAAA;UACA,KAAA0B,QAAA,CAAAM,OAAA;QACA;MACA,SAAAR,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}