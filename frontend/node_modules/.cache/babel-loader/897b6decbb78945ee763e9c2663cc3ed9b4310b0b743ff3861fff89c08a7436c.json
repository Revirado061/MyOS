{"ast":null,"code":"import { getCurrentPath, getDirectoryTree, createDirectory, createFile, deleteDirectory, deleteFile, openFile, closeFile, readFileContent, writeFileContent, changeDirectory, getDiskStatus } from '@/api/file';\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [],\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      totalSpace: 8192,\n      usedSpace: 0,\n      freeSpace: 8192,\n      blockSize: 32,\n      diskRows: [],\n      blocksPerRow: 32,\n      currentPath: '/',\n      loading: false,\n      currentFile: null,\n      fileContent: '',\n      isEditing: false,\n      showCreateDir: false,\n      createDirName: '',\n      showCreateFile: false,\n      createFileName: '',\n      writeFileName: '',\n      writeFileContent: '',\n      changeDirInput: '',\n      usagePercentage: 0,\n      usedBlocks: 0\n    };\n  },\n  created() {\n    this.initializeDisk();\n    this.fetchFileTree();\n    this.fetchCurrentPath();\n  },\n  methods: {\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n      this.diskRows = Array(rows).fill().map(() => Array(this.blocksPerRow).fill().map(() => ({\n        status: 'FREE',\n        fileId: null,\n        size: this.blockSize\n      })));\n      this.fetchDiskData();\n    },\n    async fetchDiskData() {\n      const response = await getDiskStatus();\n      this.usagePercentage = response.status.usagePercentage;\n      this.usedSpace = response.status.usedBlocks * 32;\n      this.freeSpace = response.status.freeBlocks * 32;\n      this.usedBlocks = response.status.usedBlocks;\n\n      // 计算总行数\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n\n      // 创建新的磁盘块数组\n      this.diskRows = Array(rows).fill().map((_, rowIndex) => Array(this.blocksPerRow).fill().map((_, blockIndex) => {\n        const blockNumber = rowIndex * this.blocksPerRow + blockIndex;\n        return {\n          status: blockNumber < this.usedBlocks ? 'ALLOCATED' : 'FREE',\n          fileId: blockNumber < this.usedBlocks ? `file_${blockNumber}` : null,\n          size: this.blockSize\n        };\n      }));\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}MB`;\n      }\n      return '空闲块';\n    },\n    async fetchFileTree() {\n      try {\n        const response = await getDirectoryTree();\n        if (response.success) {\n          this.fileTree = [response.tree];\n        }\n      } catch (error) {\n        this.$message.error('获取文件树失败');\n      }\n    },\n    async fetchCurrentPath() {\n      try {\n        const response = await getCurrentPath();\n        this.currentPath = response;\n        console.log(this.currentPath);\n      } catch (error) {\n        this.$message.error('获取当前路径失败');\n      }\n    },\n    async createFileOrDir() {\n      if (!this.fileForm.name) {\n        this.$message.warning('请输入名称');\n        return;\n      }\n      try {\n        if (this.fileForm.type === 'directory') {\n          await createDirectory(this.fileForm.name);\n        } else {\n          await createFile(this.fileForm.name);\n        }\n        this.$message.success(`${this.fileForm.type === 'directory' ? '目录' : '文件'}创建成功`);\n        this.fileForm.name = '';\n        this.fetchFileTree();\n      } catch (error) {\n        this.$message.error(`${this.fileForm.type === 'directory' ? '目录' : '文件'}创建失败`);\n      }\n    },\n    async handleNodeClick(data) {\n      if (data.type === 'directory') {\n        this.currentFile = null;\n        this.fileContent = '';\n      } else if (data.type === 'file') {\n        try {\n          await openFile(data.name);\n          const response = await readFileContent(data.name);\n          console.log('后端返回的完整响应:', response);\n          console.log('响应类型:', typeof response);\n          console.log('content类型:', typeof response.content);\n          console.log('content值:', response.content);\n          if (response.success) {\n            this.currentFile = data.name;\n            let content = response.content || '';\n            console.log('处理前的content:', content);\n            // 删除所有空字符（\\u0000）\n            content = content.replace(/\\0/g, '');\n            // 删除字符串开头和结尾的引号\n            content = content.replace(/^\"|\"$/g, '');\n            this.fileContent = content;\n            console.log('处理后的文件内容:', this.fileContent);\n          }\n        } catch (error) {\n          console.error('打开文件错误:', error);\n          this.$message.error('打开文件失败');\n        }\n      }\n    },\n    async deleteNode(node, data) {\n      try {\n        let response;\n        if (data.type === 'directory') {\n          response = await deleteDirectory(data.name);\n        } else {\n          response = await deleteFile(data.name);\n        }\n        if (response.success) {\n          this.$message.success(`${data.type === 'directory' ? '目录' : '文件'}删除成功`);\n          this.fetchFileTree();\n          this.fetchDiskData();\n        } else {\n          this.$message.error(response.message || `${data.type === 'directory' ? '目录' : '文件'}删除失败`);\n        }\n      } catch (error) {\n        this.$message.error(`${data.type === 'directory' ? '目录' : '文件'}删除失败`);\n      }\n    },\n    async closeCurrentFile() {\n      if (!this.currentFile) return;\n      try {\n        await closeFile(this.currentFile);\n        this.currentFile = null;\n        this.fileContent = '';\n        this.isEditing = false;\n        this.$message.success('文件已关闭');\n      } catch (error) {\n        this.$message.error('关闭文件失败');\n      }\n    },\n    async saveFileContent() {\n      if (!this.currentFile) return;\n      try {\n        await writeFileContent(this.currentFile, this.fileContent);\n        this.isEditing = false;\n        this.$message.success('文件保存成功');\n      } catch (error) {\n        this.$message.error('文件保存失败');\n      }\n    },\n    async handleChangeDirectory() {\n      try {\n        console.log('切换目录请求参数:', this.changeDirInput);\n        console.log('切换目录请求参数类型:', typeof this.changeDirInput);\n        const response = await changeDirectory(String(this.changeDirInput).trim());\n        console.log('切换目录响应:', response);\n        if (response.success) {\n          this.$message.success('切换目录成功');\n          this.fetchFileTree();\n          this.fetchCurrentPath();\n          this.changeDirInput = '';\n        } else {\n          this.$message.error(response.message || '切换目录失败');\n        }\n      } catch (error) {\n        console.error('切换目录错误:', error);\n        this.$message.error('切换目录失败');\n      }\n    },\n    async handleCreateDirectory() {\n      try {\n        const response = await createDirectory(this.createDirName);\n        if (response.success) {\n          this.$message.success('创建目录成功');\n          this.showCreateDir = false;\n          this.createDirName = '';\n          this.fetchFileTree();\n          this.fetchCurrentPath();\n        } else {\n          this.$message.error(response.message || '创建目录失败');\n        }\n      } catch (error) {\n        this.$message.error('创建目录失败');\n      }\n    },\n    async handleCreateFile() {\n      if (!this.createFileName) {\n        this.$message.warning('请输入文件名称');\n        return;\n      }\n      try {\n        const response = await createFile(this.createFileName);\n        if (response.success) {\n          this.$message.success('文件创建成功');\n          this.showCreateFile = false;\n          this.createFileName = '';\n          this.fetchFileTree();\n          this.fetchDiskData();\n        } else {\n          this.$message.error(response.message || '创建文件失败');\n        }\n      } catch (error) {\n        console.error('创建文件错误:', error);\n        this.$message.error('创建文件失败');\n      }\n    },\n    async handleWriteContent() {\n      if (!this.writeFileName || !this.writeFileContent) {\n        this.$message.warning('文件名称和内容不能为空');\n        return;\n      }\n      try {\n        const response = await writeFileContent(this.writeFileName, this.writeFileContent);\n        if (response.success) {\n          this.$message.success('文件内容写入成功');\n          this.fetchFileTree();\n          this.fetchDiskData();\n        } else {\n          this.$message.error(response.message || '写入文件内容失败');\n        }\n      } catch (error) {\n        console.error('写入文件内容错误:', error);\n        this.$message.error('写入文件内容失败');\n      }\n    },\n    resetWriteContentDialog() {\n      this.writeFileName = '';\n      this.writeFileContent = '';\n    }\n  },\n  computed: {\n    diskUsagePercentage() {\n      return this.usagePercentage;\n    },\n    diskUsageStatus() {\n      const percentage = this.diskUsagePercentage;\n      if (percentage >= 90) return 'exception';\n      if (percentage >= 70) return 'warning';\n      return 'success';\n    },\n    diskUsageFormat() {\n      return percentage => `${percentage}%`;\n    }\n  },\n  watch: {\n    isEditing(newVal) {\n      if (!newVal && this.currentFile) {\n        this.saveFileContent();\n      }\n    }\n  }\n};","map":{"version":3,"names":["getCurrentPath","getDirectoryTree","createDirectory","createFile","deleteDirectory","deleteFile","openFile","closeFile","readFileContent","writeFileContent","changeDirectory","getDiskStatus","name","data","fileForm","type","size","fileTree","defaultProps","children","label","totalSpace","usedSpace","freeSpace","blockSize","diskRows","blocksPerRow","currentPath","loading","currentFile","fileContent","isEditing","showCreateDir","createDirName","showCreateFile","createFileName","writeFileName","changeDirInput","usagePercentage","usedBlocks","created","initializeDisk","fetchFileTree","fetchCurrentPath","methods","totalBlocks","Math","ceil","rows","Array","fill","map","status","fileId","fetchDiskData","response","freeBlocks","_","rowIndex","blockIndex","blockNumber","getBlockTooltip","block","success","tree","error","$message","console","log","createFileOrDir","warning","handleNodeClick","content","replace","deleteNode","node","message","closeCurrentFile","saveFileContent","handleChangeDirectory","String","trim","handleCreateDirectory","handleCreateFile","handleWriteContent","resetWriteContentDialog","computed","diskUsagePercentage","diskUsageStatus","percentage","diskUsageFormat","watch","newVal"],"sources":["src/components/FileSystem.vue"],"sourcesContent":["<template>\n  <div class=\"file-system\">\n    <div class=\"file-control\">\n      <!-- 第一行：当前目录 -->\n      <div style=\"margin-bottom: 12px; font-size: 16px;\">\n        当前目录：{{ currentPath }}\n      </div>\n      <!-- 第二行：切换目录 -->\n      <div style=\"margin-bottom: 12px; display: flex; align-items: center;\">\n        <span style=\"margin-right: 8px;\">切换目录：</span>\n        <el-input\n          v-model=\"changeDirInput\"\n          placeholder=\"/ .. 目录名称\"\n          style=\"width: 300px; margin-right: 8px;\"\n          size=\"small\"\n        ></el-input>\n        <el-button type=\"primary\" size=\"small\" @click=\"handleChangeDirectory\">切换</el-button>\n      </div>\n      <!-- 第三行：创建目录/文件按钮 -->\n      <div style=\"margin-bottom: 12px; display: flex; gap: 12px;\">\n        <el-button type=\"success\" size=\"small\" @click=\"showCreateDir = !showCreateDir\">创建目录</el-button>\n        <el-button type=\"primary\" size=\"small\" @click=\"showCreateFile = !showCreateFile\">创建文件</el-button>\n      </div>\n      <!-- 第四行：创建目录输入框 -->\n      <div v-if=\"showCreateDir\" style=\"margin-bottom: 12px; display: flex; align-items: center; gap: 8px;\">\n        <span>目录名称：</span>\n        <el-input v-model=\"createDirName\" size=\"small\" style=\"width: 200px;\"></el-input>\n        <el-button type=\"success\" size=\"small\" @click=\"handleCreateDirectory\">提交</el-button>\n        <el-button size=\"small\" @click=\"showCreateDir = false\">取消</el-button>\n      </div>\n      <!-- 创建文件输入框 -->\n      <div v-if=\"showCreateFile\" style=\"margin-bottom: 12px; display: flex; align-items: center; gap: 8px;\">\n        <span>文件名称：</span>\n        <el-input v-model=\"createFileName\" size=\"small\" style=\"width: 200px;\"></el-input>\n        <el-button type=\"primary\" size=\"small\" @click=\"handleCreateFile\">提交</el-button>\n        <el-button size=\"small\" @click=\"showCreateFile = false\">取消</el-button>\n      </div>\n      <!-- 文件树结构保持不变 -->\n      <div class=\"file-tree\">\n        <h3>文件系统结构</h3>\n        <el-tree\n          :data=\"fileTree\"\n          :props=\"defaultProps\"\n          @node-click=\"handleNodeClick\"\n          default-expand-all\n        >\n          <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n            <span>\n              <i :class=\"data.type === 'directory' ? 'el-icon-folder' : 'el-icon-document'\"></i>\n              {{ node.label }}\n            </span>\n            <span>\n              <el-button\n                type=\"text\"\n                size=\"mini\"\n                @click=\"() => deleteNode(node, data)\">\n                删除\n              </el-button>\n            </span>\n          </span>\n        </el-tree>\n      </div>\n    </div>\n\n    <div class=\"disk-blocks\">\n      <h2>磁盘空间分配</h2>\n      <div class=\"disk-info\">\n        <div>总空间: {{ totalSpace }}MB</div>\n        <div>已用空间: {{ usedSpace }}MB</div>\n        <div>空闲空间: {{ freeSpace }}MB</div>\n        <div>利用率: {{ diskUsagePercentage }}%</div>\n        <el-progress \n          :percentage=\"diskUsagePercentage\" \n          :status=\"diskUsageStatus\"\n          :format=\"diskUsageFormat\"\n          style=\"margin-top: 2px;width: 500px;height: 30px;\"\n        ></el-progress>\n      </div>\n      \n      <div class=\"disk-blocks-grid\">\n        <div v-for=\"(row, rowIndex) in diskRows\" :key=\"rowIndex\" class=\"disk-row\">\n          <div\n            v-for=\"(block, blockIndex) in row\"\n            :key=\"blockIndex\"\n            class=\"disk-block\"\n            :class=\"{\n              'allocated': block.status === 'ALLOCATED',\n              'free': block.status === 'FREE'\n            }\"\n            :title=\"getBlockTooltip(block)\"\n          ></div>\n        </div>\n      </div>\n\n      <!-- 添加文件内容显示和编辑区域 -->\n      <div class=\"file-content-area\">\n        <div class=\"content-header\">\n          <h3>当前文件: {{ currentFile || '未选择文件' }}</h3>\n          <div class=\"content-actions\">\n            <el-button \n              type=\"primary\" \n              size=\"small\" \n              :disabled=\"!currentFile\"\n              @click=\"isEditing = !isEditing\"\n            >\n              {{ isEditing ? '保存' : '修改' }}\n            </el-button>\n            <el-button \n              type=\"info\" \n              size=\"small\" \n              :disabled=\"!currentFile\"\n              @click=\"closeCurrentFile\"\n            >\n              关闭文件\n            </el-button>\n          </div>\n        </div>\n        <div class=\"content-body\">\n          <el-input\n            v-if=\"isEditing\"\n            type=\"textarea\"\n            v-model=\"fileContent\"\n            :rows=\"10\"\n            placeholder=\"请输入文件内容\"\n          ></el-input>\n          <div v-else class=\"content-display\">\n            {{ fileContent || '暂无文件内容' }}\n          </div>\n        </div>\n      </div>\n    </div>\n    \n  </div>\n</template>\n\n<script>\nimport {\n  getCurrentPath,\n  getDirectoryTree,\n  createDirectory,\n  createFile,\n  deleteDirectory,\n  deleteFile,\n  openFile,\n  closeFile,\n  readFileContent,\n  writeFileContent,\n  changeDirectory,\n  getDiskStatus\n} from '@/api/file'\n\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [],\n      defaultProps: {\n        children: 'children',\n        label: 'name'\n      },\n      totalSpace: 8192,\n      usedSpace: 0,\n      freeSpace: 8192,\n      blockSize: 32,\n      diskRows: [],\n      blocksPerRow: 32,\n      currentPath: '/',\n      loading: false,\n      currentFile: null,\n      fileContent: '',\n      isEditing: false,\n      showCreateDir: false,\n      createDirName: '',\n      showCreateFile: false,\n      createFileName: '',\n      writeFileName: '',\n      writeFileContent: '',\n      changeDirInput: '',\n      usagePercentage: 0,\n      usedBlocks: 0,\n    }\n  },\n  created() {\n    this.initializeDisk()\n    this.fetchFileTree()\n    this.fetchCurrentPath()\n  },\n  methods: {\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize)\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\n      \n      this.diskRows = Array(rows).fill().map(() => \n        Array(this.blocksPerRow).fill().map(() => ({\n          status: 'FREE',\n          fileId: null,\n          size: this.blockSize\n        }))\n      )\n      this.fetchDiskData()\n    },\n    async fetchDiskData(){\n      const response = await getDiskStatus()\n      this.usagePercentage = response.status.usagePercentage\n      this.usedSpace = response.status.usedBlocks * 32\n      this.freeSpace = response.status.freeBlocks * 32\n      this.usedBlocks = response.status.usedBlocks\n      \n      // 计算总行数\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize)\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\n      \n      // 创建新的磁盘块数组\n      this.diskRows = Array(rows).fill().map((_, rowIndex) => \n        Array(this.blocksPerRow).fill().map((_, blockIndex) => {\n          const blockNumber = rowIndex * this.blocksPerRow + blockIndex\n          return {\n            status: blockNumber < this.usedBlocks ? 'ALLOCATED' : 'FREE',\n            fileId: blockNumber < this.usedBlocks ? `file_${blockNumber}` : null,\n            size: this.blockSize\n          }\n        })\n      )\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}MB`\n      }\n      return '空闲块'\n    },\n\n    async fetchFileTree() {\n      try {\n        const response = await getDirectoryTree()\n        if (response.success) {\n          this.fileTree = [response.tree]\n        }\n      } catch (error) {\n        this.$message.error('获取文件树失败')\n      }\n    },\n\n    async fetchCurrentPath() {\n      try {\n        const response = await getCurrentPath()\n        this.currentPath = response\n        console.log(this.currentPath)\n      } catch (error) {\n        this.$message.error('获取当前路径失败')\n      }\n    },\n\n    async createFileOrDir() {\n      if (!this.fileForm.name) {\n        this.$message.warning('请输入名称')\n        return\n      }\n\n      try {\n        if (this.fileForm.type === 'directory') {\n          await createDirectory(this.fileForm.name)\n        } else {\n          await createFile(this.fileForm.name)\n        }\n        this.$message.success(`${this.fileForm.type === 'directory' ? '目录' : '文件'}创建成功`)\n        this.fileForm.name = ''\n        this.fetchFileTree()\n      } catch (error) {\n        this.$message.error(`${this.fileForm.type === 'directory' ? '目录' : '文件'}创建失败`)\n      }\n    },\n\n    async handleNodeClick(data) {\n      if (data.type === 'directory') {\n        this.currentFile = null\n        this.fileContent = ''\n      } else if (data.type === 'file') {\n        try {\n          await openFile(data.name)\n          const response = await readFileContent(data.name)\n          console.log('后端返回的完整响应:', response)\n          console.log('响应类型:', typeof response)\n          console.log('content类型:', typeof response.content)\n          console.log('content值:', response.content)\n          if (response.success) {\n            this.currentFile = data.name\n            let content = response.content || ''\n            console.log('处理前的content:', content)\n            // 删除所有空字符（\\u0000）\n            content = content.replace(/\\0/g, '')\n            // 删除字符串开头和结尾的引号\n            content = content.replace(/^\"|\"$/g, '')\n            this.fileContent = content\n            console.log('处理后的文件内容:', this.fileContent)\n          }\n        } catch (error) {\n          console.error('打开文件错误:', error)\n          this.$message.error('打开文件失败')\n        }\n      }\n    },\n\n    async deleteNode(node, data) {\n      try {\n        let response;\n        if (data.type === 'directory') {\n          response = await deleteDirectory(data.name)\n        } else {\n          response = await deleteFile(data.name)\n        }\n        if (response.success) {\n          this.$message.success(`${data.type === 'directory' ? '目录' : '文件'}删除成功`)\n          this.fetchFileTree()\n          this.fetchDiskData()\n        } else {\n          this.$message.error(response.message || `${data.type === 'directory' ? '目录' : '文件'}删除失败`)\n        }\n      } catch (error) {\n        this.$message.error(`${data.type === 'directory' ? '目录' : '文件'}删除失败`)\n      }\n    },\n\n    async closeCurrentFile() {\n      if (!this.currentFile) return\n      \n      try {\n        await closeFile(this.currentFile)\n        this.currentFile = null\n        this.fileContent = ''\n        this.isEditing = false\n        this.$message.success('文件已关闭')\n      } catch (error) {\n        this.$message.error('关闭文件失败')\n      }\n    },\n\n    async saveFileContent() {\n      if (!this.currentFile) return\n      \n      try {\n        await writeFileContent(this.currentFile, this.fileContent)\n        this.isEditing = false\n        this.$message.success('文件保存成功')\n      } catch (error) {\n        this.$message.error('文件保存失败')\n      }\n    },\n\n    async handleChangeDirectory() {\n      try {\n        console.log('切换目录请求参数:',this.changeDirInput)\n        console.log('切换目录请求参数类型:', typeof this.changeDirInput)\n        const response = await changeDirectory(String(this.changeDirInput).trim())\n        console.log('切换目录响应:', response)\n        if (response.success) {\n          this.$message.success('切换目录成功')\n          this.fetchFileTree()\n          this.fetchCurrentPath()\n          this.changeDirInput = ''\n        } else {\n          this.$message.error(response.message || '切换目录失败')\n        }\n      } catch (error) {\n        console.error('切换目录错误:', error)\n        this.$message.error('切换目录失败')\n      }\n    },\n\n    async handleCreateDirectory() {\n      try {\n        const response = await createDirectory(this.createDirName)\n        if (response.success) {\n          this.$message.success('创建目录成功')\n          this.showCreateDir = false\n          this.createDirName = ''\n          this.fetchFileTree()\n          this.fetchCurrentPath()\n        } else {\n          this.$message.error(response.message || '创建目录失败')\n        }\n      } catch (error) {\n        this.$message.error('创建目录失败')\n      }\n    },\n\n    async handleCreateFile() {\n      if (!this.createFileName) {\n        this.$message.warning('请输入文件名称')\n        return\n      }\n      try {\n        const response = await createFile(this.createFileName)\n        if (response.success) {\n          this.$message.success('文件创建成功')\n          this.showCreateFile = false\n          this.createFileName = ''\n          this.fetchFileTree()\n          this.fetchDiskData()\n        } else {\n          this.$message.error(response.message || '创建文件失败')\n        }\n      } catch (error) {\n        console.error('创建文件错误:', error)\n        this.$message.error('创建文件失败')\n      }\n    },\n\n    async handleWriteContent() {\n      if (!this.writeFileName || !this.writeFileContent) {\n        this.$message.warning('文件名称和内容不能为空')\n        return\n      }\n      try {\n        const response = await writeFileContent(this.writeFileName, this.writeFileContent)\n        if (response.success) {\n          this.$message.success('文件内容写入成功')\n          this.fetchFileTree()\n          this.fetchDiskData()\n        } else {\n          this.$message.error(response.message || '写入文件内容失败')\n        }\n      } catch (error) {\n        console.error('写入文件内容错误:', error)\n        this.$message.error('写入文件内容失败')\n      }\n    },\n\n    resetWriteContentDialog() {\n      this.writeFileName = ''\n      this.writeFileContent = ''\n    }\n  },\n  computed: {\n    diskUsagePercentage() {\n      return this.usagePercentage \n    },\n    diskUsageStatus() {\n      const percentage = this.diskUsagePercentage\n      if (percentage >= 90) return 'exception'\n      if (percentage >= 70) return 'warning'\n      return 'success'\n    },\n    diskUsageFormat() {\n      return (percentage) => `${percentage}%`\n    }\n  },\n  watch: {\n    isEditing(newVal) {\n      if (!newVal && this.currentFile) {\n        this.saveFileContent()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.file-system {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  height: calc(100vh - 120px); /* 减去头部和padding的高度 */\n}\n\n.file-control {\n  flex: 4;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid #dcdfe6;\n  padding-right: 20px;\n  font-size: 16px;\n}\n\n/* 添加表单相关样式 */\n:deep(.el-form-item__label) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input__inner) {\n  font-size: 16px !important;\n}\n\n:deep(.el-radio__label) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input-number__decrease),\n:deep(.el-input-number__increase) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input-number__input) {\n  font-size: 16px !important;\n}\n\n:deep(.el-button) {\n  font-size: 16px !important;\n}\n\n.file-tree {\n  margin-top: 20px;\n  flex: 1;\n  overflow-y: auto;\n}\n\n.disk-blocks {\n  flex: 6;\n  display: flex;\n  flex-direction: column;\n}\n\n.disk-info {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 15px;\n  font-size: 16px;\n}\n\n.disk-blocks-grid {\n  border: 1px solid #dcdfe6;\n  padding: 15px;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: fit-content;\n}\n\n.disk-row {\n  display: flex;\n  gap: 2px;\n  margin-bottom: 2px;\n  justify-content: center;\n}\n\n.disk-block {\n  width: 28px;\n  height: 28px;\n  border: 1px solid #dcdfe6;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.disk-block:hover {\n  transform: scale(1.1);\n  z-index: 1;\n}\n\n.disk-block.allocated {\n  background-color: #409eff;\n}\n\n.disk-block.free {\n  background-color: #f0f9eb;\n}\n\n.custom-tree-node {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  padding-right: 8px;\n}\n\n.file-content-area {\n  margin-top: 20px;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  padding: 15px;\n  background-color: #ffffff;\n}\n\n.content-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 5px;\n}\n\n.content-header h3 {\n  margin: 0;\n  font-size: 16px;\n}\n\n.content-body {\n  min-height: 200px;\n}\n\n.content-display {\n  padding: 10px;\n  min-height: 200px;\n  background-color: #f5f7fa;\n  border-radius: 4px;\n  white-space: pre-wrap;\n  word-break: break-all;\n}\n\n:deep(.el-textarea__inner) {\n  font-size: 14px;\n  font-family: monospace;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}