{"ast":null,"code":"export default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [{\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      totalSpace: 4096,\n      usedSpace: 0,\n      freeSpace: 4096,\n      blockSize: 8,\n      diskRows: [],\n      blocksPerRow: 32,\n      updateInterval: null\n    };\n  },\n  created() {\n    this.initializeDisk();\n  },\n  methods: {\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n      this.diskRows = Array(rows).fill().map(() => Array(this.blocksPerRow).fill().map(() => ({\n        status: 'FREE',\n        fileId: null,\n        size: this.blockSize\n      })));\n    },\n    createFileOrDir() {\n      const newNode = {\n        label: this.fileForm.name,\n        type: this.fileForm.type,\n        children: this.fileForm.type === 'directory' ? [] : undefined,\n        size: this.fileForm.type === 'file' ? this.fileForm.size : 0\n      };\n      if (this.fileForm.type === 'file') {\n        this.allocateDiskSpace(newNode);\n      }\n      this.fileTree[0].children.push(newNode);\n      this.fileForm.name = '';\n    },\n    deleteNode(node, data) {\n      if (data.type === 'file') {\n        this.freeDiskSpace(data);\n      }\n      const parent = node.parent;\n      const children = parent.data.children || parent.data;\n      const index = children.findIndex(d => d.label === data.label);\n      children.splice(index, 1);\n    },\n    handleNodeClick(data) {\n      console.log(data);\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}MB`;\n      }\n      return '空闲块';\n    },\n    allocateDiskSpace(file) {\n      const blocksNeeded = Math.ceil(file.size / this.blockSize);\n      let allocatedBlocks = 0;\n      for (let row of this.diskRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED';\n            block.fileId = file.label;\n            allocatedBlocks++;\n            if (allocatedBlocks === blocksNeeded) {\n              this.usedSpace += file.size;\n              this.freeSpace -= file.size;\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    freeDiskSpace(file) {\n      let freedSize = 0;\n      for (let row of this.diskRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.fileId === file.label) {\n            block.status = 'FREE';\n            block.fileId = null;\n            freedSize += block.size;\n          }\n        }\n      }\n      this.usedSpace -= freedSize;\n      this.freeSpace += freedSize;\n    }\n  }\n};","map":{"version":3,"names":["name","data","fileForm","type","size","fileTree","label","children","defaultProps","totalSpace","usedSpace","freeSpace","blockSize","diskRows","blocksPerRow","updateInterval","created","initializeDisk","methods","totalBlocks","Math","ceil","rows","Array","fill","map","status","fileId","createFileOrDir","newNode","undefined","allocateDiskSpace","push","deleteNode","node","freeDiskSpace","parent","index","findIndex","d","splice","handleNodeClick","console","log","getBlockTooltip","block","file","blocksNeeded","allocatedBlocks","row","freedSize"],"sources":["src/components/FileSystem.vue"],"sourcesContent":["<template>\n  <div class=\"file-system\">\n    <div class=\"file-control\">\n      <el-form :model=\"fileForm\" label-width=\"100px\">\n        <el-form-item label=\"名称\">\n          <el-input v-model=\"fileForm.name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"类型\">\n          <el-radio-group v-model=\"fileForm.type\">\n            <el-radio label=\"file\">文件</el-radio>\n            <el-radio label=\"directory\">目录</el-radio>\n          </el-radio-group>\n        </el-form-item>\n        <el-form-item v-if=\"fileForm.type === 'file'\" label=\"文件大小(MB)\" label-width=\"180px\">\n          <el-input-number v-model=\"fileForm.size\" :min=\"1\" :max=\"1024\"></el-input-number>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createFileOrDir\">创建</el-button>\n        </el-form-item>\n      </el-form>\n\n      <div class=\"file-tree\">\n        <h3>文件系统结构</h3>\n        <el-tree\n          :data=\"fileTree\"\n          :props=\"defaultProps\"\n          @node-click=\"handleNodeClick\"\n        >\n          <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n            <span>\n              <i :class=\"data.type === 'directory' ? 'el-icon-folder' : 'el-icon-document'\"></i>\n              {{ node.label }}\n            </span>\n            <span>\n              <el-button\n                type=\"text\"\n                size=\"mini\"\n                @click=\"() => deleteNode(node, data)\">\n                删除\n              </el-button>\n            </span>\n          </span>\n        </el-tree>\n      </div>\n    </div>\n\n    <div class=\"disk-blocks\">\n      <h2>磁盘空间分配</h2>\n      <div class=\"disk-info\">\n        <div>总空间: {{ totalSpace }}MB</div>\n        <div>已用空间: {{ usedSpace }}MB</div>\n        <div>空闲空间: {{ freeSpace }}MB</div>\n      </div>\n      \n      <div class=\"disk-blocks-grid\">\n        <div v-for=\"(row, rowIndex) in diskRows\" :key=\"rowIndex\" class=\"disk-row\">\n          <div\n            v-for=\"(block, blockIndex) in row\"\n            :key=\"blockIndex\"\n            class=\"disk-block\"\n            :class=\"{\n              'allocated': block.status === 'ALLOCATED',\n              'free': block.status === 'FREE'\n            }\"\n            :title=\"getBlockTooltip(block)\"\n          ></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileForm: {\n        name: '',\n        type: 'file',\n        size: 1\n      },\n      fileTree: [{\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      totalSpace: 4096,\n      usedSpace: 0,\n      freeSpace: 4096,\n      blockSize: 8,\n      diskRows: [],\n      blocksPerRow: 32,\n      updateInterval: null\n    }\n  },\n  created() {\n    this.initializeDisk()\n  },\n  methods: {\n    initializeDisk() {\n      const totalBlocks = Math.ceil(this.totalSpace / this.blockSize)\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\n      \n      this.diskRows = Array(rows).fill().map(() => \n        Array(this.blocksPerRow).fill().map(() => ({\n          status: 'FREE',\n          fileId: null,\n          size: this.blockSize\n        }))\n      )\n    },\n    createFileOrDir() {\n      const newNode = {\n        label: this.fileForm.name,\n        type: this.fileForm.type,\n        children: this.fileForm.type === 'directory' ? [] : undefined,\n        size: this.fileForm.type === 'file' ? this.fileForm.size : 0\n      }\n      \n      if (this.fileForm.type === 'file') {\n        this.allocateDiskSpace(newNode)\n      }\n      \n      this.fileTree[0].children.push(newNode)\n      this.fileForm.name = ''\n    },\n    deleteNode(node, data) {\n      if (data.type === 'file') {\n        this.freeDiskSpace(data)\n      }\n      const parent = node.parent\n      const children = parent.data.children || parent.data\n      const index = children.findIndex(d => d.label === data.label)\n      children.splice(index, 1)\n    },\n    handleNodeClick(data) {\n      console.log(data)\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `文件: ${block.fileId}\\n大小: ${block.size}MB`\n      }\n      return '空闲块'\n    },\n    allocateDiskSpace(file) {\n      const blocksNeeded = Math.ceil(file.size / this.blockSize)\n      let allocatedBlocks = 0\n      \n      for (let row of this.diskRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED'\n            block.fileId = file.label\n            allocatedBlocks++\n            \n            if (allocatedBlocks === blocksNeeded) {\n              this.usedSpace += file.size\n              this.freeSpace -= file.size\n              return true\n            }\n          }\n        }\n      }\n      return false\n    },\n    freeDiskSpace(file) {\n      let freedSize = 0\n      \n      for (let row of this.diskRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.fileId === file.label) {\n            block.status = 'FREE'\n            block.fileId = null\n            freedSize += block.size\n          }\n        }\n      }\n      \n      this.usedSpace -= freedSize\n      this.freeSpace += freedSize\n    }\n  }\n}\n</script>\n\n<style scoped>\n.file-system {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  height: calc(100vh - 120px); /* 减去头部和padding的高度 */\n}\n\n.file-control {\n  flex: 4;\n  display: flex;\n  flex-direction: column;\n  border-right: 1px solid #dcdfe6;\n  padding-right: 20px;\n  font-size: 16px;\n}\n\n/* 添加表单相关样式 */\n:deep(.el-form-item__label) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input__inner) {\n  font-size: 16px !important;\n}\n\n:deep(.el-radio__label) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input-number__decrease),\n:deep(.el-input-number__increase) {\n  font-size: 16px !important;\n}\n\n:deep(.el-input-number__input) {\n  font-size: 16px !important;\n}\n\n:deep(.el-button) {\n  font-size: 16px !important;\n}\n\n.file-tree {\n  margin-top: 20px;\n  flex: 1;\n  overflow-y: auto;\n}\n\n.disk-blocks {\n  flex: 6;\n  display: flex;\n  flex-direction: column;\n}\n\n.disk-info {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 15px;\n  font-size: 16px;\n}\n\n.disk-blocks-grid {\n  border: 1px solid #dcdfe6;\n  padding: 15px;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow-y: auto;\n  max-height: calc(100vh - 250px);\n}\n\n.disk-row {\n  display: flex;\n  gap: 2px;\n  margin-bottom: 2px;\n  justify-content: center;\n}\n\n.disk-block {\n  width: 28px;\n  height: 28px;\n  border: 1px solid #dcdfe6;\n  cursor: pointer;\n  transition: all 0.3s ease;\n}\n\n.disk-block:hover {\n  transform: scale(1.1);\n  z-index: 1;\n}\n\n.disk-block.allocated {\n  background-color: #409eff;\n}\n\n.disk-block.free {\n  background-color: #f0f9eb;\n}\n\n.custom-tree-node {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  padding-right: 8px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}