{"ast":null,"code":"import axios from 'axios';\nexport default {\n  name: 'MemoryManagement',\n  data() {\n    return {\n      totalMemory: 1024,\n      // 总内存大小（MB）\n      usedMemory: 0,\n      freeMemory: 1024,\n      blockSize: 4,\n      // 每个块的大小（MB）\n      memoryRows: [],\n      blocksPerRow: 16,\n      updateInterval: null\n    };\n  },\n  computed: {\n    memoryUsagePercentage() {\n      return Math.round(this.usedMemory / this.totalMemory * 100);\n    },\n    memoryUsageColor() {\n      const percentage = this.memoryUsagePercentage;\n      if (percentage < 60) return '#67C23A';\n      if (percentage < 80) return '#E6A23C';\n      return '#F56C6C';\n    }\n  },\n  created() {\n    this.initializeMemory();\n    this.startMemoryUpdates();\n  },\n  beforeDestroy() {\n    this.stopMemoryUpdates();\n  },\n  methods: {\n    async fetchMemoryStatus() {\n      try {\n        // 获取内存使用率\n        const usageResponse = await axios.get('/memory/usage');\n        const usage = usageResponse.data;\n        this.usedMemory = Math.round(this.totalMemory * usage);\n        this.freeMemory = this.totalMemory - this.usedMemory;\n\n        // 获取内存状态\n        const statusResponse = await axios.get('/memory/status');\n        const memoryStatus = statusResponse.data;\n\n        // 更新内存块状态\n        let blockIndex = 0;\n        for (let row of this.memoryRows) {\n          for (let block of row) {\n            if (blockIndex < memoryStatus.length) {\n              const processId = memoryStatus[blockIndex];\n              block.status = processId === 0 ? 'FREE' : 'ALLOCATED';\n              block.processId = processId;\n            }\n            blockIndex++;\n          }\n        }\n      } catch (error) {\n        console.error('获取内存状态失败:', error);\n      }\n    },\n    startMemoryUpdates() {\n      this.updateInterval = setInterval(() => {\n        this.fetchMemoryStatus();\n      }, 2000); // 每2秒更新一次\n    },\n    stopMemoryUpdates() {\n      if (this.updateInterval) {\n        clearInterval(this.updateInterval);\n      }\n    },\n    initializeMemory() {\n      const totalBlocks = Math.ceil(this.totalMemory / this.blockSize);\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow);\n      this.memoryRows = Array(rows).fill().map(() => Array(this.blocksPerRow).fill().map(() => ({\n        status: 'FREE',\n        processId: null,\n        size: this.blockSize\n      })));\n\n      // 初始化时立即获取一次内存状态\n      this.fetchMemoryStatus();\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `进程ID: ${block.processId}\\n大小: ${block.size}MB`;\n      }\n      return '空闲块';\n    },\n    allocateMemory(processId, size) {\n      const blocksNeeded = Math.ceil(size / this.blockSize);\n      let allocatedBlocks = 0;\n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED';\n            block.processId = processId;\n            allocatedBlocks++;\n            if (allocatedBlocks === blocksNeeded) {\n              this.usedMemory += size;\n              this.freeMemory -= size;\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    },\n    freeMemory(processId) {\n      let freedSize = 0;\n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.processId === processId) {\n            block.status = 'FREE';\n            block.processId = null;\n            freedSize += block.size;\n          }\n        }\n      }\n      this.usedMemory -= freedSize;\n      this.freeMemory += freedSize;\n    }\n  }\n};","map":{"version":3,"names":["axios","name","data","totalMemory","usedMemory","freeMemory","blockSize","memoryRows","blocksPerRow","updateInterval","computed","memoryUsagePercentage","Math","round","memoryUsageColor","percentage","created","initializeMemory","startMemoryUpdates","beforeDestroy","stopMemoryUpdates","methods","fetchMemoryStatus","usageResponse","get","usage","statusResponse","memoryStatus","blockIndex","row","block","length","processId","status","error","console","setInterval","clearInterval","totalBlocks","ceil","rows","Array","fill","map","size","getBlockTooltip","allocateMemory","blocksNeeded","allocatedBlocks","freedSize"],"sources":["src/components/MemoryManagement.vue"],"sourcesContent":["<template>\n  <div class=\"memory-management\">\n    <h2>内存管理</h2>\n    <div class=\"memory-info\">\n      <div class=\"info-item\">总内存: {{ totalMemory }}MB</div>\n      <div class=\"info-item\">已用内存: {{ usedMemory }}MB</div>\n      <div class=\"info-item\">空闲内存: {{ freeMemory }}MB</div>\n      <div class=\"memory-usage\">\n        <div class=\"usage-label\">内存利用率: {{ memoryUsagePercentage }}%</div>\n        <el-progress \n          :percentage=\"memoryUsagePercentage\"\n          :color=\"memoryUsageColor\"\n          :stroke-width=\"15\"\n          :show-text=\"false\"\n        ></el-progress>\n      </div>\n    </div>\n    \n    <div class=\"memory-blocks\">\n      <div v-for=\"(row, rowIndex) in memoryRows\" :key=\"rowIndex\" class=\"memory-row\">\n        <div\n          v-for=\"(block, blockIndex) in row\"\n          :key=\"blockIndex\"\n          class=\"memory-block\"\n          :class=\"{\n            'allocated': block.status === 'ALLOCATED',\n            'free': block.status === 'FREE'\n          }\"\n          :title=\"getBlockTooltip(block)\"\n        ></div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  name: 'MemoryManagement',\n  data() {\n    return {\n      totalMemory: 1024, // 总内存大小（MB）\n      usedMemory: 0,\n      freeMemory: 1024,\n      blockSize: 4, // 每个块的大小（MB）\n      memoryRows: [],\n      blocksPerRow: 16,\n      updateInterval: null\n    }\n  },\n  computed: {\n    memoryUsagePercentage() {\n      return Math.round((this.usedMemory / this.totalMemory) * 100)\n    },\n    memoryUsageColor() {\n      const percentage = this.memoryUsagePercentage\n      if (percentage < 60) return '#67C23A'\n      if (percentage < 80) return '#E6A23C'\n      return '#F56C6C'\n    }\n  },\n  created() {\n    this.initializeMemory()\n    this.startMemoryUpdates()\n  },\n  beforeDestroy() {\n    this.stopMemoryUpdates()\n  },\n  methods: {\n    async fetchMemoryStatus() {\n      try {\n        // 获取内存使用率\n        const usageResponse = await axios.get('/memory/usage')\n        const usage = usageResponse.data\n        this.usedMemory = Math.round(this.totalMemory * usage)\n        this.freeMemory = this.totalMemory - this.usedMemory\n\n        // 获取内存状态\n        const statusResponse = await axios.get('/memory/status')\n        const memoryStatus = statusResponse.data\n        \n        // 更新内存块状态\n        let blockIndex = 0\n        for (let row of this.memoryRows) {\n          for (let block of row) {\n            if (blockIndex < memoryStatus.length) {\n              const processId = memoryStatus[blockIndex]\n              block.status = processId === 0 ? 'FREE' : 'ALLOCATED'\n              block.processId = processId\n            }\n            blockIndex++\n          }\n        }\n      } catch (error) {\n        console.error('获取内存状态失败:', error)\n      }\n    },\n    startMemoryUpdates() {\n      this.updateInterval = setInterval(() => {\n        this.fetchMemoryStatus()\n      }, 2000) // 每2秒更新一次\n    },\n    stopMemoryUpdates() {\n      if (this.updateInterval) {\n        clearInterval(this.updateInterval)\n      }\n    },\n    initializeMemory() {\n      const totalBlocks = Math.ceil(this.totalMemory / this.blockSize)\n      const rows = Math.ceil(totalBlocks / this.blocksPerRow)\n      \n      this.memoryRows = Array(rows).fill().map(() => \n        Array(this.blocksPerRow).fill().map(() => ({\n          status: 'FREE',\n          processId: null,\n          size: this.blockSize\n        }))\n      )\n      \n      // 初始化时立即获取一次内存状态\n      this.fetchMemoryStatus()\n    },\n    getBlockTooltip(block) {\n      if (block.status === 'ALLOCATED') {\n        return `进程ID: ${block.processId}\\n大小: ${block.size}MB`\n      }\n      return '空闲块'\n    },\n    allocateMemory(processId, size) {\n      const blocksNeeded = Math.ceil(size / this.blockSize)\n      let allocatedBlocks = 0\n      \n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'FREE') {\n            block.status = 'ALLOCATED'\n            block.processId = processId\n            allocatedBlocks++\n            \n            if (allocatedBlocks === blocksNeeded) {\n              this.usedMemory += size\n              this.freeMemory -= size\n              return true\n            }\n          }\n        }\n      }\n      return false\n    },\n    freeMemory(processId) {\n      let freedSize = 0\n      \n      for (let row of this.memoryRows) {\n        for (let block of row) {\n          if (block.status === 'ALLOCATED' && block.processId === processId) {\n            block.status = 'FREE'\n            block.processId = null\n            freedSize += block.size\n          }\n        }\n      }\n      \n      this.usedMemory -= freedSize\n      this.freeMemory += freedSize\n    }\n  }\n}\n</script>\n\n<style scoped>\n.memory-management {\n  padding: 20px;\n}\n\n.memory-info {\n  display: flex;\n  align-items: center;\n  gap: 20px;\n  margin-bottom: 20px;\n  flex-wrap: nowrap;\n}\n\n.info-item {\n  white-space: nowrap;\n}\n\n.memory-blocks {\n  border: 1px solid #dcdfe6;\n  padding: 10px;\n  background-color: #f5f7fa;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\n.memory-row {\n  display: flex;\n  gap: 2px;\n  margin-bottom: 2px;\n  justify-content: center;\n}\n\n.memory-block {\n  width: 30px;\n  height: 30px;\n  border: 1px solid #dcdfe6;\n  cursor: pointer;\n}\n\n.memory-block.allocated {\n  background-color: #409eff;\n}\n\n.memory-block.free {\n  background-color: #f0f9eb;\n}\n\n.memory-usage {\n  flex: 1;\n  min-width: 200px;\n  margin-left: 20px;\n}\n\n.usage-label {\n  margin-bottom: 5px;\n  font-weight: bold;\n  white-space: nowrap;\n}\n</style> "],"mappings":"AAoCA,OAAAA,KAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MAAA;MACAC,UAAA;MACAC,UAAA;MACAC,SAAA;MAAA;MACAC,UAAA;MACAC,YAAA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACAC,sBAAA;MACA,OAAAC,IAAA,CAAAC,KAAA,MAAAT,UAAA,QAAAD,WAAA;IACA;IACAW,iBAAA;MACA,MAAAC,UAAA,QAAAJ,qBAAA;MACA,IAAAI,UAAA;MACA,IAAAA,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,gBAAA;IACA,KAAAC,kBAAA;EACA;EACAC,cAAA;IACA,KAAAC,iBAAA;EACA;EACAC,OAAA;IACA,MAAAC,kBAAA;MACA;QACA;QACA,MAAAC,aAAA,SAAAvB,KAAA,CAAAwB,GAAA;QACA,MAAAC,KAAA,GAAAF,aAAA,CAAArB,IAAA;QACA,KAAAE,UAAA,GAAAQ,IAAA,CAAAC,KAAA,MAAAV,WAAA,GAAAsB,KAAA;QACA,KAAApB,UAAA,QAAAF,WAAA,QAAAC,UAAA;;QAEA;QACA,MAAAsB,cAAA,SAAA1B,KAAA,CAAAwB,GAAA;QACA,MAAAG,YAAA,GAAAD,cAAA,CAAAxB,IAAA;;QAEA;QACA,IAAA0B,UAAA;QACA,SAAAC,GAAA,SAAAtB,UAAA;UACA,SAAAuB,KAAA,IAAAD,GAAA;YACA,IAAAD,UAAA,GAAAD,YAAA,CAAAI,MAAA;cACA,MAAAC,SAAA,GAAAL,YAAA,CAAAC,UAAA;cACAE,KAAA,CAAAG,MAAA,GAAAD,SAAA;cACAF,KAAA,CAAAE,SAAA,GAAAA,SAAA;YACA;YACAJ,UAAA;UACA;QACA;MACA,SAAAM,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;MACA;IACA;IACAhB,mBAAA;MACA,KAAAT,cAAA,GAAA2B,WAAA;QACA,KAAAd,iBAAA;MACA;IACA;IACAF,kBAAA;MACA,SAAAX,cAAA;QACA4B,aAAA,MAAA5B,cAAA;MACA;IACA;IACAQ,iBAAA;MACA,MAAAqB,WAAA,GAAA1B,IAAA,CAAA2B,IAAA,MAAApC,WAAA,QAAAG,SAAA;MACA,MAAAkC,IAAA,GAAA5B,IAAA,CAAA2B,IAAA,CAAAD,WAAA,QAAA9B,YAAA;MAEA,KAAAD,UAAA,GAAAkC,KAAA,CAAAD,IAAA,EAAAE,IAAA,GAAAC,GAAA,OACAF,KAAA,MAAAjC,YAAA,EAAAkC,IAAA,GAAAC,GAAA;QACAV,MAAA;QACAD,SAAA;QACAY,IAAA,OAAAtC;MACA,GACA;;MAEA;MACA,KAAAgB,iBAAA;IACA;IACAuB,gBAAAf,KAAA;MACA,IAAAA,KAAA,CAAAG,MAAA;QACA,gBAAAH,KAAA,CAAAE,SAAA,SAAAF,KAAA,CAAAc,IAAA;MACA;MACA;IACA;IACAE,eAAAd,SAAA,EAAAY,IAAA;MACA,MAAAG,YAAA,GAAAnC,IAAA,CAAA2B,IAAA,CAAAK,IAAA,QAAAtC,SAAA;MACA,IAAA0C,eAAA;MAEA,SAAAnB,GAAA,SAAAtB,UAAA;QACA,SAAAuB,KAAA,IAAAD,GAAA;UACA,IAAAC,KAAA,CAAAG,MAAA;YACAH,KAAA,CAAAG,MAAA;YACAH,KAAA,CAAAE,SAAA,GAAAA,SAAA;YACAgB,eAAA;YAEA,IAAAA,eAAA,KAAAD,YAAA;cACA,KAAA3C,UAAA,IAAAwC,IAAA;cACA,KAAAvC,UAAA,IAAAuC,IAAA;cACA;YACA;UACA;QACA;MACA;MACA;IACA;IACAvC,WAAA2B,SAAA;MACA,IAAAiB,SAAA;MAEA,SAAApB,GAAA,SAAAtB,UAAA;QACA,SAAAuB,KAAA,IAAAD,GAAA;UACA,IAAAC,KAAA,CAAAG,MAAA,oBAAAH,KAAA,CAAAE,SAAA,KAAAA,SAAA;YACAF,KAAA,CAAAG,MAAA;YACAH,KAAA,CAAAE,SAAA;YACAiB,SAAA,IAAAnB,KAAA,CAAAc,IAAA;UACA;QACA;MACA;MAEA,KAAAxC,UAAA,IAAA6C,SAAA;MACA,KAAA5C,UAAA,IAAA4C,SAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}