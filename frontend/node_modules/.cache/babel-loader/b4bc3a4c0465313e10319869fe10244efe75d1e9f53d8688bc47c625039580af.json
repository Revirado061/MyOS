{"ast":null,"code":"import { fileSystemApi } from '@/api';\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileSystem: [{\n        id: 1,\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      dialogVisible: false,\n      dialogTitle: '',\n      isCreatingFile: false,\n      fileForm: {\n        name: '',\n        type: 'text',\n        size: 1\n      },\n      currentNode: null,\n      currentPath: '/'\n    };\n  },\n  created() {\n    this.fetchDirectoryContent();\n  },\n  methods: {\n    async fetchDirectoryContent() {\n      try {\n        const response = await fileSystemApi.listFiles();\n        this.updateFileSystemTree(response);\n      } catch (error) {\n        this.$message.error('获取目录内容失败');\n      }\n    },\n    updateFileSystemTree(content) {\n      const {\n        files,\n        directories\n      } = content;\n      const children = [];\n\n      // 添加目录\n      directories.forEach(dir => {\n        children.push({\n          id: Date.now() + Math.random(),\n          label: dir,\n          type: 'directory',\n          children: []\n        });\n      });\n\n      // 添加文件\n      files.forEach(file => {\n        children.push({\n          id: Date.now() + Math.random(),\n          label: file.name,\n          type: 'file',\n          size: file.size,\n          fileType: file.type\n        });\n      });\n      this.fileSystem[0].children = children;\n    },\n    createFile() {\n      this.dialogTitle = '创建文件';\n      this.isCreatingFile = true;\n      this.dialogVisible = true;\n    },\n    createDirectory() {\n      this.dialogTitle = '创建目录';\n      this.isCreatingFile = false;\n      this.dialogVisible = true;\n    },\n    deleteItem() {\n      if (!this.currentNode) {\n        this.$message.warning('请先选择要删除的项目');\n        return;\n      }\n      this.handleDelete(this.currentNode, this.currentNode.data);\n    },\n    handleNodeClick(data) {\n      this.currentNode = data;\n    },\n    handleEdit(node, data) {\n      console.log('编辑', node, data);\n    },\n    async handleDelete(node, data) {\n      try {\n        await this.$confirm('确认删除该' + (data.type === 'directory' ? '目录' : '文件') + '?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        if (data.type === 'directory') {\n          await fileSystemApi.deleteDirectory(data.label);\n        } else {\n          await fileSystemApi.deleteFile(data.label);\n        }\n        this.$message.success('删除成功');\n        this.fetchDirectoryContent();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('删除失败');\n        }\n      }\n    },\n    async submitForm() {\n      try {\n        if (!this.fileForm.name) {\n          this.$message.error('请输入名称');\n          return;\n        }\n        if (this.isCreatingFile) {\n          await fileSystemApi.createFile({\n            name: this.fileForm.name,\n            type: this.fileForm.type,\n            size: this.fileForm.size\n          });\n        } else {\n          await fileSystemApi.createDirectory({\n            name: this.fileForm.name\n          });\n        }\n        this.$message.success('创建成功');\n        this.dialogVisible = false;\n        this.fetchDirectoryContent();\n        this.resetForm();\n      } catch (error) {\n        this.$message.error('创建失败');\n      }\n    },\n    resetForm() {\n      this.fileForm = {\n        name: '',\n        type: 'text',\n        size: 1\n      };\n    }\n  }\n};","map":{"version":3,"names":["fileSystemApi","name","data","fileSystem","id","label","type","children","defaultProps","dialogVisible","dialogTitle","isCreatingFile","fileForm","size","currentNode","currentPath","created","fetchDirectoryContent","methods","response","listFiles","updateFileSystemTree","error","$message","content","files","directories","forEach","dir","push","Date","now","Math","random","file","fileType","createFile","createDirectory","deleteItem","warning","handleDelete","handleNodeClick","handleEdit","node","console","log","$confirm","confirmButtonText","cancelButtonText","deleteDirectory","deleteFile","success","submitForm","resetForm"],"sources":["src/views/FileSystem.vue"],"sourcesContent":["<template>\r\n  <div class=\"filesystem-container\">\r\n    <h2>文件系统</h2>\r\n\r\n    <!-- 文件系统操作按钮 -->\r\n    <div class=\"operation-buttons\">\r\n      <el-button type=\"primary\" @click=\"createFile\">创建文件</el-button>\r\n      <el-button type=\"success\" @click=\"createDirectory\">创建目录</el-button>\r\n      <el-button type=\"danger\" @click=\"deleteItem\">删除</el-button>\r\n    </div>\r\n\r\n    <!-- 文件系统树形结构 -->\r\n    <div class=\"filesystem-tree\">\r\n      <el-tree\r\n        :data=\"fileSystem\"\r\n        :props=\"defaultProps\"\r\n        @node-click=\"handleNodeClick\"\r\n        default-expand-all>\r\n        <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\r\n          <span>\r\n            <i :class=\"data.type === 'directory' ? 'el-icon-folder' : 'el-icon-document'\"></i>\r\n            {{ node.label }}\r\n          </span>\r\n          <span>\r\n            <el-button\r\n              type=\"text\"\r\n              size=\"mini\"\r\n              @click=\"() => handleEdit(node, data)\">\r\n              编辑\r\n            </el-button>\r\n            <el-button\r\n              type=\"text\"\r\n              size=\"mini\"\r\n              @click=\"() => handleDelete(node, data)\">\r\n              删除\r\n            </el-button>\r\n          </span>\r\n        </span>\r\n      </el-tree>\r\n    </div>\r\n\r\n    <!-- 创建文件对话框 -->\r\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"30%\">\r\n      <el-form :model=\"fileForm\" label-width=\"100px\">\r\n        <el-form-item label=\"名称\">\r\n          <el-input v-model=\"fileForm.name\"></el-input>\r\n        </el-form-item>\r\n        <el-form-item label=\"类型\" v-if=\"isCreatingFile\">\r\n          <el-select v-model=\"fileForm.type\" placeholder=\"请选择文件类型\">\r\n            <el-option label=\"文本文件\" value=\"text\"></el-option>\r\n            <el-option label=\"二进制文件\" value=\"binary\"></el-option>\r\n          </el-select>\r\n        </el-form-item>\r\n        <el-form-item label=\"大小(KB)\" v-if=\"isCreatingFile\">\r\n          <el-input-number v-model=\"fileForm.size\" :min=\"1\"></el-input-number>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { fileSystemApi } from '@/api'\r\n\r\nexport default {\r\n  name: 'FileSystem',\r\n  data() {\r\n    return {\r\n      fileSystem: [{\r\n        id: 1,\r\n        label: '根目录',\r\n        type: 'directory',\r\n        children: []\r\n      }],\r\n      defaultProps: {\r\n        children: 'children',\r\n        label: 'label'\r\n      },\r\n      dialogVisible: false,\r\n      dialogTitle: '',\r\n      isCreatingFile: false,\r\n      fileForm: {\r\n        name: '',\r\n        type: 'text',\r\n        size: 1\r\n      },\r\n      currentNode: null,\r\n      currentPath: '/'\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDirectoryContent()\r\n  },\r\n  methods: {\r\n    async fetchDirectoryContent() {\r\n      try {\r\n        const response = await fileSystemApi.listFiles()\r\n        this.updateFileSystemTree(response)\r\n      } catch (error) {\r\n        this.$message.error('获取目录内容失败')\r\n      }\r\n    },\r\n    updateFileSystemTree(content) {\r\n      const { files, directories } = content\r\n      const children = []\r\n      \r\n      // 添加目录\r\n      directories.forEach(dir => {\r\n        children.push({\r\n          id: Date.now() + Math.random(),\r\n          label: dir,\r\n          type: 'directory',\r\n          children: []\r\n        })\r\n      })\r\n      \r\n      // 添加文件\r\n      files.forEach(file => {\r\n        children.push({\r\n          id: Date.now() + Math.random(),\r\n          label: file.name,\r\n          type: 'file',\r\n          size: file.size,\r\n          fileType: file.type\r\n        })\r\n      })\r\n      \r\n      this.fileSystem[0].children = children\r\n    },\r\n    createFile() {\r\n      this.dialogTitle = '创建文件'\r\n      this.isCreatingFile = true\r\n      this.dialogVisible = true\r\n    },\r\n    createDirectory() {\r\n      this.dialogTitle = '创建目录'\r\n      this.isCreatingFile = false\r\n      this.dialogVisible = true\r\n    },\r\n    deleteItem() {\r\n      if (!this.currentNode) {\r\n        this.$message.warning('请先选择要删除的项目')\r\n        return\r\n      }\r\n      this.handleDelete(this.currentNode, this.currentNode.data)\r\n    },\r\n    handleNodeClick(data) {\r\n      this.currentNode = data\r\n    },\r\n    handleEdit(node, data) {\r\n      console.log('编辑', node, data)\r\n    },\r\n    async handleDelete(node, data) {\r\n      try {\r\n        await this.$confirm('确认删除该' + (data.type === 'directory' ? '目录' : '文件') + '?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n\r\n        if (data.type === 'directory') {\r\n          await fileSystemApi.deleteDirectory(data.label)\r\n        } else {\r\n          await fileSystemApi.deleteFile(data.label)\r\n        }\r\n\r\n        this.$message.success('删除成功')\r\n        this.fetchDirectoryContent()\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('删除失败')\r\n        }\r\n      }\r\n    },\r\n    async submitForm() {\r\n      try {\r\n        if (!this.fileForm.name) {\r\n          this.$message.error('请输入名称')\r\n          return\r\n        }\r\n\r\n        if (this.isCreatingFile) {\r\n          await fileSystemApi.createFile({\r\n            name: this.fileForm.name,\r\n            type: this.fileForm.type,\r\n            size: this.fileForm.size\r\n          })\r\n        } else {\r\n          await fileSystemApi.createDirectory({\r\n            name: this.fileForm.name\r\n          })\r\n        }\r\n\r\n        this.$message.success('创建成功')\r\n        this.dialogVisible = false\r\n        this.fetchDirectoryContent()\r\n        this.resetForm()\r\n      } catch (error) {\r\n        this.$message.error('创建失败')\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.fileForm = {\r\n        name: '',\r\n        type: 'text',\r\n        size: 1\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.filesystem-container {\r\n  padding: 20px;\r\n}\r\n\r\n.operation-buttons {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.operation-buttons .el-button {\r\n  margin-right: 10px;\r\n}\r\n\r\n.filesystem-tree {\r\n  margin-top: 20px;\r\n}\r\n\r\n.custom-tree-node {\r\n  flex: 1;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  font-size: 14px;\r\n  padding-right: 8px;\r\n}\r\n\r\n.custom-tree-node i {\r\n  margin-right: 5px;\r\n}\r\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}