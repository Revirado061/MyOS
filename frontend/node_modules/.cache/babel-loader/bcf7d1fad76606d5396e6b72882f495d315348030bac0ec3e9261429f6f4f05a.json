{"ast":null,"code":"import { memoryApi } from '@/api';\nexport default {\n  name: 'Memory',\n  data() {\n    return {\n      totalMemory: 1024,\n      memoryBlocks: [],\n      dialogVisible: false,\n      memoryForm: {\n        processId: 1,\n        size: 100\n      }\n    };\n  },\n  created() {\n    this.fetchMemoryStatus();\n  },\n  computed: {\n    usedMemory() {\n      return this.memoryBlocks.reduce((sum, block) => sum + block.size, 0);\n    },\n    freeMemory() {\n      return this.totalMemory - this.usedMemory;\n    }\n  },\n  methods: {\n    async fetchMemoryStatus() {\n      try {\n        const response = await memoryApi.getMemoryStatus();\n        this.totalMemory = response.totalMemory;\n        this.memoryBlocks = response.blocks;\n      } catch (error) {\n        this.$message.error('获取内存状态失败');\n      }\n    },\n    allocateMemory() {\n      this.dialogVisible = true;\n    },\n    async submitAllocation() {\n      try {\n        if (this.memoryForm.size > this.freeMemory) {\n          this.$message.error('内存不足');\n          return;\n        }\n        await memoryApi.allocateMemory(this.memoryForm);\n        this.$message.success('内存分配成功');\n        this.dialogVisible = false;\n        this.fetchMemoryStatus();\n        this.resetForm();\n      } catch (error) {\n        this.$message.error('内存分配失败');\n      }\n    },\n    async handleFree(row) {\n      try {\n        await this.$confirm('确认释放该内存块?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await memoryApi.freeMemory({\n          processId: row.processId\n        });\n        this.$message.success('内存释放成功');\n        this.fetchMemoryStatus();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('内存释放失败');\n        }\n      }\n    },\n    resetForm() {\n      this.memoryForm = {\n        processId: 1,\n        size: 100\n      };\n    }\n  }\n};","map":{"version":3,"names":["memoryApi","name","data","totalMemory","memoryBlocks","dialogVisible","memoryForm","processId","size","created","fetchMemoryStatus","computed","usedMemory","reduce","sum","block","freeMemory","methods","response","getMemoryStatus","blocks","error","$message","allocateMemory","submitAllocation","success","resetForm","handleFree","row","$confirm","confirmButtonText","cancelButtonText","type"],"sources":["src/views/Memory.vue"],"sourcesContent":["<template>\r\n  <div class=\"memory-container\">\r\n    <h2>内存管理</h2>\r\n\r\n    <!-- 内存状态概览 -->\r\n    <el-row :gutter=\"20\" class=\"memory-overview\">\r\n      <el-col :span=\"8\">\r\n        <el-card>\r\n          <div slot=\"header\">总内存</div>\r\n          <div class=\"memory-value\">1024 MB</div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"8\">\r\n        <el-card>\r\n          <div slot=\"header\">已使用</div>\r\n          <div class=\"memory-value\">{{ usedMemory }} MB</div>\r\n        </el-card>\r\n      </el-col>\r\n      <el-col :span=\"8\">\r\n        <el-card>\r\n          <div slot=\"header\">可用内存</div>\r\n          <div class=\"memory-value\">{{ freeMemory }} MB</div>\r\n        </el-card>\r\n      </el-col>\r\n    </el-row>\r\n\r\n    <!-- 内存分配操作 -->\r\n    <div class=\"memory-operations\">\r\n      <el-button type=\"primary\" @click=\"allocateMemory\">分配内存</el-button>\r\n      <el-button type=\"danger\" @click=\"freeMemory\">释放内存</el-button>\r\n    </div>\r\n\r\n    <!-- 内存使用情况表格 -->\r\n    <el-table :data=\"memoryBlocks\" style=\"width: 100%; margin-top: 20px\">\r\n      <el-table-column prop=\"id\" label=\"块ID\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"processId\" label=\"进程ID\" width=\"100\"></el-table-column>\r\n      <el-table-column prop=\"size\" label=\"大小(MB)\" width=\"120\"></el-table-column>\r\n      <el-table-column prop=\"startAddress\" label=\"起始地址\" width=\"150\"></el-table-column>\r\n      <el-table-column prop=\"status\" label=\"状态\" width=\"120\"></el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleFree(scope.row)\">释放</el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分配内存对话框 -->\r\n    <el-dialog title=\"分配内存\" :visible.sync=\"dialogVisible\" width=\"30%\">\r\n      <el-form :model=\"memoryForm\" label-width=\"100px\">\r\n        <el-form-item label=\"进程ID\">\r\n          <el-input-number v-model=\"memoryForm.processId\" :min=\"1\"></el-input-number>\r\n        </el-form-item>\r\n        <el-form-item label=\"内存大小(MB)\">\r\n          <el-input-number v-model=\"memoryForm.size\" :min=\"1\" :max=\"freeMemory\"></el-input-number>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitAllocation\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { memoryApi } from '@/api'\r\n\r\nexport default {\r\n  name: 'Memory',\r\n  data() {\r\n    return {\r\n      totalMemory: 1024,\r\n      memoryBlocks: [],\r\n      dialogVisible: false,\r\n      memoryForm: {\r\n        processId: 1,\r\n        size: 100\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchMemoryStatus()\r\n  },\r\n  computed: {\r\n    usedMemory() {\r\n      return this.memoryBlocks.reduce((sum, block) => sum + block.size, 0)\r\n    },\r\n    freeMemory() {\r\n      return this.totalMemory - this.usedMemory\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchMemoryStatus() {\r\n      try {\r\n        const response = await memoryApi.getMemoryStatus()\r\n        this.totalMemory = response.totalMemory\r\n        this.memoryBlocks = response.blocks\r\n      } catch (error) {\r\n        this.$message.error('获取内存状态失败')\r\n      }\r\n    },\r\n    allocateMemory() {\r\n      this.dialogVisible = true\r\n    },\r\n    async submitAllocation() {\r\n      try {\r\n        if (this.memoryForm.size > this.freeMemory) {\r\n          this.$message.error('内存不足')\r\n          return\r\n        }\r\n        await memoryApi.allocateMemory(this.memoryForm)\r\n        this.$message.success('内存分配成功')\r\n        this.dialogVisible = false\r\n        this.fetchMemoryStatus()\r\n        this.resetForm()\r\n      } catch (error) {\r\n        this.$message.error('内存分配失败')\r\n      }\r\n    },\r\n    async handleFree(row) {\r\n      try {\r\n        await this.$confirm('确认释放该内存块?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        await memoryApi.freeMemory({ processId: row.processId })\r\n        this.$message.success('内存释放成功')\r\n        this.fetchMemoryStatus()\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('内存释放失败')\r\n        }\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.memoryForm = {\r\n        processId: 1,\r\n        size: 100\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.memory-container {\r\n  padding: 20px;\r\n}\r\n\r\n.memory-overview {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.memory-value {\r\n  font-size: 24px;\r\n  font-weight: bold;\r\n  color: #409EFF;\r\n  text-align: center;\r\n}\r\n\r\n.memory-operations {\r\n  margin: 20px 0;\r\n}\r\n\r\n.memory-operations .el-button {\r\n  margin-right: 10px;\r\n}\r\n</style> "],"mappings":"AAiEA,SAAAA,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,aAAA;MACAC,UAAA;QACAC,SAAA;QACAC,IAAA;MACA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,iBAAA;EACA;EACAC,QAAA;IACAC,WAAA;MACA,YAAAR,YAAA,CAAAS,MAAA,EAAAC,GAAA,EAAAC,KAAA,KAAAD,GAAA,GAAAC,KAAA,CAAAP,IAAA;IACA;IACAQ,WAAA;MACA,YAAAb,WAAA,QAAAS,UAAA;IACA;EACA;EACAK,OAAA;IACA,MAAAP,kBAAA;MACA;QACA,MAAAQ,QAAA,SAAAlB,SAAA,CAAAmB,eAAA;QACA,KAAAhB,WAAA,GAAAe,QAAA,CAAAf,WAAA;QACA,KAAAC,YAAA,GAAAc,QAAA,CAAAE,MAAA;MACA,SAAAC,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAE,eAAA;MACA,KAAAlB,aAAA;IACA;IACA,MAAAmB,iBAAA;MACA;QACA,SAAAlB,UAAA,CAAAE,IAAA,QAAAQ,UAAA;UACA,KAAAM,QAAA,CAAAD,KAAA;UACA;QACA;QACA,MAAArB,SAAA,CAAAuB,cAAA,MAAAjB,UAAA;QACA,KAAAgB,QAAA,CAAAG,OAAA;QACA,KAAApB,aAAA;QACA,KAAAK,iBAAA;QACA,KAAAgB,SAAA;MACA,SAAAL,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACA,MAAAM,WAAAC,GAAA;MACA;QACA,WAAAC,QAAA;UACAC,iBAAA;UACAC,gBAAA;UACAC,IAAA;QACA;QACA,MAAAhC,SAAA,CAAAgB,UAAA;UAAAT,SAAA,EAAAqB,GAAA,CAAArB;QAAA;QACA,KAAAe,QAAA,CAAAG,OAAA;QACA,KAAAf,iBAAA;MACA,SAAAW,KAAA;QACA,IAAAA,KAAA;UACA,KAAAC,QAAA,CAAAD,KAAA;QACA;MACA;IACA;IACAK,UAAA;MACA,KAAApB,UAAA;QACAC,SAAA;QACAC,IAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}