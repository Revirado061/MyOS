{"ast":null,"code":"import { createProcess, getAllProcesses, getCurrentProcess } from '../api/process';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      timer: null\n    };\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses();\n    // 设置定时器，每1秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 1000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  methods: {\n    async fetchProcesses() {\n      try {\n        console.log('开始获取进程数据...');\n        const response = await getAllProcesses();\n        console.log('获取到的原始数据:', response);\n        if (response) {\n          // 清空所有队列\n          this.readyQueue = [];\n          this.runningQueue = [];\n          this.blockedQueue = [];\n          this.terminatedQueue = [];\n\n          // 根据进程状态分类\n          response.forEach(process => {\n            // console.log('处理进程:', process)\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process);\n                break;\n              case 'RUNNING':\n                this.runningQueue.push(process);\n                break;\n              case 'BLOCKED':\n                this.blockedQueue.push(process);\n                break;\n              case 'TERMINATED':\n                this.terminatedQueue.push(process);\n                break;\n            }\n          });\n\n          // console.log('就绪队列:', this.readyQueue)\n          // console.log('运行队列:', this.runningQueue)\n          // console.log('阻塞队列:', this.blockedQueue)\n          // console.log('终止队列:', this.terminatedQueue)\n        }\n      } catch (error) {\n        console.error('获取进程数据失败:', error);\n        this.$message.error('获取进程数据失败');\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        };\n        console.log(newProcess);\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n\n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data);\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error);\n        this.$message.error('创建进程失败，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["createProcess","getAllProcesses","getCurrentProcess","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","timer","created","fetchProcesses","setInterval","beforeDestroy","clearInterval","methods","console","log","response","forEach","process","state","push","error","$message","newProcess","id","Date","now","success"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"process-control\">\n      <el-form :model=\"processForm\" label-width=\"100px\" inline>\n        <el-form-item label=\"进程名称\">\n          <el-input v-model=\"processForm.name\" placeholder=\"请输入进程名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"优先级\">\n          <el-select v-model=\"processForm.priority\" placeholder=\"请选择优先级\">\n            <el-option label=\"高\" :value=\"1\"></el-option>\n            <el-option label=\"中\" :value=\"2\"></el-option>\n            <el-option label=\"低\" :value=\"3\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内存大小\">\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\" :step=\"64\"></el-input-number>\n          <span class=\"unit\">MB</span>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <div class=\"process-queues\">\n      <div class=\"queue-container\">\n        <h3>就绪队列</h3>\n        <div class=\"queue ready-queue\">\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>运行队列</h3>\n        <div class=\"queue running-queue\">\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>阻塞队列</h3>\n        <div class=\"queue blocked-queue\">\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>终止队列</h3>\n        <div class=\"queue terminated-queue\">\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createProcess,getAllProcesses,getCurrentProcess } from '../api/process'\n\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      timer: null\n    }\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses()\n    // 设置定时器，每1秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 1000)\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  },\n  methods: {\n    async fetchProcesses() {\n      try {\n        console.log('开始获取进程数据...')\n        const response = await getAllProcesses()\n        console.log('获取到的原始数据:', response)\n        \n        if (response) {\n          // 清空所有队列\n          this.readyQueue = []\n          this.runningQueue = []\n          this.blockedQueue = []\n          this.terminatedQueue = []\n          \n          // 根据进程状态分类\n          response.forEach(process => {\n            // console.log('处理进程:', process)\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process)\n                break\n              case 'RUNNING':\n                this.runningQueue.push(process)\n                break\n              case 'BLOCKED':\n                this.blockedQueue.push(process)\n                break\n              case 'TERMINATED':\n                this.terminatedQueue.push(process)\n                break\n            }\n          })\n          \n          // console.log('就绪队列:', this.readyQueue)\n          // console.log('运行队列:', this.runningQueue)\n          // console.log('阻塞队列:', this.blockedQueue)\n          // console.log('终止队列:', this.terminatedQueue)\n        }\n      } catch (error) {\n        console.error('获取进程数据失败:', error)\n        this.$message.error('获取进程数据失败')\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        }\n        console.log(newProcess)\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess)\n        \n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data)\n          this.processForm.name = ''\n          this.$message.success('进程创建成功')\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error)\n        this.$message.error('创建进程失败，请重试')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 20px;\n  gap: 20px;\n}\n\n.process-control {\n  width: 100%;\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.process-queues {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  width: 100%;\n}\n\n.queue-container {\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  display: flex;\n  flex-direction: column;\n}\n\n.queue-container h3 {\n  margin: 0;\n  padding: 15px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #f5f7fa;\n  border-radius: 4px 4px 0 0;\n}\n\n.queue {\n  flex: 1;\n  min-height: 200px;\n  max-height: 300px;\n  overflow-y: auto;\n  padding: 15px;\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n}\n\n.process-tag {\n  margin: 0;\n  padding: 8px 12px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.process-tag .process-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.process-tag .process-actions {\n  display: flex;\n  gap: 5px;\n}\n</style> "],"mappings":"AAiFA,SAAAA,aAAA,EAAAC,eAAA,EAAAC,iBAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAF,IAAA;QACAG,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,eAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,cAAA;IACA;IACA,KAAAF,KAAA,GAAAG,WAAA,MAAAD,cAAA;EACA;EACAE,cAAA;IACA;IACA,SAAAJ,KAAA;MACAK,aAAA,MAAAL,KAAA;IACA;EACA;EACAM,OAAA;IACA,MAAAJ,eAAA;MACA;QACAK,OAAA,CAAAC,GAAA;QACA,MAAAC,QAAA,SAAApB,eAAA;QACAkB,OAAA,CAAAC,GAAA,cAAAC,QAAA;QAEA,IAAAA,QAAA;UACA;UACA,KAAAb,UAAA;UACA,KAAAC,YAAA;UACA,KAAAC,YAAA;UACA,KAAAC,eAAA;;UAEA;UACAU,QAAA,CAAAC,OAAA,CAAAC,OAAA;YACA;YACA,QAAAA,OAAA,CAAAC,KAAA;cACA;gBACA,KAAAhB,UAAA,CAAAiB,IAAA,CAAAF,OAAA;gBACA;cACA;gBACA,KAAAd,YAAA,CAAAgB,IAAA,CAAAF,OAAA;gBACA;cACA;gBACA,KAAAb,YAAA,CAAAe,IAAA,CAAAF,OAAA;gBACA;cACA;gBACA,KAAAZ,eAAA,CAAAc,IAAA,CAAAF,OAAA;gBACA;YACA;UACA;;UAEA;UACA;UACA;UACA;QACA;MACA,SAAAG,KAAA;QACAP,OAAA,CAAAO,KAAA,cAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACA,MAAA1B,cAAA;MACA;QACA,MAAA4B,UAAA;UACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;UACA5B,IAAA,OAAAE,WAAA,CAAAF,IAAA;UACAG,QAAA,OAAAD,WAAA,CAAAC,QAAA;UACAC,UAAA,OAAAF,WAAA,CAAAE,UAAA;UACAiB,KAAA;QACA;QACAL,OAAA,CAAAC,GAAA,CAAAQ,UAAA;QACA;QACA,MAAAP,QAAA,SAAArB,aAAA,CAAA4B,UAAA;;QAEA;QACA,IAAAP,QAAA,CAAAjB,IAAA;UACA,KAAAI,UAAA,CAAAiB,IAAA,CAAAJ,QAAA,CAAAjB,IAAA;UACA,KAAAC,WAAA,CAAAF,IAAA;UACA,KAAAwB,QAAA,CAAAK,OAAA;QACA;MACA,SAAAN,KAAA;QACAP,OAAA,CAAAO,KAAA,YAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}