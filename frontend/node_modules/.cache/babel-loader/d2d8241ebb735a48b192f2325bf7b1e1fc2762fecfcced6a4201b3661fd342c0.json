{"ast":null,"code":"import { deviceApi } from '@/api';\nexport default {\n  name: 'Device',\n  data() {\n    return {\n      devices: [],\n      dialogVisible: false,\n      deviceForm: {\n        processId: 1\n      },\n      selectedDevice: null\n    };\n  },\n  created() {\n    this.fetchDevices();\n  },\n  methods: {\n    async fetchDevices() {\n      try {\n        const response = await deviceApi.getAvailableDevices();\n        this.devices = response;\n      } catch (error) {\n        this.$message.error('获取设备列表失败');\n      }\n    },\n    getStatusType(status) {\n      const statusMap = {\n        'IDLE': 'success',\n        'BUSY': 'warning',\n        'ERROR': 'danger'\n      };\n      return statusMap[status] || 'info';\n    },\n    handleAllocate(device) {\n      this.selectedDevice = device;\n      this.dialogVisible = true;\n    },\n    async submitAllocation() {\n      try {\n        await deviceApi.allocateDevice({\n          deviceCode: this.selectedDevice.deviceCode,\n          processId: this.deviceForm.processId\n        });\n        this.$message.success('设备分配成功');\n        this.dialogVisible = false;\n        this.fetchDevices();\n        this.resetForm();\n      } catch (error) {\n        this.$message.error('设备分配失败');\n      }\n    },\n    async handleRelease(device) {\n      try {\n        await this.$confirm('确认释放该设备?', '提示', {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        });\n        await deviceApi.releaseDevice({\n          deviceCode: device.deviceCode,\n          processId: device.occupiedByProcess\n        });\n        this.$message.success('设备释放成功');\n        this.fetchDevices();\n      } catch (error) {\n        if (error !== 'cancel') {\n          this.$message.error('设备释放失败');\n        }\n      }\n    },\n    resetForm() {\n      this.deviceForm = {\n        processId: 1\n      };\n      this.selectedDevice = null;\n    }\n  }\n};","map":{"version":3,"names":["deviceApi","name","data","devices","dialogVisible","deviceForm","processId","selectedDevice","created","fetchDevices","methods","response","getAvailableDevices","error","$message","getStatusType","status","statusMap","handleAllocate","device","submitAllocation","allocateDevice","deviceCode","success","resetForm","handleRelease","$confirm","confirmButtonText","cancelButtonText","type","releaseDevice","occupiedByProcess"],"sources":["src/views/Device.vue"],"sourcesContent":["<template>\r\n  <div class=\"device-container\">\r\n    <h2>设备管理</h2>\r\n\r\n    <!-- 设备操作按钮 -->\r\n    <div class=\"operation-buttons\">\r\n      <el-button type=\"primary\" @click=\"requestDevice\">申请设备</el-button>\r\n      <el-button type=\"success\" @click=\"releaseDevice\">释放设备</el-button>\r\n    </div>\r\n\r\n    <!-- 设备列表 -->\r\n    <el-table :data=\"devices\" style=\"width: 100%\">\r\n      <el-table-column prop=\"deviceCode\" label=\"设备编号\" width=\"120\"></el-table-column>\r\n      <el-table-column prop=\"type\" label=\"设备类型\" width=\"120\"></el-table-column>\r\n      <el-table-column prop=\"status\" label=\"状态\" width=\"120\">\r\n        <template slot-scope=\"scope\">\r\n          <el-tag :type=\"getStatusType(scope.row.status)\">\r\n            {{ scope.row.status }}\r\n          </el-tag>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"occupiedByProcess\" label=\"占用进程\" width=\"120\"></el-table-column>\r\n      <el-table-column prop=\"allocatedTime\" label=\"分配时间\" width=\"180\"></el-table-column>\r\n      <el-table-column label=\"操作\">\r\n        <template slot-scope=\"scope\">\r\n          <el-button\r\n            size=\"mini\"\r\n            type=\"primary\"\r\n            @click=\"handleAllocate(scope.row)\"\r\n            :disabled=\"scope.row.status !== 'IDLE'\">\r\n            分配\r\n          </el-button>\r\n          <el-button\r\n            size=\"mini\"\r\n            type=\"danger\"\r\n            @click=\"handleRelease(scope.row)\"\r\n            :disabled=\"scope.row.status !== 'BUSY'\">\r\n            释放\r\n          </el-button>\r\n        </template>\r\n      </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分配设备对话框 -->\r\n    <el-dialog title=\"分配设备\" :visible.sync=\"dialogVisible\" width=\"30%\">\r\n      <el-form :model=\"deviceForm\" label-width=\"100px\">\r\n        <el-form-item label=\"进程ID\">\r\n          <el-input-number v-model=\"deviceForm.processId\" :min=\"1\"></el-input-number>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"submitAllocation\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { deviceApi } from '@/api'\r\n\r\nexport default {\r\n  name: 'Device',\r\n  data() {\r\n    return {\r\n      devices: [],\r\n      dialogVisible: false,\r\n      deviceForm: {\r\n        processId: 1\r\n      },\r\n      selectedDevice: null\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchDevices()\r\n  },\r\n  methods: {\r\n    async fetchDevices() {\r\n      try {\r\n        const response = await deviceApi.getAvailableDevices()\r\n        this.devices = response\r\n      } catch (error) {\r\n        this.$message.error('获取设备列表失败')\r\n      }\r\n    },\r\n    getStatusType(status) {\r\n      const statusMap = {\r\n        'IDLE': 'success',\r\n        'BUSY': 'warning',\r\n        'ERROR': 'danger'\r\n      }\r\n      return statusMap[status] || 'info'\r\n    },\r\n    handleAllocate(device) {\r\n      this.selectedDevice = device\r\n      this.dialogVisible = true\r\n    },\r\n    async submitAllocation() {\r\n      try {\r\n        await deviceApi.allocateDevice({\r\n          deviceCode: this.selectedDevice.deviceCode,\r\n          processId: this.deviceForm.processId\r\n        })\r\n        this.$message.success('设备分配成功')\r\n        this.dialogVisible = false\r\n        this.fetchDevices()\r\n        this.resetForm()\r\n      } catch (error) {\r\n        this.$message.error('设备分配失败')\r\n      }\r\n    },\r\n    async handleRelease(device) {\r\n      try {\r\n        await this.$confirm('确认释放该设备?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        })\r\n        await deviceApi.releaseDevice({\r\n          deviceCode: device.deviceCode,\r\n          processId: device.occupiedByProcess\r\n        })\r\n        this.$message.success('设备释放成功')\r\n        this.fetchDevices()\r\n      } catch (error) {\r\n        if (error !== 'cancel') {\r\n          this.$message.error('设备释放失败')\r\n        }\r\n      }\r\n    },\r\n    resetForm() {\r\n      this.deviceForm = {\r\n        processId: 1\r\n      }\r\n      this.selectedDevice = null\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.device-container {\r\n  padding: 20px;\r\n}\r\n\r\n.operation-buttons {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.operation-buttons .el-button {\r\n  margin-right: 10px;\r\n}\r\n</style> "],"mappings":"AA2DA,SAAAA,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,aAAA;MACAC,UAAA;QACAC,SAAA;MACA;MACAC,cAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,YAAA;EACA;EACAC,OAAA;IACA,MAAAD,aAAA;MACA;QACA,MAAAE,QAAA,SAAAX,SAAA,CAAAY,mBAAA;QACA,KAAAT,OAAA,GAAAQ,QAAA;MACA,SAAAE,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAE,cAAAC,MAAA;MACA,MAAAC,SAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,SAAA,CAAAD,MAAA;IACA;IACAE,eAAAC,MAAA;MACA,KAAAZ,cAAA,GAAAY,MAAA;MACA,KAAAf,aAAA;IACA;IACA,MAAAgB,iBAAA;MACA;QACA,MAAApB,SAAA,CAAAqB,cAAA;UACAC,UAAA,OAAAf,cAAA,CAAAe,UAAA;UACAhB,SAAA,OAAAD,UAAA,CAAAC;QACA;QACA,KAAAQ,QAAA,CAAAS,OAAA;QACA,KAAAnB,aAAA;QACA,KAAAK,YAAA;QACA,KAAAe,SAAA;MACA,SAAAX,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACA,MAAAY,cAAAN,MAAA;MACA;QACA,WAAAO,QAAA;UACAC,iBAAA;UACAC,gBAAA;UACAC,IAAA;QACA;QACA,MAAA7B,SAAA,CAAA8B,aAAA;UACAR,UAAA,EAAAH,MAAA,CAAAG,UAAA;UACAhB,SAAA,EAAAa,MAAA,CAAAY;QACA;QACA,KAAAjB,QAAA,CAAAS,OAAA;QACA,KAAAd,YAAA;MACA,SAAAI,KAAA;QACA,IAAAA,KAAA;UACA,KAAAC,QAAA,CAAAD,KAAA;QACA;MACA;IACA;IACAW,UAAA;MACA,KAAAnB,UAAA;QACAC,SAAA;MACA;MACA,KAAAC,cAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}