{"ast":null,"code":"import request from './config';\n\n// 进程相关 API\nexport const processApi = {\n  // 创建进程\n  createProcess: processData => {\n    return request.post('/process', processData);\n  },\n  // 获取所有进程\n  getAllProcesses: () => {\n    return request.get('/process');\n  },\n  // 获取特定状态的进程\n  getProcessesByState: state => {\n    return request.get(`/process/${state}`);\n  },\n  // 获取当前运行进程\n  getCurrentProcess: () => {\n    return request.get('/process/current');\n  },\n  // 删除进程\n  deleteProcess: id => {\n    return request.delete(`/process/${id}`);\n  },\n  // 更新进程状态\n  updateProcessState: (id, state) => {\n    return request.put(`/process/${id}/state`, {\n      state\n    });\n  },\n  // 终止进程\n  terminateProcess: id => {\n    return request.post(`/process/${id}/terminate`);\n  },\n  // 更新进程优先级\n  updateProcessPriority: (id, priority) => {\n    return request.put(`/process/${id}/priority`, {\n      priority\n    });\n  },\n  // 获取进程详细信息\n  getProcessInfo: id => {\n    return request.get(`/process/${id}/info`);\n  },\n  // 获取进程统计信息\n  getProcessStats: () => {\n    return request.get('/process/stats');\n  },\n  // 设置调度算法\n  setSchedulingAlgorithm: algorithm => {\n    return request.put('/process/scheduling-algorithm', {\n      algorithm: algorithm\n    });\n  },\n  // 获取当前调度算法\n  getSchedulingAlgorithm: () => {\n    return request.get('/process/scheduling-algorithm');\n  },\n  // 批量更新进程优先级\n  batchUpdatePriorities: priorities => {\n    return request.put('/process/batch-update-priorities', priorities);\n  }\n};\n\n// 中断相关 API\nexport const interruptApi = {\n  // 触发进程中断\n  triggerInterrupt: (id, reason) => {\n    return request.post(`/process/${id}/interrupt`, {\n      reason\n    });\n  }\n};\n\n// 设备相关 API\nexport const deviceApi = {\n  // 请求设备\n  requestDevice: (id, deviceType) => {\n    return request.post(`/process/${id}/request-device`, {\n      deviceType\n    });\n  },\n  // 释放设备\n  releaseDevice: (id, deviceType) => {\n    return request.post(`/process/${id}/release-device`, {\n      deviceType\n    });\n  }\n};","map":{"version":3,"names":["request","processApi","createProcess","processData","post","getAllProcesses","get","getProcessesByState","state","getCurrentProcess","deleteProcess","id","delete","updateProcessState","put","terminateProcess","updateProcessPriority","priority","getProcessInfo","getProcessStats","setSchedulingAlgorithm","algorithm","getSchedulingAlgorithm","batchUpdatePriorities","priorities","interruptApi","triggerInterrupt","reason","deviceApi","requestDevice","deviceType","releaseDevice"],"sources":["D:/git_project/MyOS_new/frontend/src/api/process_interrupt_device.js"],"sourcesContent":["import request from './config'\n\n// 进程相关 API\nexport const processApi = {\n    // 创建进程\n    createProcess: (processData) => {\n        return request.post('/process', processData);\n    },\n\n    // 获取所有进程\n    getAllProcesses: () => {\n        return request.get('/process');\n    },\n\n    // 获取特定状态的进程\n    getProcessesByState: (state) => {\n        return request.get(`/process/${state}`);\n    },\n\n    // 获取当前运行进程\n    getCurrentProcess: () => {\n        return request.get('/process/current');\n    },\n\n    // 删除进程\n    deleteProcess: (id) => {\n        return request.delete(`/process/${id}`);\n    },\n\n    // 更新进程状态\n    updateProcessState: (id, state) => {\n        return request.put(`/process/${id}/state`, { state });\n    },\n\n    // 终止进程\n    terminateProcess: (id) => {\n        return request.post(`/process/${id}/terminate`);\n    },\n\n    // 更新进程优先级\n    updateProcessPriority: (id, priority) => {\n        return request.put(`/process/${id}/priority`, { priority });\n    },\n\n    // 获取进程详细信息\n    getProcessInfo: (id) => {\n        return request.get(`/process/${id}/info`);\n    },\n\n    // 获取进程统计信息\n    getProcessStats: () => {\n        return request.get('/process/stats');\n    },\n\n    // 设置调度算法\n    setSchedulingAlgorithm: (algorithm) => {\n        return request.put('/process/scheduling-algorithm', { algorithm: algorithm });\n    },\n\n    // 获取当前调度算法\n    getSchedulingAlgorithm: () => {\n        return request.get('/process/scheduling-algorithm');\n    },\n\n    // 批量更新进程优先级\n    batchUpdatePriorities: (priorities) => {\n        return request.put('/process/batch-update-priorities', priorities);\n    }\n};\n\n// 中断相关 API\nexport const interruptApi = {\n    // 触发进程中断\n    triggerInterrupt: (id, reason) => {\n        return request.post(`/process/${id}/interrupt`, { reason });\n    }\n};\n\n// 设备相关 API\nexport const deviceApi = {\n    // 请求设备\n    requestDevice: (id, deviceType) => {\n        return request.post(`/process/${id}/request-device`, { deviceType });\n    },\n\n    // 释放设备\n    releaseDevice: (id, deviceType) => {\n        return request.post(`/process/${id}/release-device`, { deviceType });\n    }\n};\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,UAAU;;AAE9B;AACA,OAAO,MAAMC,UAAU,GAAG;EACtB;EACAC,aAAa,EAAGC,WAAW,IAAK;IAC5B,OAAOH,OAAO,CAACI,IAAI,CAAC,UAAU,EAAED,WAAW,CAAC;EAChD,CAAC;EAED;EACAE,eAAe,EAAEA,CAAA,KAAM;IACnB,OAAOL,OAAO,CAACM,GAAG,CAAC,UAAU,CAAC;EAClC,CAAC;EAED;EACAC,mBAAmB,EAAGC,KAAK,IAAK;IAC5B,OAAOR,OAAO,CAACM,GAAG,CAAC,YAAYE,KAAK,EAAE,CAAC;EAC3C,CAAC;EAED;EACAC,iBAAiB,EAAEA,CAAA,KAAM;IACrB,OAAOT,OAAO,CAACM,GAAG,CAAC,kBAAkB,CAAC;EAC1C,CAAC;EAED;EACAI,aAAa,EAAGC,EAAE,IAAK;IACnB,OAAOX,OAAO,CAACY,MAAM,CAAC,YAAYD,EAAE,EAAE,CAAC;EAC3C,CAAC;EAED;EACAE,kBAAkB,EAAEA,CAACF,EAAE,EAAEH,KAAK,KAAK;IAC/B,OAAOR,OAAO,CAACc,GAAG,CAAC,YAAYH,EAAE,QAAQ,EAAE;MAAEH;IAAM,CAAC,CAAC;EACzD,CAAC;EAED;EACAO,gBAAgB,EAAGJ,EAAE,IAAK;IACtB,OAAOX,OAAO,CAACI,IAAI,CAAC,YAAYO,EAAE,YAAY,CAAC;EACnD,CAAC;EAED;EACAK,qBAAqB,EAAEA,CAACL,EAAE,EAAEM,QAAQ,KAAK;IACrC,OAAOjB,OAAO,CAACc,GAAG,CAAC,YAAYH,EAAE,WAAW,EAAE;MAAEM;IAAS,CAAC,CAAC;EAC/D,CAAC;EAED;EACAC,cAAc,EAAGP,EAAE,IAAK;IACpB,OAAOX,OAAO,CAACM,GAAG,CAAC,YAAYK,EAAE,OAAO,CAAC;EAC7C,CAAC;EAED;EACAQ,eAAe,EAAEA,CAAA,KAAM;IACnB,OAAOnB,OAAO,CAACM,GAAG,CAAC,gBAAgB,CAAC;EACxC,CAAC;EAED;EACAc,sBAAsB,EAAGC,SAAS,IAAK;IACnC,OAAOrB,OAAO,CAACc,GAAG,CAAC,+BAA+B,EAAE;MAAEO,SAAS,EAAEA;IAAU,CAAC,CAAC;EACjF,CAAC;EAED;EACAC,sBAAsB,EAAEA,CAAA,KAAM;IAC1B,OAAOtB,OAAO,CAACM,GAAG,CAAC,+BAA+B,CAAC;EACvD,CAAC;EAED;EACAiB,qBAAqB,EAAGC,UAAU,IAAK;IACnC,OAAOxB,OAAO,CAACc,GAAG,CAAC,kCAAkC,EAAEU,UAAU,CAAC;EACtE;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAG;EACxB;EACAC,gBAAgB,EAAEA,CAACf,EAAE,EAAEgB,MAAM,KAAK;IAC9B,OAAO3B,OAAO,CAACI,IAAI,CAAC,YAAYO,EAAE,YAAY,EAAE;MAAEgB;IAAO,CAAC,CAAC;EAC/D;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAG;EACrB;EACAC,aAAa,EAAEA,CAAClB,EAAE,EAAEmB,UAAU,KAAK;IAC/B,OAAO9B,OAAO,CAACI,IAAI,CAAC,YAAYO,EAAE,iBAAiB,EAAE;MAAEmB;IAAW,CAAC,CAAC;EACxE,CAAC;EAED;EACAC,aAAa,EAAEA,CAACpB,EAAE,EAAEmB,UAAU,KAAK;IAC/B,OAAO9B,OAAO,CAACI,IAAI,CAAC,YAAYO,EAAE,iBAAiB,EAAE;MAAEmB;IAAW,CAAC,CAAC;EACxE;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}