{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: 'http://localhost:8080',\n  // 后端服务地址\n  timeout: 5000\n});\n\n// 进程管理API\nexport const processApi = {\n  // 创建进程\n  createProcess(data) {\n    return api.post('/process', data);\n  },\n  // 获取所有进程\n  getAllProcesses() {\n    return api.get('/process');\n  },\n  // 获取当前运行进程\n  getCurrentProcess() {\n    return api.get('/process/current');\n  }\n};\n\n// 内存管理API\nexport const memoryApi = {\n  // 分配内存\n  allocateMemory(data) {\n    return api.post('/memory/allocate', data);\n  },\n  // 释放内存\n  freeMemory(data) {\n    return api.post('/memory/free', data);\n  },\n  // 获取内存状态\n  getMemoryStatus() {\n    return api.get('/memory/status');\n  }\n};\n\n// 文件系统API\nexport const fileSystemApi = {\n  // 创建文件\n  createFile(data) {\n    return api.post('/file', data);\n  },\n  // 删除文件\n  deleteFile(name) {\n    return api.delete(`/file/${name}`);\n  },\n  // 读取文件内容\n  readFileContent(name) {\n    return api.get(`/file/${name}/content`);\n  },\n  // 写入文件内容\n  writeFileContent(name, content) {\n    return api.post(`/file/${name}/content`, {\n      content\n    });\n  },\n  // 创建目录\n  createDirectory(data) {\n    return api.post('/file/directory', data);\n  },\n  // 切换目录\n  changeDirectory(data) {\n    return api.post('/file/change-directory', data);\n  },\n  // 删除目录\n  deleteDirectory(name) {\n    return api.delete(`/file/directory/${name}`);\n  }\n};\n\n// 设备管理API\nexport const deviceApi = {\n  // 获取可用设备\n  getAvailableDevices() {\n    return api.get('/device/available');\n  },\n  // 获取设备状态\n  getDeviceStatus(deviceCode) {\n    return api.get('/device/status', {\n      params: {\n        deviceCode\n      }\n    });\n  },\n  // 分配设备\n  allocateDevice(data) {\n    return api.post('/device/allocate', data);\n  },\n  // 释放设备\n  releaseDevice(data) {\n    return api.post('/device/release', data);\n  }\n};\n\n// 中断处理API\nexport const interruptApi = {\n  // 获取中断状态\n  getInterruptStatus() {\n    return api.get('/interrupt/status');\n  },\n  // 触发中断\n  triggerInterrupt(data) {\n    return api.post('/interrupt/trigger', data);\n  }\n};\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  // 对响应数据做点什么\n  return response.data;\n}, error => {\n  // 对响应错误做点什么\n  if (error.response) {\n    switch (error.response.status) {\n      case 400:\n        console.error('请求参数错误');\n        break;\n      case 401:\n        console.error('未授权');\n        break;\n      case 403:\n        console.error('禁止访问');\n        break;\n      case 404:\n        console.error('资源不存在');\n        break;\n      case 500:\n        console.error('服务器内部错误');\n        break;\n      default:\n        console.error('未知错误');\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","timeout","processApi","createProcess","data","post","getAllProcesses","get","getCurrentProcess","memoryApi","allocateMemory","freeMemory","getMemoryStatus","fileSystemApi","createFile","deleteFile","name","delete","readFileContent","writeFileContent","content","createDirectory","changeDirectory","deleteDirectory","deviceApi","getAvailableDevices","getDeviceStatus","deviceCode","params","allocateDevice","releaseDevice","interruptApi","getInterruptStatus","triggerInterrupt","interceptors","request","use","config","error","Promise","reject","response","status","console"],"sources":["D:/git_project/MyOS/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios'\r\n\r\n// 创建axios实例\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:8080',  // 后端服务地址\r\n  timeout: 5000\r\n})\r\n\r\n// 进程管理API\r\nexport const processApi = {\r\n  // 创建进程\r\n  createProcess(data) {\r\n    return api.post('/process', data)\r\n  },\r\n  // 获取所有进程\r\n  getAllProcesses() {\r\n    return api.get('/process')\r\n  },\r\n  // 获取当前运行进程\r\n  getCurrentProcess() {\r\n    return api.get('/process/current')\r\n  }\r\n}\r\n\r\n// 内存管理API\r\nexport const memoryApi = {\r\n  // 分配内存\r\n  allocateMemory(data) {\r\n    return api.post('/memory/allocate', data)\r\n  },\r\n  // 释放内存\r\n  freeMemory(data) {\r\n    return api.post('/memory/free', data)\r\n  },\r\n  // 获取内存状态\r\n  getMemoryStatus() {\r\n    return api.get('/memory/status')\r\n  }\r\n}\r\n\r\n// 文件系统API\r\nexport const fileSystemApi = {\r\n  // 创建文件\r\n  createFile(data) {\r\n    return api.post('/file', data)\r\n  },\r\n  // 删除文件\r\n  deleteFile(name) {\r\n    return api.delete(`/file/${name}`)\r\n  },\r\n  // 读取文件内容\r\n  readFileContent(name) {\r\n    return api.get(`/file/${name}/content`)\r\n  },\r\n  // 写入文件内容\r\n  writeFileContent(name, content) {\r\n    return api.post(`/file/${name}/content`, { content })\r\n  },\r\n  // 创建目录\r\n  createDirectory(data) {\r\n    return api.post('/file/directory', data)\r\n  },\r\n  // 切换目录\r\n  changeDirectory(data) {\r\n    return api.post('/file/change-directory', data)\r\n  },\r\n  // 删除目录\r\n  deleteDirectory(name) {\r\n    return api.delete(`/file/directory/${name}`)\r\n  }\r\n}\r\n\r\n// 设备管理API\r\nexport const deviceApi = {\r\n  // 获取可用设备\r\n  getAvailableDevices() {\r\n    return api.get('/device/available')\r\n  },\r\n  // 获取设备状态\r\n  getDeviceStatus(deviceCode) {\r\n    return api.get('/device/status', { params: { deviceCode } })\r\n  },\r\n  // 分配设备\r\n  allocateDevice(data) {\r\n    return api.post('/device/allocate', data)\r\n  },\r\n  // 释放设备\r\n  releaseDevice(data) {\r\n    return api.post('/device/release', data)\r\n  }\r\n}\r\n\r\n// 中断处理API\r\nexport const interruptApi = {\r\n  // 获取中断状态\r\n  getInterruptStatus() {\r\n    return api.get('/interrupt/status')\r\n  },\r\n  // 触发中断\r\n  triggerInterrupt(data) {\r\n    return api.post('/interrupt/trigger', data)\r\n  }\r\n}\r\n\r\n// 请求拦截器\r\napi.interceptors.request.use(\r\n  config => {\r\n    // 在发送请求之前做些什么\r\n    return config\r\n  },\r\n  error => {\r\n    // 对请求错误做些什么\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\n// 响应拦截器\r\napi.interceptors.response.use(\r\n  response => {\r\n    // 对响应数据做点什么\r\n    return response.data\r\n  },\r\n  error => {\r\n    // 对响应错误做点什么\r\n    if (error.response) {\r\n      switch (error.response.status) {\r\n        case 400:\r\n          console.error('请求参数错误')\r\n          break\r\n        case 401:\r\n          console.error('未授权')\r\n          break\r\n        case 403:\r\n          console.error('禁止访问')\r\n          break\r\n        case 404:\r\n          console.error('资源不存在')\r\n          break\r\n        case 500:\r\n          console.error('服务器内部错误')\r\n          break\r\n        default:\r\n          console.error('未知错误')\r\n      }\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport default api "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}