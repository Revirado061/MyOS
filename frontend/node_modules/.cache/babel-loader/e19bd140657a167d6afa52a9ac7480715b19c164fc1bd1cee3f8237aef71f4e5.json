{"ast":null,"code":"import { createProcess, getAllProcesses, getCurrentProcess } from '../api/process';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null\n    };\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses();\n    // 设置定时器，每1秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 1000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  methods: {\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      };\n      return types[priority] || 'info';\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      };\n      return types[state] || 'info';\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      };\n      return texts[state] || state;\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-';\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    async handleTerminate(process) {\n      try {\n        // 这里需要调用后端API来终止进程\n        // const response = await terminateProcess(process.id)\n        this.$message.success(`进程 ${process.name} 已终止`);\n        await this.fetchProcesses();\n      } catch (error) {\n        console.error('终止进程失败:', error);\n        this.$message.error('终止进程失败');\n      }\n    },\n    async fetchProcesses() {\n      try {\n        console.log('开始获取进程数据...');\n        const response = await getAllProcesses();\n        console.log('获取到的原始数据:', response);\n        if (response) {\n          // 清空所有队列\n          this.readyQueue = [];\n          this.runningQueue = [];\n          this.blockedQueue = [];\n          this.terminatedQueue = [];\n          this.allProcesses = response;\n\n          // 根据进程状态分类\n          response.forEach(process => {\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process);\n                break;\n              case 'RUNNING':\n                this.runningQueue.push(process);\n                break;\n              case 'BLOCKED':\n                this.blockedQueue.push(process);\n                break;\n              case 'TERMINATED':\n                this.terminatedQueue.push(process);\n                break;\n            }\n          });\n        }\n      } catch (error) {\n        console.error('获取进程数据失败:', error);\n        this.$message.error('获取进程数据失败');\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        };\n        console.log(newProcess);\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n\n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data);\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error);\n        this.$message.error('创建进程失败，请重试');\n      }\n    }\n  }\n};","map":{"version":3,"names":["createProcess","getAllProcesses","getCurrentProcess","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","allProcesses","timer","created","fetchProcesses","setInterval","beforeDestroy","clearInterval","methods","getPriorityType","types","getStateType","state","getStateText","texts","formatTime","timestamp","date","Date","toLocaleString","handleTerminate","process","$message","success","error","console","log","response","forEach","push","newProcess","id","now"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"process-control\">\n      <el-form :model=\"processForm\" label-width=\"80px\" inline>\n        <el-form-item label=\"进程名称\">\n          <el-input v-model=\"processForm.name\" placeholder=\"请输入进程名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"优先级\">\n          <el-select v-model=\"processForm.priority\" placeholder=\"请选择\">\n            <el-option label=\"高\" :value=\"1\"></el-option>\n            <el-option label=\"中\" :value=\"2\"></el-option>\n            <el-option label=\"低\" :value=\"3\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内存大小\">\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\" :step=\"64\"></el-input-number>\n          <span class=\"unit\">MB</span>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <div class=\"process-queues\">\n      <div class=\"queue-container\">\n        <h3>就绪队列</h3>\n        <div class=\"queue ready-queue\">\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>运行队列</h3>\n        <div class=\"queue running-queue\">\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>阻塞队列</h3>\n        <div class=\"queue blocked-queue\">\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>终止队列</h3>\n        <div class=\"queue terminated-queue\">\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"process-list\">\n      <h3>进程列表</h3>\n      <el-table \n        :data=\"allProcesses\" \n        style=\"width: 100%\" \n        border\n        height=\"400\"\n        :max-height=\"400\"\n      >\n        <el-table-column prop=\"id\" label=\"进程ID\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"name\" label=\"进程名称\" width=\"150\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"priority\" label=\"优先级\" width=\"100\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getPriorityType(scope.row.priority)\">\n              P{{ scope.row.priority }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"memorySize\" label=\"内存大小\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ scope.row.memorySize }}MB\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"state\" label=\"状态\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStateType(scope.row.state)\">\n              {{ getStateText(scope.row.state) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ formatTime(scope.row.createTime) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-button\n              size=\"mini\"\n              type=\"danger\"\n              @click=\"handleTerminate(scope.row)\"\n              :disabled=\"scope.row.state === 'TERMINATED'\"\n            >终止</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createProcess, getAllProcesses, getCurrentProcess } from '../api/process'\n\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null\n    }\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses()\n    // 设置定时器，每1秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 1000)\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  },\n  methods: {\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      }\n      return types[priority] || 'info'\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      }\n      return types[state] || 'info'\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      }\n      return texts[state] || state\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-'\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n    async handleTerminate(process) {\n      try {\n        // 这里需要调用后端API来终止进程\n        // const response = await terminateProcess(process.id)\n        this.$message.success(`进程 ${process.name} 已终止`)\n        await this.fetchProcesses()\n      } catch (error) {\n        console.error('终止进程失败:', error)\n        this.$message.error('终止进程失败')\n      }\n    },\n    async fetchProcesses() {\n      try {\n        console.log('开始获取进程数据...')\n        const response = await getAllProcesses()\n        console.log('获取到的原始数据:', response)\n        \n        if (response) {\n          // 清空所有队列\n          this.readyQueue = []\n          this.runningQueue = []\n          this.blockedQueue = []\n          this.terminatedQueue = []\n          this.allProcesses = response\n          \n          // 根据进程状态分类\n          response.forEach(process => {\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process)\n                break\n              case 'RUNNING':\n                this.runningQueue.push(process)\n                break\n              case 'BLOCKED':\n                this.blockedQueue.push(process)\n                break\n              case 'TERMINATED':\n                this.terminatedQueue.push(process)\n                break\n            }\n          })\n        }\n      } catch (error) {\n        console.error('获取进程数据失败:', error)\n        this.$message.error('获取进程数据失败')\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        }\n        console.log(newProcess)\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess)\n        \n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data)\n          this.processForm.name = ''\n          this.$message.success('进程创建成功')\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error)\n        this.$message.error('创建进程失败，请重试')\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 20px;\n  gap: 20px;\n}\n\n.process-control {\n  width: 100%;\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.process-control .el-form {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.process-control .el-form-item {\n  margin-bottom: 0;\n  margin-right: 0;\n}\n\n.process-control .el-form-item__label {\n  padding-right: 8px;\n}\n\n.process-control .el-input {\n  width: 150px;\n}\n\n.process-control .el-select {\n  width: 120px;\n}\n\n.process-control .el-input-number {\n  width: 120px;\n}\n\n.process-control .unit {\n  margin-left: 5px;\n  color: #606266;\n}\n\n.process-control .el-button {\n  margin-left: 10px;\n}\n\n.process-queues {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.queue-container {\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  display: flex;\n  flex-direction: column;\n  height: 180px;\n}\n\n.queue-container h3 {\n  margin: 0;\n  padding: 10px 15px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #f5f7fa;\n  border-radius: 4px 4px 0 0;\n  font-size: 14px;\n}\n\n.queue {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.queue::-webkit-scrollbar {\n  width: 6px;\n}\n\n.queue::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.queue::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n\n.process-tag {\n  margin: 0;\n  padding: 6px 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 13px;\n}\n\n.process-tag .process-info {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.process-tag .el-tag {\n  margin: 0;\n}\n\n.process-tag .el-tag--small {\n  height: 20px;\n  line-height: 18px;\n  padding: 0 6px;\n  font-size: 12px;\n}\n\n.process-list {\n  margin-top: 20px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  padding: 20px;\n}\n\n.process-list h3 {\n  margin: 0 0 20px 0;\n  padding-bottom: 10px;\n  border-bottom: 1px solid #ebeef5;\n  color: #303133;\n  font-size: 16px;\n}\n\n/* 自定义表格滚动条样式 */\n.process-list .el-table__body-wrapper::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}