{"ast":null,"code":"import { getAllDevices, getDeviceStatus, allocateDevice, releaseDevice } from '@/api/device';\nexport default {\n  name: 'DeviceManagement',\n  data() {\n    return {\n      devices: [],\n      interrupts: [],\n      timer: null,\n      allocateDialogVisible: false,\n      selectedDevice: null,\n      allocateForm: {\n        timeout: 5\n      }\n    };\n  },\n  created() {\n    // 组件创建时获取设备列表\n    this.fetchDevices();\n    // 设置定时器，每秒更新一次设备状态\n    this.timer = setInterval(this.fetchDevices, 1000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  methods: {\n    async fetchDevices() {\n      try {\n        const response = await getAllDevices();\n        if (response && response.data) {\n          // 检查response.data是否存在\n          this.devices = response.data; // 使用response.data作为设备列表\n        } else {\n          this.devices = []; // 如果没有数据，设置为空数组\n        }\n      } catch (error) {\n        console.error('获取设备列表失败:', error);\n        this.$message.error('获取设备列表失败');\n        this.devices = []; // 发生错误时设置为空数组\n      }\n    },\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',\n        'BUSY': 'warning',\n        'ERROR': 'danger'\n      };\n      return types[status] || 'info';\n    },\n    getInterruptType(type) {\n      const types = {\n        'IO': 'warning',\n        'TIMER': 'primary',\n        'ERROR': 'danger',\n        'DEVICE': 'warning',\n        'PROCESS': 'info',\n        'CLOCK': 'primary'\n      };\n      return types[type] || 'info';\n    },\n    showAllocateDialog(device) {\n      this.selectedDevice = device;\n      this.allocateForm.timeout = 5;\n      this.allocateDialogVisible = true;\n    },\n    async handleAllocate() {\n      if (!this.selectedDevice) return;\n      try {\n        const data = {\n          deviceId: this.selectedDevice.id,\n          processId: 1,\n          // 这里需要根据实际情况设置进程ID\n          timeout: this.allocateForm.timeout\n        };\n        const response = await allocateDevice(data);\n        if (response) {\n          this.$message.success('设备分配成功');\n          this.addInterrupt({\n            type: 'DEVICE',\n            message: `设备 ${this.selectedDevice.name} 已被分配给进程 ${data.processId}，运行时间 ${data.timeout} 秒`,\n            time: new Date().toLocaleTimeString()\n          });\n          this.allocateDialogVisible = false;\n          await this.fetchDevices();\n        }\n      } catch (error) {\n        console.error('设备分配失败:', error);\n        this.$message.error('设备分配失败');\n      }\n    },\n    async handleRelease(device) {\n      try {\n        const data = {\n          deviceId: device.id,\n          processId: device.currentProcessId\n        };\n        const response = await releaseDevice(data);\n        if (response) {\n          this.$message.success('设备释放成功');\n          this.addInterrupt({\n            type: 'DEVICE',\n            message: `设备 ${device.name} 已被释放`,\n            time: new Date().toLocaleTimeString()\n          });\n          // 更新设备列表\n          await this.fetchDevices();\n        }\n      } catch (error) {\n        console.error('设备释放失败:', error);\n        this.$message.error('设备释放失败');\n      }\n    },\n    addInterrupt(interrupt) {\n      this.interrupts.unshift(interrupt);\n      if (this.interrupts.length > 10) {\n        this.interrupts.pop();\n      }\n    }\n  }\n};","map":{"version":3,"names":["getAllDevices","getDeviceStatus","allocateDevice","releaseDevice","name","data","devices","interrupts","timer","allocateDialogVisible","selectedDevice","allocateForm","timeout","created","fetchDevices","setInterval","beforeDestroy","clearInterval","methods","response","error","console","$message","getStatusType","status","types","getInterruptType","type","showAllocateDialog","device","handleAllocate","deviceId","id","processId","success","addInterrupt","message","time","Date","toLocaleTimeString","handleRelease","currentProcessId","interrupt","unshift","length","pop"],"sources":["src/components/DeviceManagement.vue"],"sourcesContent":["<template>\r\n  <div class=\"device-management\">\r\n    <div class=\"device-control\">\r\n      <h3>设备管理</h3>\r\n      <el-table :data=\"devices\" style=\"width: 100%\">\r\n        <el-table-column prop=\"id\" label=\"设备ID\" align=\"center\" header-align=\"center\"></el-table-column>\r\n        <el-table-column prop=\"name\" label=\"设备名称\" align=\"center\" header-align=\"center\"></el-table-column>\r\n        <el-table-column prop=\"type\" label=\"设备类型\" align=\"center\" header-align=\"center\"></el-table-column>\r\n        <el-table-column prop=\"status\" label=\"状态\" align=\"center\" header-align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            <el-tag :type=\"getStatusType(scope.row.status)\">\r\n              {{ scope.row.status }}\r\n            </el-tag>\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"currentProcessId\" label=\"当前进程\" align=\"center\" header-align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            {{ scope.row.currentProcessId || '无' }}\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column prop=\"remainingTime\" label=\"剩余时间\" align=\"center\" header-align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            {{ scope.row.remainingTime || 0 }}秒\r\n          </template>\r\n        </el-table-column>\r\n        <el-table-column label=\"操作\" width=\"180\" align=\"center\" header-align=\"center\">\r\n          <template slot-scope=\"scope\">\r\n            <div class=\"operation-buttons\">\r\n              <el-button\r\n                size=\"mini\"\r\n                type=\"primary\"\r\n                @click=\"showAllocateDialog(scope.row)\"\r\n                :disabled=\"scope.row.status !== 'IDLE'\">\r\n                分配\r\n              </el-button>\r\n              <el-button\r\n                size=\"mini\"\r\n                type=\"danger\"\r\n                @click=\"handleRelease(scope.row)\"\r\n                :disabled=\"scope.row.status === 'IDLE'\">\r\n                释放\r\n              </el-button>\r\n            </div>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n\r\n    <!-- 分配设备对话框 -->\r\n    <el-dialog\r\n      title=\"分配设备\"\r\n      :visible.sync=\"allocateDialogVisible\"\r\n      width=\"30%\"\r\n      :close-on-click-modal=\"false\">\r\n      <el-form :model=\"allocateForm\" label-width=\"100px\">\r\n        <el-form-item label=\"设备名称\">\r\n          <span>{{ selectedDevice ? selectedDevice.name : '' }}</span>\r\n        </el-form-item>\r\n        <el-form-item label=\"运行时间\">\r\n          <el-input-number \r\n            v-model=\"allocateForm.timeout\" \r\n            :min=\"1\" \r\n            :max=\"60\"\r\n            label=\"秒\">\r\n          </el-input-number>\r\n          <span class=\"unit\">秒</span>\r\n        </el-form-item>\r\n      </el-form>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"allocateDialogVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"handleAllocate\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n\r\n    <div class=\"interrupt-handling\">\r\n      <h3>中断处理</h3>\r\n      <div class=\"interrupt-list\">\r\n        <el-timeline>\r\n          <el-timeline-item\r\n            v-for=\"(interrupt, index) in interrupts\"\r\n            :key=\"index\"\r\n            :type=\"getInterruptType(interrupt.type)\"\r\n            :timestamp=\"interrupt.time\">\r\n            {{ interrupt.message }}\r\n          </el-timeline-item>\r\n        </el-timeline>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { \r\n  getAllDevices, \r\n  getDeviceStatus, \r\n  allocateDevice, \r\n  releaseDevice } from '@/api/device'\r\n\r\nexport default {\r\n  name: 'DeviceManagement',\r\n  data() {\r\n    return {\r\n      devices: [],\r\n      interrupts: [],\r\n      timer: null,\r\n      allocateDialogVisible: false,\r\n      selectedDevice: null,\r\n      allocateForm: {\r\n        timeout: 5\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    // 组件创建时获取设备列表\r\n    this.fetchDevices()\r\n    // 设置定时器，每秒更新一次设备状态\r\n    this.timer = setInterval(this.fetchDevices, 1000)\r\n  },\r\n  beforeDestroy() {\r\n    // 组件销毁前清除定时器\r\n    if (this.timer) {\r\n      clearInterval(this.timer)\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchDevices() {\r\n      try {\r\n        const response = await getAllDevices()\r\n        if (response && response.data) {  // 检查response.data是否存在\r\n          this.devices = response.data    // 使用response.data作为设备列表\r\n        } else {\r\n          this.devices = []  // 如果没有数据，设置为空数组\r\n        }\r\n      } catch (error) {\r\n        console.error('获取设备列表失败:', error)\r\n        this.$message.error('获取设备列表失败')\r\n        this.devices = []  // 发生错误时设置为空数组\r\n      }\r\n    },\r\n    getStatusType(status) {\r\n      const types = {\r\n        'IDLE': 'success',\r\n        'BUSY': 'warning',\r\n        'ERROR': 'danger'\r\n      }\r\n      return types[status] || 'info'\r\n    },\r\n    getInterruptType(type) {\r\n      const types = {\r\n        'IO': 'warning',\r\n        'TIMER': 'primary',\r\n        'ERROR': 'danger',\r\n        'DEVICE': 'warning',\r\n        'PROCESS': 'info',\r\n        'CLOCK': 'primary'\r\n      }\r\n      return types[type] || 'info'\r\n    },\r\n    showAllocateDialog(device) {\r\n      this.selectedDevice = device\r\n      this.allocateForm.timeout = 5\r\n      this.allocateDialogVisible = true\r\n    },\r\n    async handleAllocate() {\r\n      if (!this.selectedDevice) return\r\n      \r\n      try {\r\n        const data = {\r\n          deviceId: this.selectedDevice.id,\r\n          processId: 1, // 这里需要根据实际情况设置进程ID\r\n          timeout: this.allocateForm.timeout\r\n        }\r\n        const response = await allocateDevice(data)\r\n        if (response) {\r\n          this.$message.success('设备分配成功')\r\n          this.addInterrupt({\r\n            type: 'DEVICE',\r\n            message: `设备 ${this.selectedDevice.name} 已被分配给进程 ${data.processId}，运行时间 ${data.timeout} 秒`,\r\n            time: new Date().toLocaleTimeString()\r\n          })\r\n          this.allocateDialogVisible = false\r\n          await this.fetchDevices()\r\n        }\r\n      } catch (error) {\r\n        console.error('设备分配失败:', error)\r\n        this.$message.error('设备分配失败')\r\n      }\r\n    },\r\n    async handleRelease(device) {\r\n      try {\r\n        const data = {\r\n          deviceId: device.id,\r\n          processId: device.currentProcessId\r\n        }\r\n        const response = await releaseDevice(data)\r\n        if (response) {\r\n          this.$message.success('设备释放成功')\r\n          this.addInterrupt({\r\n            type: 'DEVICE',\r\n            message: `设备 ${device.name} 已被释放`,\r\n            time: new Date().toLocaleTimeString()\r\n          })\r\n          // 更新设备列表\r\n          await this.fetchDevices()\r\n        }\r\n      } catch (error) {\r\n        console.error('设备释放失败:', error)\r\n        this.$message.error('设备释放失败')\r\n      }\r\n    },\r\n    addInterrupt(interrupt) {\r\n      this.interrupts.unshift(interrupt)\r\n      if (this.interrupts.length > 10) {\r\n        this.interrupts.pop()\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.device-management {\r\n  display: flex;\r\n  gap: 20px;\r\n  padding: 20px;\r\n}\r\n\r\n.device-control {\r\n  flex: 1;\r\n}\r\n\r\n.interrupt-handling {\r\n  flex: 1;\r\n}\r\n\r\n.interrupt-list {\r\n  height: 400px;\r\n  overflow-y: auto;\r\n  border: 1px solid #dcdfe6;\r\n  border-radius: 4px;\r\n  padding: 20px;\r\n}\r\n\r\n.operation-buttons {\r\n  display: flex;\r\n  gap: 8px;\r\n  justify-content: center;\r\n}\r\n\r\n.unit {\r\n  margin-left: 8px;\r\n  color: #606266;\r\n}\r\n</style> "],"mappings":"AA4FA,SACAA,aAAA,EACAC,eAAA,EACAC,cAAA,EACAC,aAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,OAAA;MACAC,UAAA;MACAC,KAAA;MACAC,qBAAA;MACAC,cAAA;MACAC,YAAA;QACAC,OAAA;MACA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,YAAA;IACA;IACA,KAAAN,KAAA,GAAAO,WAAA,MAAAD,YAAA;EACA;EACAE,cAAA;IACA;IACA,SAAAR,KAAA;MACAS,aAAA,MAAAT,KAAA;IACA;EACA;EACAU,OAAA;IACA,MAAAJ,aAAA;MACA;QACA,MAAAK,QAAA,SAAAnB,aAAA;QACA,IAAAmB,QAAA,IAAAA,QAAA,CAAAd,IAAA;UAAA;UACA,KAAAC,OAAA,GAAAa,QAAA,CAAAd,IAAA;QACA;UACA,KAAAC,OAAA;QACA;MACA,SAAAc,KAAA;QACAC,OAAA,CAAAD,KAAA,cAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;QACA,KAAAd,OAAA;MACA;IACA;IACAiB,cAAAC,MAAA;MACA,MAAAC,KAAA;QACA;QACA;QACA;MACA;MACA,OAAAA,KAAA,CAAAD,MAAA;IACA;IACAE,iBAAAC,IAAA;MACA,MAAAF,KAAA;QACA;QACA;QACA;QACA;QACA;QACA;MACA;MACA,OAAAA,KAAA,CAAAE,IAAA;IACA;IACAC,mBAAAC,MAAA;MACA,KAAAnB,cAAA,GAAAmB,MAAA;MACA,KAAAlB,YAAA,CAAAC,OAAA;MACA,KAAAH,qBAAA;IACA;IACA,MAAAqB,eAAA;MACA,UAAApB,cAAA;MAEA;QACA,MAAAL,IAAA;UACA0B,QAAA,OAAArB,cAAA,CAAAsB,EAAA;UACAC,SAAA;UAAA;UACArB,OAAA,OAAAD,YAAA,CAAAC;QACA;QACA,MAAAO,QAAA,SAAAjB,cAAA,CAAAG,IAAA;QACA,IAAAc,QAAA;UACA,KAAAG,QAAA,CAAAY,OAAA;UACA,KAAAC,YAAA;YACAR,IAAA;YACAS,OAAA,aAAA1B,cAAA,CAAAN,IAAA,YAAAC,IAAA,CAAA4B,SAAA,SAAA5B,IAAA,CAAAO,OAAA;YACAyB,IAAA,MAAAC,IAAA,GAAAC,kBAAA;UACA;UACA,KAAA9B,qBAAA;UACA,WAAAK,YAAA;QACA;MACA,SAAAM,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACA,MAAAoB,cAAAX,MAAA;MACA;QACA,MAAAxB,IAAA;UACA0B,QAAA,EAAAF,MAAA,CAAAG,EAAA;UACAC,SAAA,EAAAJ,MAAA,CAAAY;QACA;QACA,MAAAtB,QAAA,SAAAhB,aAAA,CAAAE,IAAA;QACA,IAAAc,QAAA;UACA,KAAAG,QAAA,CAAAY,OAAA;UACA,KAAAC,YAAA;YACAR,IAAA;YACAS,OAAA,QAAAP,MAAA,CAAAzB,IAAA;YACAiC,IAAA,MAAAC,IAAA,GAAAC,kBAAA;UACA;UACA;UACA,WAAAzB,YAAA;QACA;MACA,SAAAM,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAE,QAAA,CAAAF,KAAA;MACA;IACA;IACAe,aAAAO,SAAA;MACA,KAAAnC,UAAA,CAAAoC,OAAA,CAAAD,SAAA;MACA,SAAAnC,UAAA,CAAAqC,MAAA;QACA,KAAArC,UAAA,CAAAsC,GAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}