{"ast":null,"code":"export default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileSystem: [{\n        id: 1,\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      dialogVisible: false,\n      dialogTitle: '',\n      isCreatingFile: false,\n      fileForm: {\n        name: '',\n        type: 'text',\n        size: 1\n      },\n      currentNode: null\n    };\n  },\n  methods: {\n    createFile() {\n      this.dialogTitle = '创建文件';\n      this.isCreatingFile = true;\n      this.dialogVisible = true;\n    },\n    createDirectory() {\n      this.dialogTitle = '创建目录';\n      this.isCreatingFile = false;\n      this.dialogVisible = true;\n    },\n    deleteItem() {\n      if (!this.currentNode) {\n        this.$message.warning('请先选择要删除的项目');\n        return;\n      }\n      this.handleDelete(this.currentNode, this.currentNode.data);\n    },\n    handleNodeClick(data) {\n      this.currentNode = data;\n    },\n    handleEdit(node, data) {\n      console.log('编辑', node, data);\n    },\n    handleDelete(node, data) {\n      this.$confirm('确认删除该' + (data.type === 'directory' ? '目录' : '文件') + '?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const parent = node.parent;\n        const children = parent.data.children || parent.data;\n        const index = children.findIndex(d => d.id === data.id);\n        children.splice(index, 1);\n        this.$message.success('删除成功');\n      }).catch(() => {});\n    },\n    submitForm() {\n      if (!this.fileForm.name) {\n        this.$message.error('请输入名称');\n        return;\n      }\n      const newNode = {\n        id: Date.now(),\n        label: this.fileForm.name,\n        type: this.isCreatingFile ? 'file' : 'directory',\n        children: this.isCreatingFile ? [] : undefined\n      };\n      if (this.isCreatingFile) {\n        newNode.size = this.fileForm.size;\n        newNode.fileType = this.fileForm.type;\n      }\n      if (this.currentNode && this.currentNode.type === 'directory') {\n        if (!this.currentNode.children) {\n          this.$set(this.currentNode, 'children', []);\n        }\n        this.currentNode.children.push(newNode);\n      } else {\n        this.fileSystem[0].children.push(newNode);\n      }\n      this.dialogVisible = false;\n      this.$message.success('创建成功');\n      this.resetForm();\n    },\n    resetForm() {\n      this.fileForm = {\n        name: '',\n        type: 'text',\n        size: 1\n      };\n    }\n  }\n};","map":{"version":3,"names":["name","data","fileSystem","id","label","type","children","defaultProps","dialogVisible","dialogTitle","isCreatingFile","fileForm","size","currentNode","methods","createFile","createDirectory","deleteItem","$message","warning","handleDelete","handleNodeClick","handleEdit","node","console","log","$confirm","confirmButtonText","cancelButtonText","then","parent","index","findIndex","d","splice","success","catch","submitForm","error","newNode","Date","now","undefined","fileType","$set","push","resetForm"],"sources":["src/views/FileSystem.vue"],"sourcesContent":["<template>\n  <div class=\"filesystem-container\">\n    <h2>文件系统</h2>\n\n    <!-- 文件系统操作按钮 -->\n    <div class=\"operation-buttons\">\n      <el-button type=\"primary\" @click=\"createFile\">创建文件</el-button>\n      <el-button type=\"success\" @click=\"createDirectory\">创建目录</el-button>\n      <el-button type=\"danger\" @click=\"deleteItem\">删除</el-button>\n    </div>\n\n    <!-- 文件系统树形结构 -->\n    <div class=\"filesystem-tree\">\n      <el-tree\n        :data=\"fileSystem\"\n        :props=\"defaultProps\"\n        @node-click=\"handleNodeClick\"\n        default-expand-all>\n        <span class=\"custom-tree-node\" slot-scope=\"{ node, data }\">\n          <span>\n            <i :class=\"data.type === 'directory' ? 'el-icon-folder' : 'el-icon-document'\"></i>\n            {{ node.label }}\n          </span>\n          <span>\n            <el-button\n              type=\"text\"\n              size=\"mini\"\n              @click=\"() => handleEdit(node, data)\">\n              编辑\n            </el-button>\n            <el-button\n              type=\"text\"\n              size=\"mini\"\n              @click=\"() => handleDelete(node, data)\">\n              删除\n            </el-button>\n          </span>\n        </span>\n      </el-tree>\n    </div>\n\n    <!-- 创建文件对话框 -->\n    <el-dialog :title=\"dialogTitle\" :visible.sync=\"dialogVisible\" width=\"30%\">\n      <el-form :model=\"fileForm\" label-width=\"100px\">\n        <el-form-item label=\"名称\">\n          <el-input v-model=\"fileForm.name\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"类型\" v-if=\"isCreatingFile\">\n          <el-select v-model=\"fileForm.type\" placeholder=\"请选择文件类型\">\n            <el-option label=\"文本文件\" value=\"text\"></el-option>\n            <el-option label=\"二进制文件\" value=\"binary\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"大小(KB)\" v-if=\"isCreatingFile\">\n          <el-input-number v-model=\"fileForm.size\" :min=\"1\"></el-input-number>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"submitForm\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'FileSystem',\n  data() {\n    return {\n      fileSystem: [{\n        id: 1,\n        label: '根目录',\n        type: 'directory',\n        children: []\n      }],\n      defaultProps: {\n        children: 'children',\n        label: 'label'\n      },\n      dialogVisible: false,\n      dialogTitle: '',\n      isCreatingFile: false,\n      fileForm: {\n        name: '',\n        type: 'text',\n        size: 1\n      },\n      currentNode: null\n    }\n  },\n  methods: {\n    createFile() {\n      this.dialogTitle = '创建文件'\n      this.isCreatingFile = true\n      this.dialogVisible = true\n    },\n    createDirectory() {\n      this.dialogTitle = '创建目录'\n      this.isCreatingFile = false\n      this.dialogVisible = true\n    },\n    deleteItem() {\n      if (!this.currentNode) {\n        this.$message.warning('请先选择要删除的项目')\n        return\n      }\n      this.handleDelete(this.currentNode, this.currentNode.data)\n    },\n    handleNodeClick(data) {\n      this.currentNode = data\n    },\n    handleEdit(node, data) {\n      console.log('编辑', node, data)\n    },\n    handleDelete(node, data) {\n      this.$confirm('确认删除该' + (data.type === 'directory' ? '目录' : '文件') + '?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const parent = node.parent\n        const children = parent.data.children || parent.data\n        const index = children.findIndex(d => d.id === data.id)\n        children.splice(index, 1)\n        this.$message.success('删除成功')\n      }).catch(() => {})\n    },\n    submitForm() {\n      if (!this.fileForm.name) {\n        this.$message.error('请输入名称')\n        return\n      }\n\n      const newNode = {\n        id: Date.now(),\n        label: this.fileForm.name,\n        type: this.isCreatingFile ? 'file' : 'directory',\n        children: this.isCreatingFile ? [] : undefined\n      }\n\n      if (this.isCreatingFile) {\n        newNode.size = this.fileForm.size\n        newNode.fileType = this.fileForm.type\n      }\n\n      if (this.currentNode && this.currentNode.type === 'directory') {\n        if (!this.currentNode.children) {\n          this.$set(this.currentNode, 'children', [])\n        }\n        this.currentNode.children.push(newNode)\n      } else {\n        this.fileSystem[0].children.push(newNode)\n      }\n\n      this.dialogVisible = false\n      this.$message.success('创建成功')\n      this.resetForm()\n    },\n    resetForm() {\n      this.fileForm = {\n        name: '',\n        type: 'text',\n        size: 1\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.filesystem-container {\n  padding: 20px;\n}\n\n.operation-buttons {\n  margin-bottom: 20px;\n}\n\n.operation-buttons .el-button {\n  margin-right: 10px;\n}\n\n.filesystem-tree {\n  margin-top: 20px;\n}\n\n.custom-tree-node {\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 14px;\n  padding-right: 8px;\n}\n\n.custom-tree-node i {\n  margin-right: 5px;\n}\n</style> "],"mappings":"AAkEA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,UAAA;QACAC,EAAA;QACAC,KAAA;QACAC,IAAA;QACAC,QAAA;MACA;MACAC,YAAA;QACAD,QAAA;QACAF,KAAA;MACA;MACAI,aAAA;MACAC,WAAA;MACAC,cAAA;MACAC,QAAA;QACAX,IAAA;QACAK,IAAA;QACAO,IAAA;MACA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACAC,WAAA;MACA,KAAAN,WAAA;MACA,KAAAC,cAAA;MACA,KAAAF,aAAA;IACA;IACAQ,gBAAA;MACA,KAAAP,WAAA;MACA,KAAAC,cAAA;MACA,KAAAF,aAAA;IACA;IACAS,WAAA;MACA,UAAAJ,WAAA;QACA,KAAAK,QAAA,CAAAC,OAAA;QACA;MACA;MACA,KAAAC,YAAA,MAAAP,WAAA,OAAAA,WAAA,CAAAZ,IAAA;IACA;IACAoB,gBAAApB,IAAA;MACA,KAAAY,WAAA,GAAAZ,IAAA;IACA;IACAqB,WAAAC,IAAA,EAAAtB,IAAA;MACAuB,OAAA,CAAAC,GAAA,OAAAF,IAAA,EAAAtB,IAAA;IACA;IACAmB,aAAAG,IAAA,EAAAtB,IAAA;MACA,KAAAyB,QAAA,YAAAzB,IAAA,CAAAI,IAAA;QACAsB,iBAAA;QACAC,gBAAA;QACAvB,IAAA;MACA,GAAAwB,IAAA;QACA,MAAAC,MAAA,GAAAP,IAAA,CAAAO,MAAA;QACA,MAAAxB,QAAA,GAAAwB,MAAA,CAAA7B,IAAA,CAAAK,QAAA,IAAAwB,MAAA,CAAA7B,IAAA;QACA,MAAA8B,KAAA,GAAAzB,QAAA,CAAA0B,SAAA,CAAAC,CAAA,IAAAA,CAAA,CAAA9B,EAAA,KAAAF,IAAA,CAAAE,EAAA;QACAG,QAAA,CAAA4B,MAAA,CAAAH,KAAA;QACA,KAAAb,QAAA,CAAAiB,OAAA;MACA,GAAAC,KAAA;IACA;IACAC,WAAA;MACA,UAAA1B,QAAA,CAAAX,IAAA;QACA,KAAAkB,QAAA,CAAAoB,KAAA;QACA;MACA;MAEA,MAAAC,OAAA;QACApC,EAAA,EAAAqC,IAAA,CAAAC,GAAA;QACArC,KAAA,OAAAO,QAAA,CAAAX,IAAA;QACAK,IAAA,OAAAK,cAAA;QACAJ,QAAA,OAAAI,cAAA,QAAAgC;MACA;MAEA,SAAAhC,cAAA;QACA6B,OAAA,CAAA3B,IAAA,QAAAD,QAAA,CAAAC,IAAA;QACA2B,OAAA,CAAAI,QAAA,QAAAhC,QAAA,CAAAN,IAAA;MACA;MAEA,SAAAQ,WAAA,SAAAA,WAAA,CAAAR,IAAA;QACA,UAAAQ,WAAA,CAAAP,QAAA;UACA,KAAAsC,IAAA,MAAA/B,WAAA;QACA;QACA,KAAAA,WAAA,CAAAP,QAAA,CAAAuC,IAAA,CAAAN,OAAA;MACA;QACA,KAAArC,UAAA,IAAAI,QAAA,CAAAuC,IAAA,CAAAN,OAAA;MACA;MAEA,KAAA/B,aAAA;MACA,KAAAU,QAAA,CAAAiB,OAAA;MACA,KAAAW,SAAA;IACA;IACAA,UAAA;MACA,KAAAnC,QAAA;QACAX,IAAA;QACAK,IAAA;QACAO,IAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}