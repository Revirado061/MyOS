{"ast":null,"code":"import { createProcess, getAllProcesses, getCurrentProcess } from '../api/process';\nimport { getAllDevices, allocateDevice, releaseDevice } from '../api/device';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null,\n      // 设备管理相关\n      devices: [],\n      // 设备列表\n      deviceDialogVisible: false,\n      // 控制设备管理弹窗显示\n      allocateDialogVisible: false,\n      selectedDevice: null,\n      // 当前选中用于分配的设备\n      allocateForm: {\n        timeout: 5\n      },\n      refreshInterval: null // 添加自动刷新间隔\n    };\n  },\n  mounted() {\n    // 初始化时获取进程数据\n    this.fetchProcesses();\n\n    // 设置定时刷新\n    this.refreshInterval = setInterval(() => {\n      this.fetchProcesses();\n    }, 1000); // 每秒刷新一次\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  },\n  methods: {\n    // 处理前端显示细节\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      };\n      return types[priority] || 'info';\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      };\n      return types[state] || 'info';\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      };\n      return texts[state] || state;\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-';\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    // 前后端连接-进程\n    async handleTerminate(process) {\n      try {\n        // 这里需要调用后端API来终止进程\n        // const response = await terminateProcess(process.id)\n        this.$message.success(`进程 ${process.name} 已终止`);\n        await this.fetchProcesses();\n      } catch (error) {\n        // console.error('终止进程失败:', error)\n        this.$message.error('终止进程失败');\n      }\n    },\n    async fetchProcesses() {\n      try {\n        const response = await getAllProcesses();\n        if (response) {\n          // 清空所有队列\n          this.readyQueue = [];\n          this.runningQueue = [];\n          this.blockedQueue = [];\n          this.terminatedQueue = [];\n          this.allProcesses = response;\n\n          // 根据进程状态分类\n          response.forEach(process => {\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process);\n                break;\n              case 'RUNNING':\n                this.runningQueue.push(process);\n                break;\n              case 'BLOCKED':\n                this.blockedQueue.push(process);\n                break;\n              case 'TERMINATED':\n                this.terminatedQueue.push(process);\n                break;\n            }\n          });\n        }\n      } catch (error) {\n        this.$message.error('获取进程数据失败');\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize\n        };\n\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n        if (response) {\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n          // 创建成功后立即刷新数据\n          this.fetchProcesses();\n        }\n      } catch (error) {\n        this.$message.error('创建进程失败，请重试');\n      }\n    },\n    // 启动设备调用\n    async handleEnableDevice(row) {\n      // 你也可以根据row.id传入进程ID来筛选相关设备\n      await this.fetchDevices();\n      this.deviceDialogVisible = true;\n    },\n    // 获取设备列表\n    async fetchDevices() {\n      try {\n        const response = await getAllDevices();\n        if (response && response.data) {\n          this.devices = response.data;\n        } else {\n          this.devices = [];\n        }\n      } catch (error) {\n        // console.error('获取设备列表失败:', error)\n        this.$message.error('获取设备列表失败');\n        this.devices = [];\n      }\n    },\n    // 获取状态标签类型\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',\n        'BUSY': 'warning',\n        'ERROR': 'danger'\n      };\n      return types[status] || 'info';\n    },\n    // 获取中断类型标签\n    getInterruptType(type) {\n      const types = {\n        'IO': 'warning',\n        'TIMER': 'primary',\n        'ERROR': 'danger',\n        'DEVICE': 'warning',\n        'PROCESS': 'info',\n        'CLOCK': 'primary'\n      };\n      return types[type] || 'info';\n    },\n    // 弹出设备分配对话框\n    showAllocateDialog(device) {\n      this.selectedDevice = device;\n      this.allocateForm.timeout = 5;\n      this.allocateDialogVisible = true;\n    },\n    // 确认分配设备\n    async handleAllocate() {\n      if (!this.selectedDevice) return;\n      try {\n        const data = {\n          deviceId: this.selectedDevice.id,\n          processId: 1,\n          // TODO: 这里请改为当前选中进程的ID\n          timeout: this.allocateForm.timeout\n        };\n        const response = await allocateDevice(data);\n        if (response) {\n          this.$message.success('设备分配成功');\n          this.addInterrupt({\n            type: 'DEVICE',\n            message: `设备 ${this.selectedDevice.name} 已被分配给进程 ${data.processId}，运行时间 ${data.timeout} 秒`,\n            time: new Date().toLocaleTimeString()\n          });\n          this.allocateDialogVisible = false;\n          await this.fetchDevices();\n        }\n      } catch (error) {\n        // console.error('设备分配失败:', error)\n        this.$message.error('设备分配失败');\n      }\n    },\n    // 释放设备\n    async handleRelease(device) {\n      try {\n        const data = {\n          deviceId: device.id,\n          processId: device.currentProcessId\n        };\n        const response = await releaseDevice(data);\n        if (response) {\n          this.$message.success('设备释放成功');\n          this.addInterrupt({\n            type: 'DEVICE',\n            message: `设备 ${device.name} 已被释放`,\n            time: new Date().toLocaleTimeString()\n          });\n          await this.fetchDevices();\n        }\n      } catch (error) {\n        // console.error('设备释放失败:', error)\n        this.$message.error('设备释放失败');\n      }\n    },\n    // 添加中断日志（最多保留10条）\n    addInterrupt(interrupt) {\n      this.interrupts.unshift(interrupt);\n      if (this.interrupts.length > 10) {\n        this.interrupts.pop();\n      }\n    }\n  }\n};","map":{"version":3,"names":["createProcess","getAllProcesses","getCurrentProcess","getAllDevices","allocateDevice","releaseDevice","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","allProcesses","timer","devices","deviceDialogVisible","allocateDialogVisible","selectedDevice","allocateForm","timeout","refreshInterval","mounted","fetchProcesses","setInterval","beforeDestroy","clearInterval","methods","getPriorityType","types","getStateType","state","getStateText","texts","formatTime","timestamp","date","Date","toLocaleString","handleTerminate","process","$message","success","error","response","forEach","push","newProcess","handleEnableDevice","row","fetchDevices","getStatusType","status","getInterruptType","type","showAllocateDialog","device","handleAllocate","deviceId","id","processId","addInterrupt","message","time","toLocaleTimeString","handleRelease","currentProcessId","interrupt","interrupts","unshift","length","pop"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"process-control\">\n      <el-form class=\"input-form\" :model=\"processForm\" label-width=\"80px\" inline>\n        <el-form-item label=\"进程名称\">\n          <el-input v-model=\"processForm.name\" placeholder=\"请输入进程名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"优先级\">\n          <el-select v-model=\"processForm.priority\" placeholder=\"请选择\">\n            <el-option label=\"高\" :value=\"1\"></el-option>\n            <el-option label=\"中\" :value=\"2\"></el-option>\n            <el-option label=\"低\" :value=\"3\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内存大小\">\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\" :step=\"64\"></el-input-number>\n          <span class=\"unit\">MB</span>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <div class=\"process-queues\">\n      <div class=\"queue-container\">\n        <h3>就绪队列</h3>\n        <div class=\"queue ready-queue\">\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>运行队列</h3>\n        <div class=\"queue running-queue\">\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>阻塞队列</h3>\n        <div class=\"queue blocked-queue\">\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>终止队列</h3>\n        <div class=\"queue terminated-queue\">\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"process-list\">\n      <h3>进程列表</h3>\n      <el-table \n        :data=\"allProcesses\" \n        style=\"width: 100%\" \n        border\n        height=\"280\"\n      >\n        <el-table-column prop=\"id\" label=\"进程ID\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"name\" label=\"进程名称\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"priority\" label=\"优先级\" width=\"80\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getPriorityType(scope.row.priority)\">\n              P{{ scope.row.priority }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"memorySize\" label=\"内存大小\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ scope.row.memorySize }}MB\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"state\" label=\"状态\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStateType(scope.row.state)\">\n              {{ getStateText(scope.row.state) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ formatTime(scope.row.createTime) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" align=\"center\" width=\"200\">\n          <template slot-scope=\"scope\">\n            <el-button\n              size=\"mini\"\n              type=\"primary\"\n              @click=\"handleEnableDevice(scope.row)\"\n              :disabled=\"scope.row.state === 'TERMINATED'\"\n              style=\"margin-left: 10px;\"\n            >启用设备</el-button> <!-- 添加启用设备按钮 -->\n            <el-button\n              size=\"mini\"\n              type=\"danger\"\n              @click=\"handleTerminate(scope.row)\"\n              :disabled=\"scope.row.state === 'TERMINATED'\"\n            >终止</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 进程相关内容 -->\n    <el-dialog\n      title=\"设备管理\"\n      :visible.sync=\"deviceDialogVisible\"\n      width=\"80%\"\n      :close-on-click-modal=\"false\">\n      <div class=\"device-control\">\n        <el-table :data=\"devices\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"设备ID\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"name\" label=\"设备名称\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"type\" label=\"设备类型\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"status\" label=\"状态\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row.status)\">\n                {{ scope.row.status }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"currentProcessId\" label=\"当前进程\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.currentProcessId || '无' }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"remainingTime\" label=\"剩余时间\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.remainingTime || 0 }}秒\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"180\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-button\n                size=\"mini\"\n                type=\"primary\"\n                @click=\"showAllocateDialog(scope.row)\"\n                :disabled=\"scope.row.status !== 'IDLE'\">\n                分配\n              </el-button>\n              <el-button\n                size=\"mini\"\n                type=\"danger\"\n                @click=\"handleRelease(scope.row)\"\n                :disabled=\"scope.row.status === 'IDLE'\">\n                释放\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </el-dialog>\n\n    <!-- 分配设备对话框 -->\n    <el-dialog\n      title=\"分配设备\"\n      :visible.sync=\"allocateDialogVisible\"\n      width=\"30%\"\n      :close-on-click-modal=\"false\">\n      <el-form :model=\"allocateForm\" label-width=\"100px\">\n        <el-form-item label=\"设备名称\">\n          <span>{{ selectedDevice ? selectedDevice.name : '' }}</span>\n        </el-form-item>\n        <el-form-item label=\"运行时间\">\n          <el-input-number \n            v-model=\"allocateForm.timeout\" \n            :min=\"1\" \n            :max=\"60\"\n            label=\"秒\">\n          </el-input-number>\n          <span class=\"unit\" style=\"margin-left: 10px;\">秒</span>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"allocateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleAllocate\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { createProcess, getAllProcesses, getCurrentProcess } from '../api/process'\nimport { getAllDevices, allocateDevice, releaseDevice } from '../api/device'\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null,\n\n      // 设备管理相关\n      devices: [],                 // 设备列表\n      deviceDialogVisible: false, // 控制设备管理弹窗显示\n      allocateDialogVisible: false,\n      selectedDevice: null,        // 当前选中用于分配的设备\n      allocateForm: {\n        timeout: 5\n      },\n      refreshInterval: null, // 添加自动刷新间隔\n    }\n  },\n  mounted() {\n    // 初始化时获取进程数据\n    this.fetchProcesses()\n    \n    // 设置定时刷新\n    this.refreshInterval = setInterval(() => {\n      this.fetchProcesses()\n    }, 1000) // 每秒刷新一次\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval)\n    }\n  },\n  methods: {\n    // 处理前端显示细节\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      }\n      return types[priority] || 'info'\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      }\n      return types[state] || 'info'\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      }\n      return texts[state] || state\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-'\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n    // 前后端连接-进程\n    async handleTerminate(process) {\n      try {\n        // 这里需要调用后端API来终止进程\n        // const response = await terminateProcess(process.id)\n        this.$message.success(`进程 ${process.name} 已终止`)\n        await this.fetchProcesses()\n      } catch (error) {\n        // console.error('终止进程失败:', error)\n        this.$message.error('终止进程失败')\n      }\n    },\n    async fetchProcesses() {\n      try {\n        const response = await getAllProcesses()\n        \n        if (response) {\n          // 清空所有队列\n          this.readyQueue = []\n          this.runningQueue = []\n          this.blockedQueue = []\n          this.terminatedQueue = []\n          this.allProcesses = response\n          \n          // 根据进程状态分类\n          response.forEach(process => {\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process)\n                break\n              case 'RUNNING':\n                this.runningQueue.push(process)\n                break\n              case 'BLOCKED':\n                this.blockedQueue.push(process)\n                break\n              case 'TERMINATED':\n                this.terminatedQueue.push(process)\n                break\n            }\n          })\n        }\n      } catch (error) {\n        this.$message.error('获取进程数据失败')\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n        }\n        \n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess)\n        \n        if (response) {\n          this.processForm.name = ''\n          this.$message.success('进程创建成功')\n          // 创建成功后立即刷新数据\n          this.fetchProcesses()\n        }\n      } catch (error) {\n        this.$message.error('创建进程失败，请重试')\n      }\n    },\n    \n    // 启动设备调用\n    async handleEnableDevice(row) {\n      // 你也可以根据row.id传入进程ID来筛选相关设备\n      await this.fetchDevices()\n      this.deviceDialogVisible = true\n    },\n    // 获取设备列表\n    async fetchDevices() {\n      try {\n        const response = await getAllDevices()\n        if (response && response.data) {\n          this.devices = response.data\n        } else {\n          this.devices = []\n        }\n      } catch (error) {\n        // console.error('获取设备列表失败:', error)\n        this.$message.error('获取设备列表失败')\n        this.devices = []\n      }\n    },\n\n    // 获取状态标签类型\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',\n        'BUSY': 'warning',\n        'ERROR': 'danger'\n      }\n      return types[status] || 'info'\n    },\n\n    // 获取中断类型标签\n    getInterruptType(type) {\n      const types = {\n        'IO': 'warning',\n        'TIMER': 'primary',\n        'ERROR': 'danger',\n        'DEVICE': 'warning',\n        'PROCESS': 'info',\n        'CLOCK': 'primary'\n      }\n      return types[type] || 'info'\n    },\n\n    // 弹出设备分配对话框\n    showAllocateDialog(device) {\n      this.selectedDevice = device\n      this.allocateForm.timeout = 5\n      this.allocateDialogVisible = true\n    },\n\n    // 确认分配设备\n    async handleAllocate() {\n      if (!this.selectedDevice) return\n\n      try {\n        const data = {\n          deviceId: this.selectedDevice.id,\n          processId: 1, // TODO: 这里请改为当前选中进程的ID\n          timeout: this.allocateForm.timeout\n        }\n\n        const response = await allocateDevice(data)\n        if (response) {\n          this.$message.success('设备分配成功')\n          this.addInterrupt({\n            type: 'DEVICE',\n            message: `设备 ${this.selectedDevice.name} 已被分配给进程 ${data.processId}，运行时间 ${data.timeout} 秒`,\n            time: new Date().toLocaleTimeString()\n          })\n          this.allocateDialogVisible = false\n          await this.fetchDevices()\n        }\n      } catch (error) {\n        // console.error('设备分配失败:', error)\n        this.$message.error('设备分配失败')\n      }\n    },\n\n    // 释放设备\n    async handleRelease(device) {\n      try {\n        const data = {\n          deviceId: device.id,\n          processId: device.currentProcessId\n        }\n\n        const response = await releaseDevice(data)\n        if (response) {\n          this.$message.success('设备释放成功')\n          this.addInterrupt({\n            type: 'DEVICE',\n            message: `设备 ${device.name} 已被释放`,\n            time: new Date().toLocaleTimeString()\n          })\n          await this.fetchDevices()\n        }\n      } catch (error) {\n        // console.error('设备释放失败:', error)\n        this.$message.error('设备释放失败')\n      }\n    },\n\n    // 添加中断日志（最多保留10条）\n    addInterrupt(interrupt) {\n      this.interrupts.unshift(interrupt)\n      if (this.interrupts.length > 10) {\n        this.interrupts.pop()\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 900px;\n  padding: 20px;\n  gap: 20px;\n}\n\n.process-control {\n  background-color: #fff;\n  padding: 20px 0 20px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.process-control .el-form {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-right: 10px;\n}\n\n.process-control .el-form-item {\n  margin-bottom: 0;\n  margin-right: 0;\n}\n\n.process-control .el-form-item__label {\n  padding-right: 8px;\n}\n\n.process-control .el-input {\n  width: 150px;\n}\n\n.process-control .el-select {\n  width: 120px;\n}\n\n.process-control .el-input-number {\n  width: 150px;\n}\n\n.process-control .unit {\n  margin-left: 5px;\n  color: #606266;\n}\n\n.process-control .el-button {\n  margin-left: 10px;\n}\n\n.process-queues {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.queue-container {\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  display: flex;\n  flex-direction: column;\n  height: 240px;\n}\n\n.queue-container h3 {\n  margin: 0;\n  padding: 10px 15px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #f5f7fa;\n  border-radius: 4px 4px 0 0;\n  font-size: 14px;\n}\n\n.queue {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.queue::-webkit-scrollbar {\n  width: 6px;\n}\n\n.queue::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.queue::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n\n.process-tag {\n  margin: 0;\n  padding: 6px 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 13px;\n}\n\n.process-tag .process-info {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.process-tag .el-tag {\n  margin: 0;\n}\n\n.process-tag .el-tag--small {\n  height: 20px;\n  line-height: 18px;\n  padding: 0 6px;\n  font-size: 12px;\n}\n\n.process-list {\n  margin-bottom: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  height: 350px;\n  overflow: hidden;\n}\n\n.process-list h3 {\n  margin: 0;\n  padding: 10px;\n  border-bottom: 1px solid #ebeef5;\n  color: #303133;\n  font-size: 16px;\n}\n.process-list el-table {\n  margin-bottom: 10px;\n}\n/* 自定义表格滚动条样式 */\n.process-list .el-table__body-wrapper::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}