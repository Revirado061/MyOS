{"ast":null,"code":"import { createProcess, getAllProcesses, getCurrentProcess } from '../api/process';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      timer: null,\n      allProcesses: [],\n      interrupts: []\n    };\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses();\n    // 设置定时器，每1秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 1000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  methods: {\n    async fetchProcesses() {\n      try {\n        console.log('开始获取进程数据...');\n        const response = await getAllProcesses();\n        console.log('获取到的原始数据:', response);\n        if (response) {\n          // 清空所有队列\n          this.readyQueue = [];\n          this.runningQueue = [];\n          this.blockedQueue = [];\n          this.terminatedQueue = [];\n\n          // 根据进程状态分类\n          response.forEach(process => {\n            // console.log('处理进程:', process)\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process);\n                break;\n              case 'RUNNING':\n                this.runningQueue.push(process);\n                break;\n              case 'BLOCKED':\n                this.blockedQueue.push(process);\n                break;\n              case 'TERMINATED':\n                this.terminatedQueue.push(process);\n                break;\n            }\n          });\n\n          // console.log('就绪队列:', this.readyQueue)\n          // console.log('运行队列:', this.runningQueue)\n          // console.log('阻塞队列:', this.blockedQueue)\n          // console.log('终止队列:', this.terminatedQueue)\n        }\n      } catch (error) {\n        console.error('获取进程数据失败:', error);\n        this.$message.error('获取进程数据失败');\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        };\n        console.log(newProcess);\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess);\n\n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data);\n          this.processForm.name = '';\n          this.$message.success('进程创建成功');\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error);\n        this.$message.error('创建进程失败，请重试');\n      }\n    },\n    getPriorityLabel(priority) {\n      switch (priority) {\n        case 1:\n          return '高';\n        case 2:\n          return '中';\n        case 3:\n          return '低';\n        default:\n          return '未知';\n      }\n    },\n    getInterruptType(type) {\n      // 根据中断类型返回相应的图标类型\n      switch (type) {\n        case 'MEMORY':\n          return 'memory';\n        case 'IO':\n          return 'io';\n        case 'SCHEDULING':\n          return 'schedule';\n        default:\n          return 'info';\n      }\n    }\n  }\n};","map":{"version":3,"names":["createProcess","getAllProcesses","getCurrentProcess","name","data","processForm","priority","memorySize","readyQueue","runningQueue","blockedQueue","terminatedQueue","timer","allProcesses","interrupts","created","fetchProcesses","setInterval","beforeDestroy","clearInterval","methods","console","log","response","forEach","process","state","push","error","$message","newProcess","id","Date","now","success","getPriorityLabel","getInterruptType","type"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"left-panel\">\n      <!-- 进程控制表单 -->\n      <div class=\"process-control\">\n        <el-form :model=\"processForm\" label-width=\"100px\" inline>\n          <el-form-item label=\"进程名称\">\n            <el-input v-model=\"processForm.name\"></el-input>\n          </el-form-item>\n          <el-form-item label=\"优先级\">\n            <el-select v-model=\"processForm.priority\">\n              <el-option label=\"高\" :value=\"1\"></el-option>\n              <el-option label=\"中\" :value=\"2\"></el-option>\n              <el-option label=\"低\" :value=\"3\"></el-option>\n            </el-select>\n          </el-form-item>\n          <el-form-item label=\"内存大小(MB)\">\n            <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\"></el-input-number>\n          </el-form-item>\n          <el-form-item>\n            <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n\n      <!-- 进程队列 -->\n      <div class=\"process-queues\">\n        <div class=\"queue-container\">\n          <h3>就绪队列</h3>\n          <div class=\"queue ready-queue\">\n            <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n              {{ process.name }}\n            </el-tag>\n          </div>\n        </div>\n\n        <div class=\"queue-container\">\n          <h3>运行队列</h3>\n          <div class=\"queue running-queue\">\n            <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n              {{ process.name }}\n            </el-tag>\n          </div>\n        </div>\n\n        <div class=\"queue-container\">\n          <h3>阻塞队列</h3>\n          <div class=\"queue blocked-queue\">\n            <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n              {{ process.name }}\n            </el-tag>\n          </div>\n        </div>\n\n        <div class=\"queue-container\">\n          <h3>终止队列</h3>\n          <div class=\"queue terminated-queue\">\n            <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n              {{ process.name }}\n            </el-tag>\n          </div>\n        </div>\n      </div>\n\n      <!-- 进程列表 -->\n      <div class=\"process-list\">\n        <h3>进程列表</h3>\n        <el-table :data=\"allProcesses\" height=\"300\" style=\"width: 100%\">\n          <el-table-column prop=\"name\" label=\"进程名称\"></el-table-column>\n          <el-table-column prop=\"priority\" label=\"优先级\">\n            <template slot-scope=\"scope\">\n              {{ getPriorityLabel(scope.row.priority) }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"memorySize\" label=\"内存大小(MB)\"></el-table-column>\n          <el-table-column prop=\"state\" label=\"状态\"></el-table-column>\n        </el-table>\n      </div>\n    </div>\n\n    <div class=\"right-panel\">\n      <!-- 内存管理 -->\n      <div class=\"memory-management\">\n        <h3>内存管理</h3>\n        <div class=\"memory-grid\">\n          <!-- 这里将添加内存网格的显示 -->\n        </div>\n      </div>\n\n      <!-- 中断处理日志 -->\n      <div class=\"interrupt-handling\">\n        <h3>中断处理日志</h3>\n        <div class=\"interrupt-list\">\n          <el-timeline>\n            <el-timeline-item\n              v-for=\"(interrupt, index) in interrupts\"\n              :key=\"index\"\n              :type=\"getInterruptType(interrupt.type)\"\n              :timestamp=\"interrupt.time\">\n              {{ interrupt.message }}\n            </el-timeline-item>\n          </el-timeline>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { createProcess,getAllProcesses,getCurrentProcess } from '../api/process'\n\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      timer: null,\n      allProcesses: [],\n      interrupts: []\n    }\n  },\n  created() {\n    // 组件创建时立即获取一次数据\n    this.fetchProcesses()\n    // 设置定时器，每1秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 1000)\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  },\n  methods: {\n    async fetchProcesses() {\n      try {\n        console.log('开始获取进程数据...')\n        const response = await getAllProcesses()\n        console.log('获取到的原始数据:', response)\n        \n        if (response) {\n          // 清空所有队列\n          this.readyQueue = []\n          this.runningQueue = []\n          this.blockedQueue = []\n          this.terminatedQueue = []\n          \n          // 根据进程状态分类\n          response.forEach(process => {\n            // console.log('处理进程:', process)\n            switch (process.state) {\n              case 'READY':\n                this.readyQueue.push(process)\n                break\n              case 'RUNNING':\n                this.runningQueue.push(process)\n                break\n              case 'BLOCKED':\n                this.blockedQueue.push(process)\n                break\n              case 'TERMINATED':\n                this.terminatedQueue.push(process)\n                break\n            }\n          })\n          \n          // console.log('就绪队列:', this.readyQueue)\n          // console.log('运行队列:', this.runningQueue)\n          // console.log('阻塞队列:', this.blockedQueue)\n          // console.log('终止队列:', this.terminatedQueue)\n        }\n      } catch (error) {\n        console.error('获取进程数据失败:', error)\n        this.$message.error('获取进程数据失败')\n      }\n    },\n    async createProcess() {\n      try {\n        const newProcess = {\n          id: Date.now(),\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n          state: 'NEW'\n        }\n        console.log(newProcess)\n        // 调用后端 API 创建进程\n        const response = await createProcess(newProcess)\n        \n        // 如果创建成功，将进程添加到就绪队列\n        if (response.data) {\n          this.readyQueue.push(response.data)\n          this.processForm.name = ''\n          this.$message.success('进程创建成功')\n        }\n      } catch (error) {\n        console.error('创建进程失败:', error)\n        this.$message.error('创建进程失败，请重试')\n      }\n    },\n    getPriorityLabel(priority) {\n      switch (priority) {\n        case 1:\n          return '高'\n        case 2:\n          return '中'\n        case 3:\n          return '低'\n        default:\n          return '未知'\n      }\n    },\n    getInterruptType(type) {\n      // 根据中断类型返回相应的图标类型\n      switch (type) {\n        case 'MEMORY':\n          return 'memory'\n        case 'IO':\n          return 'io'\n        case 'SCHEDULING':\n          return 'schedule'\n        default:\n          return 'info'\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  gap: 20px;\n  padding: 20px;\n  height: 100%;\n}\n\n.left-panel {\n  flex: 6;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.right-panel {\n  flex: 4;\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.process-control {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.process-queues {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n}\n\n.queue-container {\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  padding: 10px;\n  background-color: #fff;\n}\n\n.queue {\n  min-height: 100px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n  padding: 10px;\n  background-color: #f5f7fa;\n  border-radius: 4px;\n}\n\n.process-tag {\n  margin: 5px;\n}\n\n.process-list {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.memory-management {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.memory-grid {\n  display: grid;\n  grid-template-columns: repeat(24, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  gap: 2px;\n  margin-top: 10px;\n}\n\n.interrupt-handling {\n  background-color: #fff;\n  padding: 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  flex: 1;\n  overflow-y: auto;\n}\n\n.interrupt-list {\n  margin-top: 10px;\n}\n</style> "],"mappings":"AA6GA,SAAAA,aAAA,EAAAC,eAAA,EAAAC,iBAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,WAAA;QACAF,IAAA;QACAG,QAAA;QACAC,UAAA;MACA;MACAC,UAAA;MACAC,YAAA;MACAC,YAAA;MACAC,eAAA;MACAC,KAAA;MACAC,YAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;IACA;IACA,KAAAC,cAAA;IACA;IACA,KAAAJ,KAAA,GAAAK,WAAA,MAAAD,cAAA;EACA;EACAE,cAAA;IACA;IACA,SAAAN,KAAA;MACAO,aAAA,MAAAP,KAAA;IACA;EACA;EACAQ,OAAA;IACA,MAAAJ,eAAA;MACA;QACAK,OAAA,CAAAC,GAAA;QACA,MAAAC,QAAA,SAAAtB,eAAA;QACAoB,OAAA,CAAAC,GAAA,cAAAC,QAAA;QAEA,IAAAA,QAAA;UACA;UACA,KAAAf,UAAA;UACA,KAAAC,YAAA;UACA,KAAAC,YAAA;UACA,KAAAC,eAAA;;UAEA;UACAY,QAAA,CAAAC,OAAA,CAAAC,OAAA;YACA;YACA,QAAAA,OAAA,CAAAC,KAAA;cACA;gBACA,KAAAlB,UAAA,CAAAmB,IAAA,CAAAF,OAAA;gBACA;cACA;gBACA,KAAAhB,YAAA,CAAAkB,IAAA,CAAAF,OAAA;gBACA;cACA;gBACA,KAAAf,YAAA,CAAAiB,IAAA,CAAAF,OAAA;gBACA;cACA;gBACA,KAAAd,eAAA,CAAAgB,IAAA,CAAAF,OAAA;gBACA;YACA;UACA;;UAEA;UACA;UACA;UACA;QACA;MACA,SAAAG,KAAA;QACAP,OAAA,CAAAO,KAAA,cAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACA,MAAA5B,cAAA;MACA;QACA,MAAA8B,UAAA;UACAC,EAAA,EAAAC,IAAA,CAAAC,GAAA;UACA9B,IAAA,OAAAE,WAAA,CAAAF,IAAA;UACAG,QAAA,OAAAD,WAAA,CAAAC,QAAA;UACAC,UAAA,OAAAF,WAAA,CAAAE,UAAA;UACAmB,KAAA;QACA;QACAL,OAAA,CAAAC,GAAA,CAAAQ,UAAA;QACA;QACA,MAAAP,QAAA,SAAAvB,aAAA,CAAA8B,UAAA;;QAEA;QACA,IAAAP,QAAA,CAAAnB,IAAA;UACA,KAAAI,UAAA,CAAAmB,IAAA,CAAAJ,QAAA,CAAAnB,IAAA;UACA,KAAAC,WAAA,CAAAF,IAAA;UACA,KAAA0B,QAAA,CAAAK,OAAA;QACA;MACA,SAAAN,KAAA;QACAP,OAAA,CAAAO,KAAA,YAAAA,KAAA;QACA,KAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAO,iBAAA7B,QAAA;MACA,QAAAA,QAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;IACA8B,iBAAAC,IAAA;MACA;MACA,QAAAA,IAAA;QACA;UACA;QACA;UACA;QACA;UACA;QACA;UACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}