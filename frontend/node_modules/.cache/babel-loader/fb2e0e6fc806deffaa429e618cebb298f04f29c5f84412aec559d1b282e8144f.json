{"ast":null,"code":"import { processApi } from '@/api/process_interrupt_device';\nimport { getAllDevices, getAvailableDevices, getDeviceStatus, requestDevice, releaseDevice, getDevicesByType, getDeviceInfo } from '@/api/device';\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      schedulingAlgorithm: '',\n      schedulingOptions: [{\n        label: '先到先服务 (FCFS)',\n        value: 'FCFS'\n      }, {\n        label: '优先级调度 (PRIORITY)',\n        value: 'PRIORITY'\n      }],\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null,\n      selectedState: 'ALL',\n      searchKeyword: '',\n      currentProcessId: null,\n      // 设备管理相关\n      devices: [],\n      deviceDialogVisible: false,\n      allocateDialogVisible: false,\n      selectedDevice: null,\n      allocateForm: {\n        timeout: 5\n      }\n    };\n  },\n  computed: {\n    filteredProcesses() {\n      let result = this.allProcesses;\n\n      // 状态筛选\n      if (this.selectedState !== 'ALL') {\n        result = result.filter(process => process.state === this.selectedState);\n      }\n\n      // 关键词搜索\n      if (this.searchKeyword) {\n        const keyword = this.searchKeyword.toLowerCase();\n        result = result.filter(process => process.name.toLowerCase().includes(keyword));\n      }\n      return result;\n    }\n  },\n  async created() {\n    try {\n      // 先获取当前调度算法\n      const response = await processApi.getSchedulingAlgorithm();\n      if (response.success) {\n        this.schedulingAlgorithm = response.data.algorithm;\n      }\n    } catch (error) {\n      console.error('获取调度算法失败:', error);\n      this.schedulingAlgorithm = 'FCFS'; // 如果获取失败，设置默认值\n    }\n\n    // 获取进程数据\n    this.fetchProcesses();\n    // 设置定时器，每30秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 30000);\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  methods: {\n    // 处理前端显示细节\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      };\n      return types[priority] || 'info';\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      };\n      return types[state] || 'info';\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      };\n      return texts[state] || state;\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-';\n      const date = new Date(timestamp);\n      return date.toLocaleString();\n    },\n    // 进程操作相关方法\n    async handleTerminate(process) {\n      try {\n        const response = await processApi.terminateProcess(process.id);\n        if (response.success) {\n          this.$message.success(response.message || `进程 ${process.name} 已终止`);\n          // 更新进程列表\n          await this.fetchProcesses();\n          // 如果当前进程在运行队列中，清空运行队列\n          if (this.runningQueue.some(p => p.id === process.id)) {\n            this.runningQueue = [];\n          }\n        } else {\n          this.$message.error(response.message || '终止进程失败');\n        }\n      } catch (error) {\n        console.error('终止进程错误:', error);\n        this.$message.error('终止进程失败');\n      }\n    },\n    // 获取特定状态的进程\n    async getProcessesByState(state) {\n      try {\n        const response = await processApi.getProcessesByState(state);\n        return response.data || [];\n      } catch (error) {\n        console.error(`获取${state}状态进程失败:`, error);\n        return [];\n      }\n    },\n    // 更新后的fetchProcesses方法\n    async fetchProcesses() {\n      try {\n        // 获取所有进程\n        const allResponse = await processApi.getAllProcesses();\n        this.allProcesses = allResponse.data || [];\n\n        // 获取各状态进程\n        this.readyQueue = await this.getProcessesByState('ready');\n        // 使用 getCurrentProcess 获取运行中的进程\n        const currentProcessResponse = await processApi.getCurrentProcess();\n        this.runningQueue = currentProcessResponse.data ? [currentProcessResponse.data] : [];\n        this.blockedQueue = await this.getProcessesByState('waiting');\n        this.terminatedQueue = await this.getProcessesByState('terminated');\n      } catch (error) {\n        console.error('获取进程数据失败:', error);\n        this.$message.error('获取进程数据失败');\n        // 清空所有队列\n        this.readyQueue = [];\n        this.runningQueue = [];\n        this.blockedQueue = [];\n        this.terminatedQueue = [];\n        this.allProcesses = [];\n      }\n    },\n    async createProcess() {\n      try {\n        const response = await processApi.createProcess({\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize\n        });\n        if (response.success) {\n          this.$message.success('进程创建成功');\n          this.processForm.name = '';\n          // 立即刷新数据\n          await this.fetchProcesses();\n        } else {\n          this.$message.error(response.message || '创建进程失败');\n        }\n      } catch (error) {\n        this.$message.error('创建进程失败，请重试');\n      }\n    },\n    // 设备管理相关方法\n    async handleEnableDevice(row) {\n      try {\n        this.currentProcessId = row.id;\n        await this.fetchDevices();\n        this.deviceDialogVisible = true;\n      } catch (error) {\n        console.error('获取设备列表失败:', error);\n        this.$message.error('获取设备列表失败');\n      }\n    },\n    async fetchDevices() {\n      try {\n        const response = await getAllDevices();\n        console.log('response', response);\n        if (response.message) {\n          this.devices = response.data || [];\n          console.log('devices', response.data);\n        } else {\n          this.$message.error(response.message || '获取设备列表失败');\n          this.devices = [];\n        }\n      } catch (error) {\n        console.error('获取设备列表失败:', error);\n        this.$message.error('获取设备列表失败');\n        this.devices = [];\n      }\n    },\n    // 获取状态标签类型\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',\n        // 空闲状态\n        'BUSY': 'warning',\n        // 忙碌状态\n        'ERROR': 'danger',\n        // 错误状态\n        'WAITING': 'info' // 等待状态\n      };\n      return types[status] || 'info';\n    },\n    // 弹出设备分配对话框\n    showAllocateDialog(device) {\n      this.selectedDevice = device;\n      this.allocateForm.timeout = 5;\n      this.allocateDialogVisible = true;\n    },\n    // 确认分配设备\n    async handleAllocate() {\n      if (!this.selectedDevice) return;\n      try {\n        const response = await requestDevice(this.currentProcessId, this.selectedDevice.type);\n        if (response.success) {\n          this.$message.success(response.message || '设备分配成功');\n          this.allocateDialogVisible = false;\n          // 刷新设备和进程数据\n          await Promise.all([this.fetchDevices(), this.fetchProcesses()]);\n        } else {\n          this.$message.error(response.message || '设备分配失败');\n        }\n      } catch (error) {\n        console.error('设备分配失败:', error);\n        this.$message.error('设备分配失败');\n      }\n    },\n    // 释放设备\n    async handleRelease(device) {\n      try {\n        const response = await releaseDevice(device.currentProcessId, device.type);\n        if (response.success) {\n          this.$message.success(response.message || '设备释放成功');\n          // 刷新设备和进程数据\n          await Promise.all([this.fetchDevices(), this.fetchProcesses()]);\n        } else {\n          this.$message.error(response.message || '设备释放失败');\n        }\n      } catch (error) {\n        console.error('设备释放失败:', error);\n        this.$message.error('设备释放失败');\n      }\n    },\n    handleSearch() {\n      // 可以在这里添加额外的搜索逻辑\n    },\n    // 添加状态筛选方法\n    filterState(value, row) {\n      return row.state === value;\n    },\n    // 添加优先级筛选方法\n    filterPriority(value, row) {\n      return row.priority === value;\n    },\n    // 处理调度算法变更\n\n    async handleSchedulingAlgorithmChange(newValue) {\n      console.log('用户选择的调度算法:', newValue);\n      const originalValue = this.schedulingAlgorithm; // 保留原始值以便回退\n\n      try {\n        const response = await processApi.setSchedulingAlgorithm(newValue);\n        if (response?.success) {\n          this.$message.success(response.message || '调度算法设置成功');\n          this.schedulingAlgorithm = newValue; // 显式设置为新值（以防同步问题）\n\n          // 刷新进程数据，确保新算法生效\n          await this.fetchProcesses();\n        } else {\n          this.$message.error(response.message || '调度算法设置失败');\n          this.schedulingAlgorithm = originalValue; // 回退\n        }\n      } catch (error) {\n        console.error('设置调度算法失败:', error);\n        this.$message.error('调度算法设置失败，请稍后再试');\n        this.schedulingAlgorithm = originalValue; // 出错也回退\n      }\n    },\n    // 设备类型筛选\n    filterDeviceType(value, row) {\n      return row.type === value;\n    },\n    // 设备状态筛选\n    filterDeviceStatus(value, row) {\n      return row.status === value;\n    },\n    // 获取设备类型文本\n    getDeviceTypeText(type) {\n      const types = {\n        'PRINTER': '打印机',\n        'DISK': '磁盘',\n        'SCANNER': '扫描仪',\n        'NETWORK': '网络设备',\n        'OTHER': '其他'\n      };\n      return types[type] || type;\n    },\n    // 获取设备状态文本\n    getDeviceStatusText(status) {\n      const statuses = {\n        'IDLE': '空闲',\n        'BUSY': '忙碌',\n        'WAITING': '等待',\n        'ERROR': '错误'\n      };\n      return statuses[status] || status;\n    }\n  }\n};","map":{"version":3,"names":["processApi","getAllDevices","getAvailableDevices","getDeviceStatus","requestDevice","releaseDevice","getDevicesByType","getDeviceInfo","name","data","processForm","priority","memorySize","schedulingAlgorithm","schedulingOptions","label","value","readyQueue","runningQueue","blockedQueue","terminatedQueue","allProcesses","timer","selectedState","searchKeyword","currentProcessId","devices","deviceDialogVisible","allocateDialogVisible","selectedDevice","allocateForm","timeout","computed","filteredProcesses","result","filter","process","state","keyword","toLowerCase","includes","created","response","getSchedulingAlgorithm","success","algorithm","error","console","fetchProcesses","setInterval","beforeDestroy","clearInterval","methods","getPriorityType","types","getStateType","getStateText","texts","formatTime","timestamp","date","Date","toLocaleString","handleTerminate","terminateProcess","id","$message","message","some","p","getProcessesByState","allResponse","getAllProcesses","currentProcessResponse","getCurrentProcess","createProcess","handleEnableDevice","row","fetchDevices","log","getStatusType","status","showAllocateDialog","device","handleAllocate","type","Promise","all","handleRelease","handleSearch","filterState","filterPriority","handleSchedulingAlgorithmChange","newValue","originalValue","setSchedulingAlgorithm","filterDeviceType","filterDeviceStatus","getDeviceTypeText","getDeviceStatusText","statuses"],"sources":["src/components/ProcessManagement.vue"],"sourcesContent":["<template>\n  <div class=\"process-management\">\n    <div class=\"process-control\">\n      <el-form class=\"input-form\" :model=\"processForm\" label-width=\"80px\" inline>\n        <el-form-item label=\"进程名称\">\n          <el-input v-model=\"processForm.name\" placeholder=\"请输入进程名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"优先级\">\n          <el-select v-model=\"processForm.priority\" placeholder=\"请选择\">\n            <el-option label=\"高\" :value=\"1\"></el-option>\n            <el-option label=\"中\" :value=\"2\"></el-option>\n            <el-option label=\"低\" :value=\"3\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"内存大小\">\n          <el-input-number v-model=\"processForm.memorySize\" :min=\"1\" :max=\"1024\" :step=\"1\"></el-input-number>\n          <span class=\"unit\">MB</span>\n        </el-form-item>\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"createProcess\">创建进程</el-button>\n        </el-form-item>\n      </el-form>\n    </div>\n\n    <div class=\"process-queues\">\n      <div class=\"queue-container\">\n        <h3>就绪队列</h3>\n        <div class=\"queue ready-queue\">\n          <el-tag v-for=\"process in readyQueue\" :key=\"process.id\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>运行队列</h3>\n        <div class=\"queue running-queue\">\n          <el-tag v-for=\"process in runningQueue\" :key=\"process.id\" type=\"success\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>阻塞队列</h3>\n        <div class=\"queue blocked-queue\">\n          <el-tag v-for=\"process in blockedQueue\" :key=\"process.id\" type=\"warning\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n\n      <div class=\"queue-container\">\n        <h3>终止队列</h3>\n        <div class=\"queue terminated-queue\">\n          <el-tag v-for=\"process in terminatedQueue\" :key=\"process.id\" type=\"info\" class=\"process-tag\">\n            <div class=\"process-info\">\n              <span>{{ process.name }}</span>\n              <el-tag size=\"small\" type=\"info\">P{{ process.priority }}</el-tag>\n              <el-tag size=\"small\" type=\"info\">{{ process.memorySize }}MB</el-tag>\n            </div>\n          </el-tag>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"process-list\">\n      <div class=\"process-list-header\">\n        <h3>进程列表</h3>\n        <div class=\"scheduling-algorithm\">\n          <span class=\"label\">调度算法：</span>\n          <el-select \n            v-model=\"schedulingAlgorithm\" \n            @change=\"handleSchedulingAlgorithmChange\" \n            size=\"small\"\n            placeholder=\"请选择调度算法\"\n          >\n            <el-option \n              v-for=\"item in schedulingOptions\" \n              :key=\"item.value\" \n              :label=\"item.label\" \n              :value=\"item.value\"\n            ></el-option>\n          </el-select>\n        </div>\n      </div>\n      <el-table \n        :data=\"allProcesses\" \n        style=\"width: 100%\" \n        border\n        height=\"280\"\n      >\n        <el-table-column \n          prop=\"id\" \n          label=\"进程ID\" \n          width=\"100\" \n          align=\"center\"\n          sortable\n        ></el-table-column>\n        <el-table-column prop=\"name\" label=\"进程名称\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column \n          prop=\"priority\" \n          label=\"优先级\" \n          width=\"80\" \n          align=\"center\"\n          :filters=\"[\n            { text: '高', value: 1 },\n            { text: '中', value: 2 },\n            { text: '低', value: 3 }\n          ]\"\n          :filter-method=\"filterPriority\"\n          filter-placement=\"bottom\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getPriorityType(scope.row.priority)\">\n              P{{ scope.row.priority }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"memorySize\" label=\"内存大小\" width=\"120\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ scope.row.memorySize }}MB\n          </template>\n        </el-table-column>\n        <el-table-column \n          prop=\"state\" \n          label=\"状态\" \n          width=\"120\" \n          align=\"center\"\n          :filters=\"[\n            { text: '就绪', value: 'READY' },\n            { text: '运行中', value: 'RUNNING' },\n            { text: '阻塞', value: 'BLOCKED' },\n            { text: '已终止', value: 'TERMINATED' }\n          ]\"\n          :filter-method=\"filterState\"\n          filter-placement=\"bottom\"\n        >\n          <template slot-scope=\"scope\">\n            <el-tag :type=\"getStateType(scope.row.state)\">\n              {{ getStateText(scope.row.state) }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column prop=\"createTime\" label=\"创建时间\" width=\"180\" align=\"center\">\n          <template slot-scope=\"scope\">\n            {{ formatTime(scope.row.createTime) }}\n          </template>\n        </el-table-column>\n        <el-table-column label=\"操作\" align=\"center\" width=\"200\">\n          <template slot-scope=\"scope\">\n            <el-button\n              style=\"margin-left: 10px;\"\n              size=\"mini\"\n              type=\"primary\"\n              @click=\"handleEnableDevice(scope.row)\"\n            >启用设备</el-button>\n            <!-- :disabled=\"scope.row.state !== 'RUNNING'\" -->\n            <el-button\n              size=\"mini\"\n              type=\"danger\"\n              @click=\"handleTerminate(scope.row)\"\n              :disabled=\"scope.row.state === 'TERMINATED'\"\n            >终止</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n    </div>\n\n    <!-- 进程相关内容 -->\n    <el-dialog\n      title=\"设备管理\"\n      :visible.sync=\"deviceDialogVisible\"\n      width=\"80%\"\n      :close-on-click-modal=\"false\">\n      <div class=\"device-control\">\n        <el-table :data=\"devices\" style=\"width: 100%\">\n          <el-table-column prop=\"id\" label=\"设备ID\" align=\"center\" header-align=\"center\" />\n          <el-table-column prop=\"name\" label=\"设备名称\" align=\"center\" header-align=\"center\" />\n          <el-table-column \n            prop=\"type\" \n            label=\"设备类型\" \n            align=\"center\" \n            header-align=\"center\"\n            :filters=\"[\n              { text: '打印机', value: 'PRINTER' },\n              { text: '磁盘', value: 'DISK' },\n              { text: '扫描仪', value: 'SCANNER' },\n              { text: '网络设备', value: 'NETWORK' },\n              { text: '其他', value: 'OTHER' }\n            ]\"\n            :filter-method=\"filterDeviceType\"\n            filter-placement=\"bottom\"\n          ></el-table-column>\n          <el-table-column \n            prop=\"status\" \n            label=\"状态\" \n            align=\"center\" \n            header-align=\"center\"\n            :filters=\"[\n              { text: '空闲', value: 'IDLE' },\n              { text: '忙碌', value: 'BUSY' },\n              { text: '等待', value: 'WAITING' },\n              { text: '错误', value: 'ERROR' }\n            ]\"\n            :filter-method=\"filterDeviceStatus\"\n            filter-placement=\"bottom\"\n          >\n            <template slot-scope=\"scope\">\n              <el-tag :type=\"getStatusType(scope.row.status)\">\n                {{ getDeviceStatusText(scope.row.status) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"currentProcessId\" label=\"当前进程\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.currentProcessId || '无' }}\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"remainingTime\" label=\"剩余时间\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.remainingTime || 0 }}秒\n            </template>\n          </el-table-column>\n          <el-table-column label=\"操作\" width=\"180\" align=\"center\" header-align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-button\n                size=\"mini\"\n                type=\"primary\"\n                @click=\"showAllocateDialog(scope.row)\"\n                :disabled=\"scope.row.status !== 'IDLE'\">\n                分配\n              </el-button>\n              <el-button\n                size=\"mini\"\n                type=\"danger\"\n                @click=\"handleRelease(scope.row)\"\n                :disabled=\"scope.row.status === 'IDLE'\">\n                释放\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n      </div>\n    </el-dialog>\n\n    <!-- 分配设备对话框 -->\n    <el-dialog\n      title=\"分配设备\"\n      :visible.sync=\"allocateDialogVisible\"\n      width=\"30%\"\n      :close-on-click-modal=\"false\">\n      <el-form :model=\"allocateForm\" label-width=\"100px\">\n        <el-form-item label=\"设备名称\">\n          <span>{{ selectedDevice ? selectedDevice.name : '' }}</span>\n        </el-form-item>\n        <el-form-item label=\"运行时间\">\n          <el-input-number \n            v-model=\"allocateForm.timeout\" \n            :min=\"1\" \n            :max=\"60\"\n            label=\"秒\">\n          </el-input-number>\n          <span class=\"unit\" style=\"margin-left: 10px;\">秒</span>\n        </el-form-item>\n      </el-form>\n      <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"allocateDialogVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"handleAllocate\">确 定</el-button>\n      </span>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { processApi } from '@/api/process_interrupt_device'\nimport { \n  getAllDevices, \n  getAvailableDevices, \n  getDeviceStatus,\n  requestDevice,\n  releaseDevice,\n  getDevicesByType,\n  getDeviceInfo \n} from '@/api/device'\n\nexport default {\n  name: 'ProcessManagement',\n  data() {\n    return {\n      processForm: {\n        name: '',\n        priority: 2,\n        memorySize: 64\n      },\n      schedulingAlgorithm: '',\n      schedulingOptions: [\n        { label: '先到先服务 (FCFS)', value: 'FCFS' },\n        { label: '优先级调度 (PRIORITY)', value: 'PRIORITY' }\n      ],\n      readyQueue: [],\n      runningQueue: [],\n      blockedQueue: [],\n      terminatedQueue: [],\n      allProcesses: [],\n      timer: null,\n      selectedState: 'ALL',\n      searchKeyword: '',\n      currentProcessId: null,\n\n      // 设备管理相关\n      devices: [],\n      deviceDialogVisible: false,\n      allocateDialogVisible: false,\n      selectedDevice: null,\n      allocateForm: {\n        timeout: 5\n      },\n    }\n  },\n  computed: {\n    filteredProcesses() {\n      let result = this.allProcesses\n      \n      // 状态筛选\n      if (this.selectedState !== 'ALL') {\n        result = result.filter(process => process.state === this.selectedState)\n      }\n      \n      // 关键词搜索\n      if (this.searchKeyword) {\n        const keyword = this.searchKeyword.toLowerCase()\n        result = result.filter(process => \n          process.name.toLowerCase().includes(keyword)\n        )\n      }\n      \n      return result\n    },\n  },\n  async created() {\n    try {\n      // 先获取当前调度算法\n      const response = await processApi.getSchedulingAlgorithm()\n      if (response.success) {\n        this.schedulingAlgorithm = response.data.algorithm\n      }\n    } catch (error) {\n      console.error('获取调度算法失败:', error)\n      this.schedulingAlgorithm = 'FCFS' // 如果获取失败，设置默认值\n    }\n    \n    // 获取进程数据\n    this.fetchProcesses()\n    // 设置定时器，每30秒更新一次数据\n    this.timer = setInterval(this.fetchProcesses, 30000)\n  },\n  beforeDestroy() {\n    // 组件销毁前清除定时器\n    if (this.timer) {\n      clearInterval(this.timer)\n    }\n  },\n  methods: {\n    // 处理前端显示细节\n    getPriorityType(priority) {\n      const types = {\n        1: 'danger',\n        2: 'warning',\n        3: 'info'\n      }\n      return types[priority] || 'info'\n    },\n    getStateType(state) {\n      const types = {\n        'READY': 'info',\n        'RUNNING': 'success',\n        'BLOCKED': 'warning',\n        'TERMINATED': 'info'\n      }\n      return types[state] || 'info'\n    },\n    getStateText(state) {\n      const texts = {\n        'READY': '就绪',\n        'RUNNING': '运行中',\n        'BLOCKED': '阻塞',\n        'TERMINATED': '已终止'\n      }\n      return texts[state] || state\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '-'\n      const date = new Date(timestamp)\n      return date.toLocaleString()\n    },\n\n    // 进程操作相关方法\n    async handleTerminate(process) {\n      try {\n        const response = await processApi.terminateProcess(process.id)\n        if (response.success) {\n          this.$message.success(response.message || `进程 ${process.name} 已终止`)\n          // 更新进程列表\n          await this.fetchProcesses()\n          // 如果当前进程在运行队列中，清空运行队列\n          if (this.runningQueue.some(p => p.id === process.id)) {\n            this.runningQueue = []\n          }\n        } else {\n          this.$message.error(response.message || '终止进程失败')\n        }\n      } catch (error) {\n        console.error('终止进程错误:', error)\n        this.$message.error('终止进程失败')\n      }\n    },\n\n    // 获取特定状态的进程\n    async getProcessesByState(state) {\n      try {\n        const response = await processApi.getProcessesByState(state)\n        return response.data || []\n      } catch (error) {\n        console.error(`获取${state}状态进程失败:`, error)\n        return []\n      }\n    },\n\n    // 更新后的fetchProcesses方法\n    async fetchProcesses() {\n      try {\n        // 获取所有进程\n        const allResponse = await processApi.getAllProcesses()\n        this.allProcesses = allResponse.data || []\n\n        // 获取各状态进程\n        this.readyQueue = await this.getProcessesByState('ready')\n        // 使用 getCurrentProcess 获取运行中的进程\n        const currentProcessResponse = await processApi.getCurrentProcess()\n        this.runningQueue = currentProcessResponse.data ? [currentProcessResponse.data] : []\n        this.blockedQueue = await this.getProcessesByState('waiting')\n        this.terminatedQueue = await this.getProcessesByState('terminated')\n      } catch (error) {\n        console.error('获取进程数据失败:', error)\n        this.$message.error('获取进程数据失败')\n        // 清空所有队列\n        this.readyQueue = []\n        this.runningQueue = []\n        this.blockedQueue = []\n        this.terminatedQueue = []\n        this.allProcesses = []\n      }\n    },\n\n    async createProcess() {\n      try {\n        const response = await processApi.createProcess({\n          name: this.processForm.name,\n          priority: this.processForm.priority,\n          memorySize: this.processForm.memorySize,\n        })\n        \n        if (response.success) {\n          this.$message.success('进程创建成功')\n          this.processForm.name = ''\n          // 立即刷新数据\n          await this.fetchProcesses()\n        } else {\n          this.$message.error(response.message || '创建进程失败')\n        }\n      } catch (error) {\n        this.$message.error('创建进程失败，请重试')\n      }\n    },\n    \n    // 设备管理相关方法\n    async handleEnableDevice(row) {\n      try {\n        this.currentProcessId = row.id\n        await this.fetchDevices()\n        this.deviceDialogVisible = true\n      } catch (error) {\n        console.error('获取设备列表失败:', error)\n        this.$message.error('获取设备列表失败')\n      }\n    },\n\n    async fetchDevices() {\n      try {\n        const response = await getAllDevices()\n        console.log('response', response)\n        if (response.message) {\n          this.devices = response.data || []\n          console.log('devices', response.data)\n        } else {\n          this.$message.error(response.message || '获取设备列表失败')\n          this.devices = []\n        }\n      } catch (error) {\n        console.error('获取设备列表失败:', error)\n        this.$message.error('获取设备列表失败')\n        this.devices = []\n      }\n    },\n\n    // 获取状态标签类型\n    getStatusType(status) {\n      const types = {\n        'IDLE': 'success',    // 空闲状态\n        'BUSY': 'warning',    // 忙碌状态\n        'ERROR': 'danger',    // 错误状态\n        'WAITING': 'info'     // 等待状态\n      }\n      return types[status] || 'info'\n    },\n\n    // 弹出设备分配对话框\n    showAllocateDialog(device) {\n      this.selectedDevice = device\n      this.allocateForm.timeout = 5\n      this.allocateDialogVisible = true\n    },\n\n    // 确认分配设备\n    async handleAllocate() {\n      if (!this.selectedDevice) return\n\n      try {\n        const response = await requestDevice(\n          this.currentProcessId,\n          this.selectedDevice.type\n        )\n        \n        if (response.success) {\n          this.$message.success(response.message || '设备分配成功')\n          this.allocateDialogVisible = false\n          // 刷新设备和进程数据\n          await Promise.all([\n            this.fetchDevices(),\n            this.fetchProcesses()\n          ])\n        } else {\n          this.$message.error(response.message || '设备分配失败')\n        }\n      } catch (error) {\n        console.error('设备分配失败:', error)\n        this.$message.error('设备分配失败')\n      }\n    },\n\n    // 释放设备\n    async handleRelease(device) {\n      try {\n        const response = await releaseDevice(\n          device.currentProcessId,\n          device.type\n        )\n        \n        if (response.success) {\n          this.$message.success(response.message || '设备释放成功')\n          // 刷新设备和进程数据\n          await Promise.all([\n            this.fetchDevices(),\n            this.fetchProcesses()\n          ])\n        } else {\n          this.$message.error(response.message || '设备释放失败')\n        }\n      } catch (error) {\n        console.error('设备释放失败:', error)\n        this.$message.error('设备释放失败')\n      }\n    },\n\n    handleSearch() {\n      // 可以在这里添加额外的搜索逻辑\n    },\n\n    // 添加状态筛选方法\n    filterState(value, row) {\n      return row.state === value\n    },\n\n    // 添加优先级筛选方法\n    filterPriority(value, row) {\n      return row.priority === value\n    },\n\n    // 处理调度算法变更\n\n    async handleSchedulingAlgorithmChange(newValue) {\n      console.log('用户选择的调度算法:', newValue);\n\n      const originalValue = this.schedulingAlgorithm; // 保留原始值以便回退\n\n      try {\n        const response = await processApi.setSchedulingAlgorithm(newValue);\n\n        if (response?.success) {\n          this.$message.success(response.message || '调度算法设置成功');\n          this.schedulingAlgorithm = newValue; // 显式设置为新值（以防同步问题）\n          \n          // 刷新进程数据，确保新算法生效\n          await this.fetchProcesses();\n        } else {\n          this.$message.error(response.message || '调度算法设置失败');\n          this.schedulingAlgorithm = originalValue; // 回退\n        }\n\n      } catch (error) {\n        console.error('设置调度算法失败:', error);\n        this.$message.error('调度算法设置失败，请稍后再试');\n        this.schedulingAlgorithm = originalValue; // 出错也回退\n      }\n    },\n\n    // 设备类型筛选\n    filterDeviceType(value, row) {\n      return row.type === value\n    },\n\n    // 设备状态筛选\n    filterDeviceStatus(value, row) {\n      return row.status === value\n    },\n\n    // 获取设备类型文本\n    getDeviceTypeText(type) {\n      const types = {\n        'PRINTER': '打印机',\n        'DISK': '磁盘',\n        'SCANNER': '扫描仪',\n        'NETWORK': '网络设备',\n        'OTHER': '其他'\n      }\n      return types[type] || type\n    },\n\n    // 获取设备状态文本\n    getDeviceStatusText(status) {\n      const statuses = {\n        'IDLE': '空闲',\n        'BUSY': '忙碌',\n        'WAITING': '等待',\n        'ERROR': '错误'\n      }\n      return statuses[status] || status\n    },\n  }\n}\n</script>\n\n<style scoped>\n.process-management {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 900px;\n  padding: 20px;\n  gap: 20px;\n}\n\n.process-control {\n  background-color: #fff;\n  padding: 20px 0 20px 20px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n}\n\n.process-control .el-form {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n  margin-right: 10px;\n}\n\n.process-control .el-form-item {\n  margin-bottom: 0;\n  margin-right: 0;\n}\n\n.process-control .el-form-item__label {\n  padding-right: 8px;\n}\n\n.process-control .el-input {\n  width: 150px;\n}\n\n.process-control .el-select {\n  width: 120px;\n}\n\n.process-control .el-input-number {\n  width: 150px;\n}\n\n.process-control .unit {\n  margin-left: 5px;\n  color: #606266;\n}\n\n.process-control .el-button {\n  margin-left: 10px;\n}\n\n.process-queues {\n  display: grid;\n  grid-template-columns: repeat(4, 1fr);\n  gap: 20px;\n  width: 100%;\n  margin-bottom: 20px;\n}\n\n.queue-container {\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  display: flex;\n  flex-direction: column;\n  height: 240px;\n}\n\n.queue-container h3 {\n  margin: 0;\n  padding: 10px 15px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #f5f7fa;\n  border-radius: 4px 4px 0 0;\n  font-size: 14px;\n}\n\n.queue {\n  flex: 1;\n  overflow-y: auto;\n  padding: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n}\n\n.queue::-webkit-scrollbar {\n  width: 6px;\n}\n\n.queue::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.queue::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n\n.process-tag {\n  margin: 0;\n  padding: 6px 10px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 13px;\n}\n\n.process-tag .process-info {\n  display: flex;\n  align-items: center;\n  gap: 6px;\n}\n\n.process-tag .el-tag {\n  margin: 0;\n}\n\n.process-tag .el-tag--small {\n  height: 20px;\n  line-height: 18px;\n  padding: 0 6px;\n  font-size: 12px;\n}\n\n.process-list {\n  margin-bottom: 10px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0,0,0,0.1);\n  height: 350px;\n  overflow: hidden;\n}\n\n.process-list-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 10px;\n  border-bottom: 1px solid #ebeef5;\n  background-color: #f5f7fa;\n}\n\n.process-list-header h3 {\n  margin: 0;\n  color: #303133;\n  font-size: 16px;\n}\n\n.scheduling-algorithm {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.scheduling-algorithm .label {\n  color: #606266;\n  font-size: 14px;\n}\n\n.scheduling-algorithm .el-select {\n  width: 180px;\n}\n\n.process-list el-table {\n  margin-bottom: 10px;\n}\n/* 自定义表格滚动条样式 */\n.process-list .el-table__body-wrapper::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-thumb {\n  background-color: #dcdfe6;\n  border-radius: 3px;\n}\n\n.process-list .el-table__body-wrapper::-webkit-scrollbar-track {\n  background-color: #f5f7fa;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}